<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SP_SENTRY.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SP_SENTRY.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140101: Last Updated: Thu Jan 28 11:29:57 2021
<BR><P>
<H3>Maximum Stack Usage =        180 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; TASK_GlobalInit &rArr; RC_ReceiverInit &rArr; USART_RX_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f9]">__user_initial_stackheap</a>
 <LI><a href="#[239]">delay_us</a>
 <LI><a href="#[1ac]">delay_ms</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[39]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">NMI_Handler</a><BR>
 <LI><a href="#[3a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">HardFault_Handler</a><BR>
 <LI><a href="#[3b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">MemManage_Handler</a><BR>
 <LI><a href="#[3c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">BusFault_Handler</a><BR>
 <LI><a href="#[3d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">UsageFault_Handler</a><BR>
 <LI><a href="#[3e]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">SVC_Handler</a><BR>
 <LI><a href="#[3f]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">DebugMon_Handler</a><BR>
 <LI><a href="#[41]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">SysTick_Handler</a><BR>
 <LI><a href="#[54]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">ADC_IRQHandler</a><BR>
 <LI><a href="#[e5]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e5]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[54]">ADC_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[3c]">BusFault_Handler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[56]">CAN1_RX0_IRQHandler</a> from sp_can.o(.text.CAN1_RX0_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[57]">CAN1_RX1_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[58]">CAN1_SCE_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[55]">CAN1_TX_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[82]">CAN2_RX0_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[83]">CAN2_RX1_IRQHandler</a> from sp_can.o(.text.CAN2_RX1_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[84]">CAN2_SCE_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[81]">CAN2_TX_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[b2]">CAN_RegistReceiver</a> from sp_can.o(.text.CAN_RegistReceiver) referenced from sp_can.o(.rodata.spCAN)
 <LI><a href="#[b3]">CAN_RegistTransmitter</a> from sp_can.o(.text.CAN_RegistTransmitter) referenced from sp_can.o(.rodata.spCAN)
 <LI><a href="#[b4]">CAN_SendMsg</a> from sp_can.o(.text.CAN_SendMsg) referenced from sp_can.o(.rodata.spCAN)
 <LI><a href="#[21]">CHASIS_AddMonitor</a> from sp_motor.o(.text.CHASIS_AddMonitor) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[20]">CHASIS_EnableMotor</a> from sp_motor.o(.text.CHASIS_EnableMotor) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[25]">CHASIS_GetMotor</a> from sp_motor.o(.text.CHASIS_GetMotor) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[9]">CHASIS_Init</a> from sp_chasis.o(.text.CHASIS_Init) referenced 2 times from sp_chasis.o(.data.spCHASIS)
 <LI><a href="#[a]">CHASIS_Looper</a> from sp_chasis.o(.text.CHASIS_Looper) referenced 2 times from sp_chasis.o(.data.spCHASIS)
 <LI><a href="#[b]">CHASIS_Move</a> from sp_chasis.o(.text.CHASIS_Move) referenced 2 times from sp_chasis.o(.data.spCHASIS)
 <LI><a href="#[23]">CHASIS_SetMotorPosition</a> from sp_motor.o(.text.CHASIS_SetMotorPosition) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[24]">CHASIS_SetMotorRelativePosition</a> from sp_motor.o(.text.CHASIS_SetMotorRelativePosition) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[22]">CHASIS_SetMotorSpeed</a> from sp_motor.o(.text.CHASIS_SetMotorSpeed) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[91]">CRYP_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[90]">DCMI_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[4d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[4e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[4f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[50]">DMA1_Stream3_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[51]">DMA1_Stream4_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[52]">DMA1_Stream5_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[53]">DMA1_Stream6_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[71]">DMA1_Stream7_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[9a]">DMA2D_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[7a]">DMA2_Stream0_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[7b]">DMA2_Stream1_IRQHandler</a> from sp_irq.o(.text.DMA2_Stream1_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[7c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[7d]">DMA2_Stream3_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[7e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[86]">DMA2_Stream5_IRQHandler</a> from sp_irq.o(.text.DMA2_Stream5_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[87]">DMA2_Stream6_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[88]">DMA2_Stream7_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[a1]">DMA_ClearITPendingBit</a> from stm32f4xx_dma.o(i.DMA_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.DMA2_Stream1_IRQHandler)
 <LI><a href="#[a1]">DMA_ClearITPendingBit</a> from stm32f4xx_dma.o(i.DMA_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.DMA2_Stream5_IRQHandler)
 <LI><a href="#[b8]">DMA_ClearStreamFlagBit</a> from sp_dma.o(.text.DMA_ClearStreamFlagBit) referenced from sp_dma.o(.rodata.spDMA)
 <LI><a href="#[bc]">DMA_CopyMem2Mem</a> from sp_dma.o(.text.DMA_CopyMem2Mem) referenced from sp_dma.o(.rodata.spDMA)
 <LI><a href="#[a0]">DMA_GetITStatus</a> from stm32f4xx_dma.o(i.DMA_GetITStatus) referenced 2 times from sp_irq.o(.text.DMA2_Stream1_IRQHandler)
 <LI><a href="#[a0]">DMA_GetITStatus</a> from stm32f4xx_dma.o(i.DMA_GetITStatus) referenced 2 times from sp_irq.o(.text.DMA2_Stream5_IRQHandler)
 <LI><a href="#[b9]">DMA_GetStreamFlagBit</a> from sp_dma.o(.text.DMA_GetStreamFlagBit) referenced from sp_dma.o(.rodata.spDMA)
 <LI><a href="#[bb]">DMA_InitNull</a> from sp_dma.o(.text.DMA_InitNull) referenced from sp_dma.o(.rodata.spDMA)
 <LI><a href="#[ba]">DMA_ResetCounter</a> from sp_dma.o(.text.DMA_ResetCounter) referenced from sp_dma.o(.rodata.spDMA)
 <LI><a href="#[b7]">DMA_Restart</a> from sp_dma.o(.text.DMA_Restart) referenced from sp_dma.o(.rodata.spDMA)
 <LI><a href="#[b6]">DMA_Start</a> from sp_dma.o(.text.DMA_Start) referenced from sp_dma.o(.rodata.spDMA)
 <LI><a href="#[3f]">DebugMon_Handler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[7f]">ETH_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[80]">ETH_WKUP_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[48]">EXTI0_IRQHandler</a> from sp_irq.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[6a]">EXTI15_10_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[49]">EXTI1_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[4a]">EXTI2_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[4b]">EXTI3_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[4c]">EXTI4_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[59]">EXTI9_5_IRQHandler</a> from sp_irq.o(.text.EXTI9_5_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[a3]">EXTI_ClearITPendingBit</a> from stm32f4xx_exti.o(i.EXTI_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.EXTI0_IRQHandler)
 <LI><a href="#[a3]">EXTI_ClearITPendingBit</a> from stm32f4xx_exti.o(i.EXTI_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.EXTI9_5_IRQHandler)
 <LI><a href="#[a2]">EXTI_GetITStatus</a> from stm32f4xx_exti.o(i.EXTI_GetITStatus) referenced 2 times from sp_irq.o(.text.EXTI0_IRQHandler)
 <LI><a href="#[a2]">EXTI_GetITStatus</a> from stm32f4xx_exti.o(i.EXTI_GetITStatus) referenced 2 times from sp_irq.o(.text.EXTI9_5_IRQHandler)
 <LI><a href="#[46]">FLASH_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[72]">FMC_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[93]">FPU_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[16]">GIMBAL_CRUISE_PID_Init</a> from gimbal.o(.text.GIMBAL_CRUISE_PID_Init) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[c]">GIMBAL_ControlInit</a> from gimbal.o(.text.GIMBAL_ControlInit) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[d]">GIMBAL_ControlLooper</a> from gimbal.o(.text.GIMBAL_ControlLooper) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[e]">GIMBAL_MiddleLooper</a> from gimbal.o(.text.GIMBAL_MiddleLooper) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[15]">GIMBAL_PID_Init</a> from gimbal.o(.text.GIMBAL_PID_Init) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[f]">GIMBAL_State</a> from gimbal.o(.text.GIMBAL_State) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[12]">GIMBAL_Update</a> from gimbal.o(.text.GIMBAL_Update) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[10]">GIMBAL_UpdatePitch</a> from gimbal.o(.text.GIMBAL_UpdatePitch) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[11]">GIMBAL_UpdateYaw</a> from gimbal.o(.text.GIMBAL_UpdateYaw) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[13]">GIMBAL_Update_Limit</a> from gimbal.o(.text.GIMBAL_Update_Limit) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[14]">GIMBAL_Update_enemy_Location</a> from gimbal.o(.text.GIMBAL_Update_enemy_Location) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[1a]">GIMBAL_VISUAL_LP_PID_Init</a> from gimbal.o(.text.GIMBAL_VISUAL_LP_PID_Init) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[19]">GIMBAL_VISUAL_LY_PID_Init</a> from gimbal.o(.text.GIMBAL_VISUAL_LY_PID_Init) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[18]">GIMBAL_VISUAL_SP_PID_Init</a> from gimbal.o(.text.GIMBAL_VISUAL_SP_PID_Init) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[17]">GIMBAL_VISUAL_SY_PID_Init</a> from gimbal.o(.text.GIMBAL_VISUAL_SY_PID_Init) referenced 2 times from gimbal.o(.data.spGIMBAL_Controller)
 <LI><a href="#[c0]">GPIO_AF_Config</a> from sp_gpio.o(.text.GPIO_AF_Config) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[c1]">GPIO_AN_Config</a> from sp_gpio.o(.text.GPIO_AN_Config) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[c2]">GPIO_ChangeOutput</a> from sp_gpio.o(.text.GPIO_ChangeOutput) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[bd]">GPIO_Config</a> from sp_gpio.o(.text.GPIO_Config) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[bf]">GPIO_IN_Config</a> from sp_gpio.o(.text.GPIO_IN_Config) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[be]">GPIO_OUT_Config</a> from sp_gpio.o(.text.GPIO_OUT_Config) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[c5]">GPIO_ReadInputDataBit</a> from stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[c4]">GPIO_ReadOutputDataBit</a> from stm32f4xx_gpio.o(i.GPIO_ReadOutputDataBit) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[c6]">GPIO_SetMode</a> from sp_gpio.o(.text.GPIO_SetMode) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[c3]">GPIO_ToggleBits</a> from stm32f4xx_gpio.o(i.GPIO_ToggleBits) referenced from sp_gpio.o(.rodata.spGPIO)
 <LI><a href="#[92]">HASH_RNG_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[3a]">HardFault_Handler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[62]">I2C1_ER_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[61]">I2C1_EV_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[64]">I2C2_ER_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[63]">I2C2_EV_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[8b]">I2C3_ER_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[8a]">I2C3_EV_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[1d]">IRQ_Invoke</a> from sp_irq.o(.text.IRQ_Invoke) referenced 2 times from sp_irq.o(.data.spIRQ)
 <LI><a href="#[1b]">IRQ_ManagerInit</a> from sp_irq.o(.text.IRQ_ManagerInit) referenced 2 times from sp_irq.o(.data.spIRQ)
 <LI><a href="#[1c]">IRQ_Regeiste</a> from sp_irq.o(.text.IRQ_Regeiste) referenced 2 times from sp_irq.o(.data.spIRQ)
 <LI><a href="#[1e]">MOTOR_ControlInit</a> from sp_motor.o(.text.MOTOR_ControlInit) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[1f]">MOTOR_ControlLooper</a> from sp_motor.o(.text.MOTOR_ControlLooper) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[29]">MOTOR_RM_GetInstance</a> from sp_motor.o(.text.MOTOR_RM_GetInstance) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[31]">MOTOR_SetDataResolve</a> from sp_motor.o(.text.MOTOR_SetDataResolve) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[3b]">MemManage_Handler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[a5]">Msg_Recv</a> from sp_sentry.o(.text.Msg_Recv) referenced 2 times from sp_sentry.o(.text.Sentry_Init)
 <LI><a href="#[39]">NMI_Handler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[85]">OTG_FS_IRQHandler</a> from usb_bsp.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[6c]">OTG_FS_WKUP_IRQHandler</a> from usb_bsp.o(.text.OTG_FS_WKUP_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[8d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[8c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[8f]">OTG_HS_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[8e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[43]">PVD_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[40]">PendSV_Handler</a> from sp_task.o(.text.PendSV_Handler) referenced 2 times from sp_task.o(.text.TASK_TimerInit)
 <LI><a href="#[40]">PendSV_Handler</a> from sp_task.o(.text.PendSV_Handler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[47]">RCC_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[a4]">RC_OnBusIdle</a> from sp_rc.o(.text.RC_OnBusIdle) referenced 2 times from sp_rc.o(.text.RC_ReceiverInit)
 <LI><a href="#[6b]">RTC_Alarm_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[45]">RTC_WKUP_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[38]">Reset_Handler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[99]">SAI1_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[73]">SDIO_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[65]">SPI1_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[66]">SPI2_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[75]">SPI3_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[96]">SPI4_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[97]">SPI5_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[98]">SPI6_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[3e]">SVC_Handler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[36]">Sentry_GetMsgAddr</a> from sp_sentry.o(.text.Sentry_GetMsgAddr) referenced 2 times from sp_sentry.o(.data.spSENTRY)
 <LI><a href="#[37]">Sentry_GetMsgRegister</a> from sp_sentry.o(.text.Sentry_GetMsgRegister) referenced 2 times from sp_sentry.o(.data.spSENTRY)
 <LI><a href="#[34]">Sentry_GetRobotmode</a> from sp_sentry.o(.text.Sentry_GetRobotmode) referenced 2 times from sp_sentry.o(.data.spSENTRY)
 <LI><a href="#[32]">Sentry_Init</a> from sp_sentry.o(.text.Sentry_Init) referenced 2 times from sp_sentry.o(.data.spSENTRY)
 <LI><a href="#[33]">Sentry_Looper</a> from sp_sentry.o(.text.Sentry_Looper) referenced 2 times from sp_sentry.o(.data.spSENTRY)
 <LI><a href="#[35]">Sentry_Send</a> from sp_sentry.o(.text.Sentry_Send) referenced 2 times from sp_sentry.o(.data.spSENTRY)
 <LI><a href="#[41]">SysTick_Handler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[9b]">SystemInit</a> from system_stm32f427ii.o(.text.SystemInit) referenced from startup_stm32f427ii.o(.text)
 <LI><a href="#[44]">TAMP_STAMP_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[5a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[5d]">TIM1_CC_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[5c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from sp_irq.o(.text.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[5b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[5e]">TIM2_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[5f]">TIM3_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[60]">TIM4_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[74]">TIM5_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[78]">TIM6_DAC_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[79]">TIM7_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[6d]">TIM8_BRK_TIM12_IRQHandler</a> from sp_irq.o(.text.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[70]">TIM8_CC_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[6f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from sp_irq.o(.text.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[6e]">TIM8_UP_TIM13_IRQHandler</a> from sp_irq.o(.text.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[a8]">TIM_ClearITPendingBit</a> from stm32f4xx_tim.o(i.TIM_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.TIM1_TRG_COM_TIM11_IRQHandler)
 <LI><a href="#[a8]">TIM_ClearITPendingBit</a> from stm32f4xx_tim.o(i.TIM_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.TIM8_BRK_TIM12_IRQHandler)
 <LI><a href="#[a8]">TIM_ClearITPendingBit</a> from stm32f4xx_tim.o(i.TIM_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.TIM8_TRG_COM_TIM14_IRQHandler)
 <LI><a href="#[a8]">TIM_ClearITPendingBit</a> from stm32f4xx_tim.o(i.TIM_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.TIM8_UP_TIM13_IRQHandler)
 <LI><a href="#[ca]">TIM_GetDuty</a> from sp_timer.o(.text.TIM_GetDuty) referenced from sp_timer.o(.rodata.spTIMER)
 <LI><a href="#[a7]">TIM_GetITStatus</a> from stm32f4xx_tim.o(i.TIM_GetITStatus) referenced 2 times from sp_irq.o(.text.TIM1_TRG_COM_TIM11_IRQHandler)
 <LI><a href="#[a7]">TIM_GetITStatus</a> from stm32f4xx_tim.o(i.TIM_GetITStatus) referenced 2 times from sp_irq.o(.text.TIM8_BRK_TIM12_IRQHandler)
 <LI><a href="#[a7]">TIM_GetITStatus</a> from stm32f4xx_tim.o(i.TIM_GetITStatus) referenced 2 times from sp_irq.o(.text.TIM8_TRG_COM_TIM14_IRQHandler)
 <LI><a href="#[a7]">TIM_GetITStatus</a> from stm32f4xx_tim.o(i.TIM_GetITStatus) referenced 2 times from sp_irq.o(.text.TIM8_UP_TIM13_IRQHandler)
 <LI><a href="#[c7]">TIM_Init</a> from sp_timer.o(.text.TIM_Init) referenced from sp_timer.o(.rodata.spTIMER)
 <LI><a href="#[c8]">TIM_PWM_OutputInit</a> from sp_timer.o(.text.TIM_PWM_OutputInit) referenced from sp_timer.o(.rodata.spTIMER)
 <LI><a href="#[c9]">TIM_SetDuty</a> from sp_timer.o(.text.TIM_SetDuty) referenced from sp_timer.o(.rodata.spTIMER)
 <LI><a href="#[cb]">TIM_SetFrequency</a> from sp_timer.o(.text.TIM_SetFrequency) referenced from sp_timer.o(.rodata.spTIMER)
 <LI><a href="#[76]">UART4_IRQHandler</a> from sp_irq.o(.text.UART4_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[77]">UART5_IRQHandler</a> from sp_irq.o(.text.UART5_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[94]">UART7_IRQHandler</a> from sp_irq.o(.text.UART7_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[95]">UART8_IRQHandler</a> from sp_irq.o(.text.UART8_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[67]">USART1_IRQHandler</a> from sp_irq.o(.text.USART1_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[68]">USART2_IRQHandler</a> from sp_irq.o(.text.USART2_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[69]">USART3_IRQHandler</a> from sp_irq.o(.text.USART3_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[89]">USART6_IRQHandler</a> from sp_irq.o(.text.USART6_IRQHandler) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[aa]">USART_ClearITPendingBit</a> from stm32f4xx_usart.o(i.USART_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.UART4_IRQHandler)
 <LI><a href="#[aa]">USART_ClearITPendingBit</a> from stm32f4xx_usart.o(i.USART_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.UART5_IRQHandler)
 <LI><a href="#[aa]">USART_ClearITPendingBit</a> from stm32f4xx_usart.o(i.USART_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.UART7_IRQHandler)
 <LI><a href="#[aa]">USART_ClearITPendingBit</a> from stm32f4xx_usart.o(i.USART_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.UART8_IRQHandler)
 <LI><a href="#[aa]">USART_ClearITPendingBit</a> from stm32f4xx_usart.o(i.USART_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.USART1_IRQHandler)
 <LI><a href="#[aa]">USART_ClearITPendingBit</a> from stm32f4xx_usart.o(i.USART_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.USART2_IRQHandler)
 <LI><a href="#[aa]">USART_ClearITPendingBit</a> from stm32f4xx_usart.o(i.USART_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.USART3_IRQHandler)
 <LI><a href="#[aa]">USART_ClearITPendingBit</a> from stm32f4xx_usart.o(i.USART_ClearITPendingBit) referenced 2 times from sp_irq.o(.text.USART6_IRQHandler)
 <LI><a href="#[a9]">USART_GetITStatus</a> from stm32f4xx_usart.o(i.USART_GetITStatus) referenced 2 times from sp_irq.o(.text.UART4_IRQHandler)
 <LI><a href="#[a9]">USART_GetITStatus</a> from stm32f4xx_usart.o(i.USART_GetITStatus) referenced 2 times from sp_irq.o(.text.UART5_IRQHandler)
 <LI><a href="#[a9]">USART_GetITStatus</a> from stm32f4xx_usart.o(i.USART_GetITStatus) referenced 2 times from sp_irq.o(.text.UART7_IRQHandler)
 <LI><a href="#[a9]">USART_GetITStatus</a> from stm32f4xx_usart.o(i.USART_GetITStatus) referenced 2 times from sp_irq.o(.text.UART8_IRQHandler)
 <LI><a href="#[a9]">USART_GetITStatus</a> from stm32f4xx_usart.o(i.USART_GetITStatus) referenced 2 times from sp_irq.o(.text.USART1_IRQHandler)
 <LI><a href="#[a9]">USART_GetITStatus</a> from stm32f4xx_usart.o(i.USART_GetITStatus) referenced 2 times from sp_irq.o(.text.USART2_IRQHandler)
 <LI><a href="#[a9]">USART_GetITStatus</a> from stm32f4xx_usart.o(i.USART_GetITStatus) referenced 2 times from sp_irq.o(.text.USART3_IRQHandler)
 <LI><a href="#[a9]">USART_GetITStatus</a> from stm32f4xx_usart.o(i.USART_GetITStatus) referenced 2 times from sp_irq.o(.text.USART6_IRQHandler)
 <LI><a href="#[1]">USBD_DataInStage</a> from usbd_core.o(i.USBD_DataInStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[0]">USBD_DataOutStage</a> from usbd_core.o(i.USBD_DataOutStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[7]">USBD_IsoINIncomplete</a> from usbd_core.o(i.USBD_IsoINIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[8]">USBD_IsoOUTIncomplete</a> from usbd_core.o(i.USBD_IsoOUTIncomplete) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[4]">USBD_Reset</a> from usbd_core.o(i.USBD_Reset) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[6]">USBD_Resume</a> from usbd_core.o(i.USBD_Resume) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[3]">USBD_SOF</a> from usbd_core.o(i.USBD_SOF) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[2]">USBD_SetupStage</a> from usbd_core.o(i.USBD_SetupStage) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[5]">USBD_Suspend</a> from usbd_core.o(i.USBD_Suspend) referenced 2 times from usbd_core.o(.data)
 <LI><a href="#[9f]">USB_Cb</a> from auto_aim.o(.text.USB_Cb) referenced 2 times from auto_aim.o(.text.Autoaim_Init)
 <LI><a href="#[3d]">UsageFault_Handler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[42]">WWDG_IRQHandler</a> from startup_stm32f427ii.o(.text) referenced from startup_stm32f427ii.o(RESET)
 <LI><a href="#[b5]">__CAN_SendMsg</a> from sp_can.o(.text.__CAN_SendMsg) referenced from sp_can.o(.rodata.spCAN)
 <LI><a href="#[28]">__CHASIS_GetStopSatus</a> from sp_motor.o(.text.__CHASIS_GetStopSatus) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[27]">__CHASIS_Start</a> from sp_motor.o(.text.__CHASIS_Start) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[26]">__CHASIS_Stop</a> from sp_motor.o(.text.__CHASIS_Stop) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[ae]">__MOTOR_DataResolve_GM3510</a> from sp_motor.o(.text.__MOTOR_DataResolve_GM3510) referenced 2 times from sp_motor.o(.text.__MOTOR_MountCAN)
 <LI><a href="#[ac]">__MOTOR_DataResolve_RM2006</a> from sp_motor.o(.text.__MOTOR_DataResolve_RM2006) referenced 2 times from sp_motor.o(.text.__MOTOR_MountCAN)
 <LI><a href="#[ab]">__MOTOR_DataResolve_RM3510_3508</a> from sp_motor.o(.text.__MOTOR_DataResolve_RM3510_3508) referenced 2 times from sp_motor.o(.text.__MOTOR_MountCAN)
 <LI><a href="#[ad]">__MOTOR_DataResolve_RM6xxx</a> from sp_motor.o(.text.__MOTOR_DataResolve_RM6xxx) referenced 2 times from sp_motor.o(.text.__MOTOR_MountCAN)
 <LI><a href="#[2b]">__MOTOR_Destroy</a> from sp_motor.o(.text.__MOTOR_Destroy) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[2a]">__MOTOR_Init</a> from sp_motor.o(.text.__MOTOR_Init) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[2e]">__MOTOR_SetOutputLimit</a> from sp_motor.o(.text.__MOTOR_SetOutputLimit) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[30]">__MOTOR_SetPositionPID</a> from sp_motor.o(.text.__MOTOR_SetPositionPID) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[2f]">__MOTOR_SetSpeedPID</a> from sp_motor.o(.text.__MOTOR_SetSpeedPID) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[2c]">__MOTOR_SetTarget</a> from sp_motor.o(.text.__MOTOR_SetTarget) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[2d]">__MOTOR_SetTargetDelta</a> from sp_motor.o(.text.__MOTOR_SetTargetDelta) referenced 2 times from sp_motor.o(.data.spMOTOR)
 <LI><a href="#[9c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f427ii.o(.text)
 <LI><a href="#[9e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[9d]">fputc</a> from sp_usart.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[b0]">spCAN_Init</a> from sp_can.o(.text.spCAN_Init) referenced from sp_can.o(.rodata.spCAN)
 <LI><a href="#[b1]">spCAN_MsgSendLoop</a> from sp_can.o(.text.spCAN_MsgSendLoop) referenced from sp_can.o(.rodata.spCAN)
 <LI><a href="#[a6]">spClockHandler</a> from sp_task.o(.text.spClockHandler) referenced 2 times from sp_task.o(.text.TASK_TimerInit)
 <LI><a href="#[af]">update_from_dma</a> from referee.o(.text.update_from_dma) referenced 2 times from referee.o(.text.referee_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ce]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1fe]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ff]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[200]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[201]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[202]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cf]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d1]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[203]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[de]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[d5]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[204]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[205]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[206]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[207]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[208]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[209]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[210]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[211]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[212]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[213]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[214]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[215]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[216]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[217]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[e3]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[218]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[219]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[21a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[21b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[21c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[21d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[21e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[cd]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[21f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[db]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[dd]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[220]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[df]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; TASK_GlobalInit &rArr; RC_ReceiverInit &rArr; USART_RX_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[221]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[101]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e2]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[222]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[e4]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[38]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427ii.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f427ii.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e6]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[e8]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ee]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d0]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__CAN_SendMsg
</UL>

<P><STRONG><a name="[eb]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[223]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_RM_GetInstance
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_ControlInit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sentry_Init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ManagerInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerInit
</UL>

<P><STRONG><a name="[224]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ed]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ef]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d2]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[e7]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[22c]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[f1]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d8]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[da]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[22e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f7]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[f5]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[f3]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[fd]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f6]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[230]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f4]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[fa]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[231]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[106]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d6]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[fe]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[fc]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[235]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[10d]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[ff]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[110]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[103]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[102]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[108]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[236]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[10a]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[238]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[107]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[114]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[115]"></a>Append_CRC16_Check_Sum</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, referee_crc.o(.text.Append_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_send_HP
</UL>

<P><STRONG><a name="[117]"></a>Append_CRC8_Check_Sum</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, referee_crc.o(.text.Append_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Append_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_send_HP
</UL>

<P><STRONG><a name="[119]"></a>Auto_aim</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, auto_aim.o(.text.Auto_aim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Auto_aim &rArr; unpackFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cb
</UL>

<P><STRONG><a name="[11b]"></a>Autoaim_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, auto_aim.o(.text.Autoaim_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Autoaim_Init &rArr; sendtoComputerInit &rArr; packFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoComputerInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[11e]"></a>Buzzer_Init</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, sp_utility.o(.text.Buzzer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Buzzer_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[124]"></a>CAN1_Init</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, sp_can.o(.text.CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAN1_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spCAN_Init
</UL>

<P><STRONG><a name="[56]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, sp_can.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>CAN2_Init</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, sp_can.o(.text.CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAN2_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spCAN_Init
</UL>

<P><STRONG><a name="[83]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sp_can.o(.text.CAN2_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN2_RX1_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>CAN_RegistReceiver</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, sp_can.o(.text.CAN_RegistReceiver))
<BR>[Address Reference Count : 1]<UL><LI> sp_can.o(.rodata.spCAN)
</UL>
<P><STRONG><a name="[b3]"></a>CAN_RegistTransmitter</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, sp_can.o(.text.CAN_RegistTransmitter))
<BR>[Address Reference Count : 1]<UL><LI> sp_can.o(.rodata.spCAN)
</UL>
<P><STRONG><a name="[b4]"></a>CAN_SendMsg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sp_can.o(.text.CAN_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_SendMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SubmitChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_can.o(.rodata.spCAN)
</UL>
<P><STRONG><a name="[12f]"></a>CAN_SubmitChange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sp_can.o(.text.CAN_SubmitChange))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendMsg
</UL>

<P><STRONG><a name="[21]"></a>CHASIS_AddMonitor</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sp_motor.o(.text.CHASIS_AddMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CHASIS_AddMonitor &rArr; MOTOR_RM_GetInstance &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_SetTarget
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_SetSpeedPID
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_SetPositionPID
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_MountCAN
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_RM_GetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[20]"></a>CHASIS_EnableMotor</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, sp_motor.o(.text.CHASIS_EnableMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CHASIS_EnableMotor &rArr; PID_ControllerInit &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_SetTarget
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_SetSpeedPID
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_SetPositionPID
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_MountCAN
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerInit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_RM_GetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[25]"></a>CHASIS_GetMotor</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, sp_motor.o(.text.CHASIS_GetMotor))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[9]"></a>CHASIS_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, sp_chasis.o(.text.CHASIS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = CHASIS_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetGains
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_chasis.o(.data.spCHASIS)
</UL>
<P><STRONG><a name="[135]"></a>CHASIS_Legalize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sp_chasis.o(.text.CHASIS_Legalize))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Move
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Looper
</UL>

<P><STRONG><a name="[a]"></a>CHASIS_Looper</STRONG> (Thumb, 1324 bytes, Stack size 40 bytes, sp_chasis.o(.text.CHASIS_Looper))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CHASIS_Looper &rArr; CHASIS_Move &rArr; PID_ControllerDriver &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Change_Limit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IfUsingPowerBuffer
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enemy_Location
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Empty_Location
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Move
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Legalize
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_chasis.o(.data.spCHASIS)
</UL>
<P><STRONG><a name="[b]"></a>CHASIS_Move</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, sp_chasis.o(.text.CHASIS_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CHASIS_Move &rArr; PID_ControllerDriver &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMWatt_Cal
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Legalize
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Looper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_chasis.o(.data.spCHASIS)
</UL>
<P><STRONG><a name="[23]"></a>CHASIS_SetMotorPosition</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sp_motor.o(.text.CHASIS_SetMotorPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CHASIS_SetMotorPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_SetTarget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[24]"></a>CHASIS_SetMotorRelativePosition</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sp_motor.o(.text.CHASIS_SetMotorRelativePosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CHASIS_SetMotorRelativePosition
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_SetTargetDelta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[22]"></a>CHASIS_SetMotorSpeed</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sp_motor.o(.text.CHASIS_SetMotorSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CHASIS_SetMotorSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_SetTarget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[13c]"></a>CMWatt_Cal</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, sp_chasis.o(.text.CMWatt_Cal))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Move
</UL>

<P><STRONG><a name="[7b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Stream1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Stream5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>DMA_ClearStreamFlagBit</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, sp_dma.o(.text.DMA_ClearStreamFlagBit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_dma.o(.rodata.spDMA)
</UL>
<P><STRONG><a name="[bc]"></a>DMA_CopyMem2Mem</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sp_dma.o(.text.DMA_CopyMem2Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_CopyMem2Mem &rArr; DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_dma.o(.rodata.spDMA)
</UL>
<P><STRONG><a name="[b9]"></a>DMA_GetStreamFlagBit</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, sp_dma.o(.text.DMA_GetStreamFlagBit))
<BR>[Address Reference Count : 1]<UL><LI> sp_dma.o(.rodata.spDMA)
</UL>
<P><STRONG><a name="[bb]"></a>DMA_InitNull</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, sp_dma.o(.text.DMA_InitNull))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA_InitNull &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_dma.o(.rodata.spDMA)
</UL>
<P><STRONG><a name="[ba]"></a>DMA_ResetCounter</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sp_dma.o(.text.DMA_ResetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ResetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_dma.o(.rodata.spDMA)
</UL>
<P><STRONG><a name="[b7]"></a>DMA_Restart</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sp_dma.o(.text.DMA_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearStreamFlagBit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_dma.o(.rodata.spDMA)
</UL>
<P><STRONG><a name="[b6]"></a>DMA_Start</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sp_dma.o(.text.DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearStreamFlagBit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CopyMem2Mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_dma.o(.rodata.spDMA)
</UL>
<P><STRONG><a name="[142]"></a>DMA_USART_RX_Config</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, sp_usart.o(.text.DMA_USART_RX_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA_USART_RX_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[144]"></a>DMA_USART_TX_Config</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, sp_usart.o(.text.DMA_USART_TX_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DMA_USART_TX_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[48]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sp_irq.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sp_irq.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[136]"></a>Empty_Location</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sp_chasis.o(.text.Empty_Location))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Looper
</UL>

<P><STRONG><a name="[137]"></a>Enemy_Location</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sp_chasis.o(.text.Enemy_Location))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Looper
</UL>

<P><STRONG><a name="[147]"></a>Feed_Motor_BACK</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sp_shoot.o(.text.Feed_Motor_BACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Feed_Motor_BACK
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Motor_Looper
</UL>

<P><STRONG><a name="[145]"></a>Feed_Motor_Looper</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, sp_shoot.o(.text.Feed_Motor_Looper))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Feed_Motor_Looper &rArr; Feed_Motor_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Motor_ON
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Motor_OFF
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Motor_BACK
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooting_Control_Looper
</UL>

<P><STRONG><a name="[146]"></a>Feed_Motor_OFF</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sp_shoot.o(.text.Feed_Motor_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Feed_Motor_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Motor_Looper
</UL>

<P><STRONG><a name="[148]"></a>Feed_Motor_ON</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sp_shoot.o(.text.Feed_Motor_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Feed_Motor_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Motor_Looper
</UL>

<P><STRONG><a name="[149]"></a>Friction_Init</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, sp_shoot.o(.text.Friction_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Friction_Init &rArr; PID_ControllerInit &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetGains
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooting_Control_Init
</UL>

<P><STRONG><a name="[174]"></a>Friction_Looper</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, sp_shoot.o(.text.Friction_Looper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Friction_Looper
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooting_Control_Looper
</UL>

<P><STRONG><a name="[16]"></a>GIMBAL_CRUISE_PID_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gimbal.o(.text.GIMBAL_CRUISE_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIMBAL_CRUISE_PID_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[c]"></a>GIMBAL_ControlInit</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, gimbal.o(.text.GIMBAL_ControlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GIMBAL_ControlInit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetGains
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[d]"></a>GIMBAL_ControlLooper</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gimbal.o(.text.GIMBAL_ControlLooper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIMBAL_ControlLooper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[e]"></a>GIMBAL_MiddleLooper</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, gimbal.o(.text.GIMBAL_MiddleLooper))
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[15]"></a>GIMBAL_PID_Init</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, gimbal.o(.text.GIMBAL_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GIMBAL_PID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetGains
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[f]"></a>GIMBAL_State</STRONG> (Thumb, 2556 bytes, Stack size 48 bytes, gimbal.o(.text.GIMBAL_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GIMBAL_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[12]"></a>GIMBAL_Update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gimbal.o(.text.GIMBAL_Update))
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[10]"></a>GIMBAL_UpdatePitch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gimbal.o(.text.GIMBAL_UpdatePitch))
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[11]"></a>GIMBAL_UpdateYaw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gimbal.o(.text.GIMBAL_UpdateYaw))
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[13]"></a>GIMBAL_Update_Limit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, gimbal.o(.text.GIMBAL_Update_Limit))
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[14]"></a>GIMBAL_Update_enemy_Location</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, gimbal.o(.text.GIMBAL_Update_enemy_Location))
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[1a]"></a>GIMBAL_VISUAL_LP_PID_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gimbal.o(.text.GIMBAL_VISUAL_LP_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIMBAL_VISUAL_LP_PID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetGains
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[19]"></a>GIMBAL_VISUAL_LY_PID_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gimbal.o(.text.GIMBAL_VISUAL_LY_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIMBAL_VISUAL_LY_PID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetGains
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[18]"></a>GIMBAL_VISUAL_SP_PID_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gimbal.o(.text.GIMBAL_VISUAL_SP_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIMBAL_VISUAL_SP_PID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetGains
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[17]"></a>GIMBAL_VISUAL_SY_PID_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gimbal.o(.text.GIMBAL_VISUAL_SY_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIMBAL_VISUAL_SY_PID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetGains
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.data.spGIMBAL_Controller)
</UL>
<P><STRONG><a name="[c0]"></a>GPIO_AF_Config</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sp_gpio.o(.text.GPIO_AF_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_AF_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RCC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[c1]"></a>GPIO_AN_Config</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sp_gpio.o(.text.GPIO_AN_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_AN_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RCC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[c2]"></a>GPIO_ChangeOutput</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sp_gpio.o(.text.GPIO_ChangeOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ChangeOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[bd]"></a>GPIO_Config</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, sp_gpio.o(.text.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RCC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[bf]"></a>GPIO_IN_Config</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sp_gpio.o(.text.GPIO_IN_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_IN_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RCC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[be]"></a>GPIO_OUT_Config</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sp_gpio.o(.text.GPIO_OUT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_OUT_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RCC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[14a]"></a>GPIO_RCC</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, sp_gpio.o(.text.GPIO_RCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_RCC
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IN_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AN_Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_Config
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_SetMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sp_gpio.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[116]"></a>Get_CRC16_Check_Sum</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, referee_crc.o(.text.Get_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>

<P><STRONG><a name="[118]"></a>Get_CRC8_Check_Sum</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, referee_crc.o(.text.Get_CRC8_Check_Sum))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
</UL>

<P><STRONG><a name="[1d]"></a>IRQ_Invoke</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sp_irq.o(.text.IRQ_Invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ_Invoke
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_irq.o(.data.spIRQ)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ_ManagerInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sp_irq.o(.text.IRQ_ManagerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IRQ_ManagerInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_irq.o(.data.spIRQ)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ_Regeiste</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sp_irq.o(.text.IRQ_Regeiste))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ_Regeiste
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_irq.o(.data.spIRQ)
</UL>
<P><STRONG><a name="[138]"></a>IfUsingPowerBuffer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sp_chasis.o(.text.IfUsingPowerBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Looper
</UL>

<P><STRONG><a name="[14d]"></a>Led8_Configuration</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sp_utility.o(.text.Led8_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Led8_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[14e]"></a>Led_Configuration</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sp_utility.o(.text.Led_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Led_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[1e]"></a>MOTOR_ControlInit</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, sp_motor.o(.text.MOTOR_ControlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MOTOR_ControlInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[1f]"></a>MOTOR_ControlLooper</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, sp_motor.o(.text.MOTOR_ControlLooper))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MOTOR_ControlLooper &rArr; PID_ControllerDriver &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_OutputLimit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadzone_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[29]"></a>MOTOR_RM_GetInstance</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sp_motor.o(.text.MOTOR_RM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MOTOR_RM_GetInstance &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__MOTOR_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_EnableMotor
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_AddMonitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[31]"></a>MOTOR_SetDataResolve</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sp_motor.o(.text.MOTOR_SetDataResolve))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[152]"></a>MsgReg_Read</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sp_sentry.o(.text.MsgReg_Read))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Recv
</UL>

<P><STRONG><a name="[153]"></a>MsgReg_Write</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sp_sentry.o(.text.MsgReg_Write))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Recv
</UL>

<P><STRONG><a name="[a5]"></a>Msg_Recv</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sp_sentry.o(.text.Msg_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Msg_Recv
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetSecond
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgReg_Write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgReg_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_sentry.o(.text.Sentry_Init)
</UL>
<P><STRONG><a name="[154]"></a>NVIC_IRQEnable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sp_utility.o(.text.NVIC_IRQEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_IRQEnable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Enable
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TimerInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Start
</UL>

<P><STRONG><a name="[85]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_bsp.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_bsp.o(.text.OTG_FS_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OTG_FS_WKUP_IRQHandler &rArr; SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_UngateClock
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>PID_ControllerDriver</STRONG> (Thumb, 652 bytes, Stack size 80 bytes, sp_pid.o(.text.PID_ControllerDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PID_ControllerDriver &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetSecond
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetTarget
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Move
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_ControlLooper
</UL>

<P><STRONG><a name="[131]"></a>PID_ControllerInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sp_pid.o(.text.PID_ControllerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PID_ControllerInit &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_EnableMotor
</UL>

<P><STRONG><a name="[133]"></a>PID_SetGains</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sp_pid.o(.text.PID_SetGains))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_VISUAL_SY_PID_Init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_VISUAL_SP_PID_Init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_VISUAL_LY_PID_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_VISUAL_LP_PID_Init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_PID_Init
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_ControlInit
</UL>

<P><STRONG><a name="[158]"></a>PID_SetTarget</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sp_pid.o(.text.PID_SetTarget))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
</UL>

<P><STRONG><a name="[40]"></a>PendSV_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sp_task.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PendSV_Handler &rArr; TASK_Backend &rArr; TASK_ControlLooper &rArr; sendtoComputer &rArr; USB_SendData &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Backend
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sp_task.o(.text.TASK_TimerInit)
<LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>Power_Configuration</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sp_utility.o(.text.Power_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Power_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>RC_GetState</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sp_rc.o(.text.RC_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RC_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RC_DataClear
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ControlLooper
</UL>

<P><STRONG><a name="[a4]"></a>RC_OnBusIdle</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sp_rc.o(.text.RC_OnBusIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC_OnBusIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetSecond
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RC_DataConvert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_rc.o(.text.RC_ReceiverInit)
</UL>
<P><STRONG><a name="[165]"></a>RC_OnError</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sp_rc.o(.text.RC_OnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC_OnError
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverChecker
</UL>

<P><STRONG><a name="[166]"></a>RC_OnRecovery</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sp_rc.o(.text.RC_OnRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC_OnRecovery
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverChecker
</UL>

<P><STRONG><a name="[167]"></a>RC_ReceiverChecker</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sp_rc.o(.text.RC_ReceiverChecker))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RC_ReceiverChecker &rArr; RC_OnRecovery
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetSecond
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_OnRecovery
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_OnError
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Backend
</UL>

<P><STRONG><a name="[168]"></a>RC_ReceiverInit</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, sp_rc.o(.text.RC_ReceiverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = RC_ReceiverInit &rArr; USART_RX_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetSecond
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_RX_Config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RC_DataClear
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[17b]"></a>RC_isValid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sp_rc.o(.text.RC_isValid))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ControlLooper
</UL>

<P><STRONG><a name="[16d]"></a>RNG_Get_RandomNum</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sp_rng.o(.text.RNG_Get_RandomNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RNG_Get_RandomNum
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNumber
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
</UL>

<P><STRONG><a name="[134]"></a>RNG_Get_RandomRange</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sp_rng.o(.text.RNG_Get_RandomRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RNG_Get_RandomRange &rArr; RNG_Get_RandomNum
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Looper
</UL>

<P><STRONG><a name="[170]"></a>SP_WatchDog_FeedDog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sp_watchdog.o(.text.SP_WatchDog_FeedDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SP_WatchDog_FeedDog
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ControlLooper
</UL>

<P><STRONG><a name="[36]"></a>Sentry_GetMsgAddr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sp_sentry.o(.text.Sentry_GetMsgAddr))
<BR>[Address Reference Count : 1]<UL><LI> sp_sentry.o(.data.spSENTRY)
</UL>
<P><STRONG><a name="[37]"></a>Sentry_GetMsgRegister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sp_sentry.o(.text.Sentry_GetMsgRegister))
<BR>[Address Reference Count : 1]<UL><LI> sp_sentry.o(.data.spSENTRY)
</UL>
<P><STRONG><a name="[34]"></a>Sentry_GetRobotmode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sp_sentry.o(.text.Sentry_GetRobotmode))
<BR>[Address Reference Count : 1]<UL><LI> sp_sentry.o(.data.spSENTRY)
</UL>
<P><STRONG><a name="[32]"></a>Sentry_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, sp_sentry.o(.text.Sentry_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sentry_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_sentry.o(.data.spSENTRY)
</UL>
<P><STRONG><a name="[33]"></a>Sentry_Looper</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, sp_sentry.o(.text.Sentry_Looper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sentry_Looper
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetSecond
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_sentry.o(.data.spSENTRY)
</UL>
<P><STRONG><a name="[35]"></a>Sentry_Send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sp_sentry.o(.text.Sentry_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sentry_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_sentry.o(.data.spSENTRY)
</UL>
<P><STRONG><a name="[172]"></a>Shooting_Control_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sp_shoot.o(.text.Shooting_Control_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Shooting_Control_Init &rArr; Friction_Init &rArr; PID_ControllerInit &rArr; __aeabi_memclr8
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[173]"></a>Shooting_Control_Looper</STRONG> (Thumb, 686 bytes, Stack size 24 bytes, sp_shoot.o(.text.Shooting_Control_Looper))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Shooting_Control_Looper &rArr; Feed_Motor_Looper &rArr; Feed_Motor_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Looper
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_Motor_Looper
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ControlLooper
</UL>

<P><STRONG><a name="[13a]"></a>Speed_Change_Limit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sp_chasis.o(.text.Speed_Change_Limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Speed_Change_Limit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Looper
</UL>

<P><STRONG><a name="[9b]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32f427ii.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(.text)
</UL>
<P><STRONG><a name="[160]"></a>TASK_Backend</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sp_task.o(.text.TASK_Backend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TASK_Backend &rArr; TASK_ControlLooper &rArr; sendtoComputer &rArr; USB_SendData &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Enable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ControlLooper
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverChecker
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetMilliSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[177]"></a>TASK_ControlLooper</STRONG> (Thumb, 528 bytes, Stack size 24 bytes, sp_task.o(.text.TASK_ControlLooper))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TASK_ControlLooper &rArr; sendtoComputer &rArr; USB_SendData &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoComputer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_send_HP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooting_Control_Looper
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP_WatchDog_FeedDog
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_isValid
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_GetState
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetMilliSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Backend
</UL>

<P><STRONG><a name="[178]"></a>TASK_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sp_task.o(.text.TASK_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TASK_Enable &rArr; NVIC_IRQEnable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_IRQEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Backend
</UL>

<P><STRONG><a name="[176]"></a>TASK_GetMilliSecond</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sp_task.o(.text.TASK_GetMilliSecond))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ControlLooper
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Backend
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>TASK_GetSecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sp_task.o(.text.TASK_GetSecond))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverChecker
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_OnBusIdle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sentry_Looper
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Recv
</UL>

<P><STRONG><a name="[17c]"></a>TASK_GlobalInit</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, sp_task.o(.text.TASK_GlobalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = TASK_GlobalInit &rArr; RC_ReceiverInit &rArr; USART_RX_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shooting_Control_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Configuration
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led8_Configuration
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_TX_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_RX_Config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Autoaim_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>TASK_Start</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sp_task.o(.text.TASK_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TASK_Start &rArr; NVIC_IRQEnable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_IRQEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>TASK_TimerInit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, sp_task.o(.text.TASK_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TASK_TimerInit &rArr; NVIC_IRQEnable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_IRQEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.TIM1_TRG_COM_TIM11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_TRG_COM_TIM11_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM8_UP_TIM13_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>TIM_GetDuty</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sp_timer.o(.text.TIM_GetDuty))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_timer.o(.rodata.spTIMER)
</UL>
<P><STRONG><a name="[c7]"></a>TIM_Init</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, sp_timer.o(.text.TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_timer.o(.rodata.spTIMER)
</UL>
<P><STRONG><a name="[c8]"></a>TIM_PWM_OutputInit</STRONG> (Thumb, 446 bytes, Stack size 72 bytes, sp_timer.o(.text.TIM_PWM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM_PWM_OutputInit &rArr; TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetDuty
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_timer.o(.rodata.spTIMER)
</UL>
<P><STRONG><a name="[c9]"></a>TIM_SetDuty</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, sp_timer.o(.text.TIM_SetDuty))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetFrequency
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_timer.o(.rodata.spTIMER)
</UL>
<P><STRONG><a name="[cb]"></a>TIM_SetFrequency</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, sp_timer.o(.text.TIM_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_SetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetDuty
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetDuty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_timer.o(.rodata.spTIMER)
</UL>
<P><STRONG><a name="[76]"></a>UART4_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>UART5_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>UART7_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>UART8_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART8_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USART1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>USART2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USART3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>USART6_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sp_irq.o(.text.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427ii.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>USART_RX_Config</STRONG> (Thumb, 518 bytes, Stack size 48 bytes, sp_usart.o(.text.USART_RX_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USART_RX_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[18e]"></a>USART_SetBaudrate</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sp_usart.o(.text.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_SetBaudrate &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
</UL>

<P><STRONG><a name="[17d]"></a>USART_TX_Config</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, sp_usart.o(.text.USART_TX_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USART_TX_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[190]"></a>USBD_HID_SendReport</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_hid_core.o(.text.USBD_HID_SendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
</UL>

<P><STRONG><a name="[9f]"></a>USB_Cb</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, auto_aim.o(.text.USB_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Cb &rArr; Auto_aim &rArr; unpackFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_aim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auto_aim.o(.text.Autoaim_Init)
</UL>
<P><STRONG><a name="[1e7]"></a>USB_OTG_BSP_uDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(.text.USB_OTG_BSP_uDelay))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>

<P><STRONG><a name="[11c]"></a>USB_RegisteCallback</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usb.o(.text.USB_RegisteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Autoaim_Init
</UL>

<P><STRONG><a name="[192]"></a>USB_SendData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb.o(.text.USB_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_SendData &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoComputer
</UL>

<P><STRONG><a name="[193]"></a>Verify_CRC16_Check_Sum</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, referee_crc.o(.text.Verify_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vrerify_frame
</UL>

<P><STRONG><a name="[194]"></a>Verify_CRC8_Check_Sum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, referee_crc.o(.text.Verify_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Verify_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vrerify_frame
</UL>

<P><STRONG><a name="[28]"></a>__CHASIS_GetStopSatus</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sp_motor.o(.text.__CHASIS_GetStopSatus))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[27]"></a>__CHASIS_Start</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sp_motor.o(.text.__CHASIS_Start))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[26]"></a>__CHASIS_Stop</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, sp_motor.o(.text.__CHASIS_Stop))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[ae]"></a>__MOTOR_DataResolve_GM3510</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_DataResolve_GM3510))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.text.__MOTOR_MountCAN)
</UL>
<P><STRONG><a name="[ac]"></a>__MOTOR_DataResolve_RM2006</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, sp_motor.o(.text.__MOTOR_DataResolve_RM2006))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __MOTOR_DataResolve_RM2006
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.text.__MOTOR_MountCAN)
</UL>
<P><STRONG><a name="[ab]"></a>__MOTOR_DataResolve_RM3510_3508</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_DataResolve_RM3510_3508))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.text.__MOTOR_MountCAN)
</UL>
<P><STRONG><a name="[ad]"></a>__MOTOR_DataResolve_RM6xxx</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_DataResolve_RM6xxx))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.text.__MOTOR_MountCAN)
</UL>
<P><STRONG><a name="[2b]"></a>__MOTOR_Destroy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_Destroy))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[2a]"></a>__MOTOR_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_Init))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_RM_GetInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[130]"></a>__MOTOR_MountCAN</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, sp_motor.o(.text.__MOTOR_MountCAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __MOTOR_MountCAN
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_EnableMotor
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_AddMonitor
</UL>

<P><STRONG><a name="[14f]"></a>__MOTOR_OutputLimit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_OutputLimit))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_ControlLooper
</UL>

<P><STRONG><a name="[2e]"></a>__MOTOR_SetOutputLimit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_SetOutputLimit))
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[30]"></a>__MOTOR_SetPositionPID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_SetPositionPID))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_EnableMotor
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_AddMonitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[2f]"></a>__MOTOR_SetSpeedPID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_SetSpeedPID))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_EnableMotor
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_AddMonitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[2c]"></a>__MOTOR_SetTarget</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_SetTarget))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_SetMotorSpeed
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_SetMotorPosition
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_EnableMotor
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_AddMonitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[2d]"></a>__MOTOR_SetTargetDelta</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sp_motor.o(.text.__MOTOR_SetTargetDelta))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_SetMotorRelativePosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_motor.o(.data.spMOTOR)
</UL>
<P><STRONG><a name="[163]"></a>__RC_DataClear</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sp_rc.o(.text.__RC_DataClear))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_GetState
</UL>

<P><STRONG><a name="[164]"></a>__RC_DataConvert</STRONG> (Thumb, 552 bytes, Stack size 0 bytes, sp_rc.o(.text.__RC_DataConvert))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_OnBusIdle
</UL>

<P><STRONG><a name="[1b0]"></a>_bytes2u16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, referee_crc.o(.text._bytes2u16))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vrerify_frame
</UL>

<P><STRONG><a name="[100]"></a>_sys_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sp_usart.o(.text._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[e5]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sp_usart.o(.text._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[10b]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sp_usart.o(.text._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[109]"></a>_sys_istty</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sp_usart.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[fb]"></a>_sys_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sp_usart.o(.text._sys_open))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[10e]"></a>_sys_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sp_usart.o(.text._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[10f]"></a>_sys_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sp_usart.o(.text._sys_write))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[113]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sp_usart.o(.text._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1a4]"></a>aerial_robot_energy_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.aerial_robot_energy_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aerial_robot_energy_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[132]"></a>assert_failed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spPortExitCritical
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spCAN_MsgSendLoop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spCAN_Init
</UL>

<P><STRONG><a name="[1af]"></a>crc8Check</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, frame.o(.text.crc8Check))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packFrame
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackFrame
</UL>

<P><STRONG><a name="[1a3]"></a>ext_buff_musk_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_buff_musk_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_buff_musk_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[199]"></a>ext_event_data_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_event_data_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_event_data_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[19d]"></a>ext_game_result_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_game_result_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_game_result_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[19f]"></a>ext_game_robot_HP_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_game_robot_HP_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_game_robot_HP_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[1a2]"></a>ext_game_robot_pos_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_game_robot_pos_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_game_robot_pos_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[19b]"></a>ext_game_robot_state_interpret</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, referee.o(.text.ext_game_robot_state_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_game_robot_state_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[1a0]"></a>ext_game_state_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_game_state_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_game_state_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[1a1]"></a>ext_power_heat_data_interpret</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, referee.o(.text.ext_power_heat_data_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_power_heat_data_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[1a5]"></a>ext_robot_hurt_interpret</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, referee.o(.text.ext_robot_hurt_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_robot_hurt_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[1a6]"></a>ext_shoot_data_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_shoot_data_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_shoot_data_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[19e]"></a>ext_student_interactive_header_data_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_student_interactive_header_data_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_student_interactive_header_data_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[19c]"></a>ext_supply_projectile_action_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_supply_projectile_action_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_supply_projectile_action_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[1a7]"></a>ext_supply_projectile_booking_interpret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, referee.o(.text.ext_supply_projectile_booking_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ext_supply_projectile_booking_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[9d]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sp_usart.o(.text.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[198]"></a>frame_interpret</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, referee.o(.text.frame_interpret))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = frame_interpret &rArr; vrerify_frame &rArr; Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vrerify_frame
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_supply_projectile_booking_interpret
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_supply_projectile_action_interpret
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_student_interactive_header_data_interpret
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_shoot_data_interpret
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_robot_hurt_interpret
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_power_heat_data_interpret
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_game_state_interpret
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_game_robot_state_interpret
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_game_robot_pos_interpret
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_game_robot_HP_interpret
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_game_result_interpret
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_event_data_interpret
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_buff_musk_interpret
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aerial_robot_energy_interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_from_dma
</UL>

<P><STRONG><a name="[e0]"></a>main</STRONG> (Thumb, 816 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = main &rArr; TASK_GlobalInit &rArr; RC_ReceiverInit &rArr; USART_RX_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spPortExitCritical
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spPortEnterCritical
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TimerInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_Start
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GetMilliSecond
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Configuration
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ae]"></a>packFrame</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, frame.o(.text.packFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = packFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8Check
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoComputer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtoComputerInit
</UL>

<P><STRONG><a name="[17e]"></a>referee_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, referee.o(.text.referee_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = referee_init &rArr; USART_TX_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_TX_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_RX_Config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[17a]"></a>referee_send_HP</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, referee.o(.text.referee_send_HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = referee_send_HP &rArr; Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ControlLooper
</UL>

<P><STRONG><a name="[179]"></a>sendtoComputer</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frame.o(.text.sendtoComputer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sendtoComputer &rArr; USB_SendData &rArr; USBD_HID_SendReport &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packFrame
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_ControlLooper
</UL>

<P><STRONG><a name="[11d]"></a>sendtoComputerInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, frame.o(.text.sendtoComputerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendtoComputerInit &rArr; packFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Autoaim_Init
</UL>

<P><STRONG><a name="[b0]"></a>spCAN_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sp_can.o(.text.spCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = spCAN_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_can.o(.rodata.spCAN)
</UL>
<P><STRONG><a name="[b1]"></a>spCAN_MsgSendLoop</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, sp_can.o(.text.spCAN_MsgSendLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = spCAN_MsgSendLoop &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__CAN_SendMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_can.o(.rodata.spCAN)
</UL>
<P><STRONG><a name="[a6]"></a>spClockHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sp_task.o(.text.spClockHandler))
<BR>[Address Reference Count : 1]<UL><LI> sp_task.o(.text.TASK_TimerInit)
</UL>
<P><STRONG><a name="[1a8]"></a>spPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sp_task.o(.text.spPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>spPortExitCritical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sp_task.o(.text.spPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = spPortExitCritical &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>unpackFrame</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, frame.o(.text.unpackFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = unpackFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8Check
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_aim
</UL>

<P><STRONG><a name="[af]"></a>update_from_dma</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, referee.o(.text.update_from_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = update_from_dma &rArr; frame_interpret &rArr; vrerify_frame &rArr; Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> referee.o(.text.referee_init)
</UL>
<P><STRONG><a name="[19a]"></a>vrerify_frame</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, referee.o(.text.vrerify_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vrerify_frame &rArr; Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bytes2u16
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_interpret
</UL>

<P><STRONG><a name="[12c]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[12b]"></a>CAN_GetITStatus</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, stm32f4xx_can.o(i.CAN_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[128]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[12d]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__CAN_SendMsg
</UL>

<P><STRONG><a name="[1b2]"></a>DCD_EP_ClrStall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_ClrStall &rArr; USB_OTG_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1b4]"></a>DCD_EP_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[1b6]"></a>DCD_EP_PrepareRx</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_PrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[1de]"></a>DCD_EP_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dcd.o(i.DCD_EP_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCD_EP_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[1b9]"></a>DCD_EP_Stall</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usb_dcd.o(i.DCD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[191]"></a>DCD_EP_Tx</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usb_dcd.o(i.DCD_EP_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SendReport
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[a1]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR>[Address Reference Count : 2]<UL><LI> sp_irq.o(.text.DMA2_Stream5_IRQHandler)
<LI> sp_irq.o(.text.DMA2_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[140]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_RX_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Restart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ResetCounter
</UL>

<P><STRONG><a name="[13e]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_RX_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitNull
</UL>

<P><STRONG><a name="[13d]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_RX_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Restart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitNull
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CopyMem2Mem
</UL>

<P><STRONG><a name="[a0]"></a>DMA_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sp_irq.o(.text.DMA2_Stream5_IRQHandler)
<LI> sp_irq.o(.text.DMA2_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[16a]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverInit
</UL>

<P><STRONG><a name="[13f]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_TX_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_RX_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitNull
</UL>

<P><STRONG><a name="[141]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ResetCounter
</UL>

<P><STRONG><a name="[a3]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR>[Address Reference Count : 2]<UL><LI> sp_irq.o(.text.EXTI9_5_IRQHandler)
<LI> sp_irq.o(.text.EXTI0_IRQHandler)
</UL>
<P><STRONG><a name="[a2]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR>[Address Reference Count : 2]<UL><LI> sp_irq.o(.text.EXTI9_5_IRQHandler)
<LI> sp_irq.o(.text.EXTI0_IRQHandler)
</UL>
<P><STRONG><a name="[127]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led8_Configuration
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT_Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IN_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AN_Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AF_Config
</UL>

<P><STRONG><a name="[11f]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[c5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[c4]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadOutputDataBit))
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[14c]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Configuration
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_OnError
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ChangeOutput
</UL>

<P><STRONG><a name="[14b]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Configuration
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_OnRecovery
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ChangeOutput
</UL>

<P><STRONG><a name="[c3]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ToggleBits))
<BR>[Address Reference Count : 1]<UL><LI> sp_gpio.o(.rodata.spGPIO)
</UL>
<P><STRONG><a name="[171]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP_WatchDog_FeedDog
</UL>

<P><STRONG><a name="[155]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_IRQEnable
</UL>

<P><STRONG><a name="[1a9]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led8_Configuration
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_TX_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_RX_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Configuration
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitNull
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_RCC
</UL>

<P><STRONG><a name="[1aa]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TimerInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[182]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[18f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1ab]"></a>RNG_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>RNG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>

<P><STRONG><a name="[16f]"></a>RNG_GetRandomNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rng.o(i.RNG_GetRandomNumber))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>

<P><STRONG><a name="[122]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[a8]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR>[Address Reference Count : 4]<UL><LI> sp_irq.o(.text.TIM1_TRG_COM_TIM11_IRQHandler)
<LI> sp_irq.o(.text.TIM8_BRK_TIM12_IRQHandler)
<LI> sp_irq.o(.text.TIM8_UP_TIM13_IRQHandler)
<LI> sp_irq.o(.text.TIM8_TRG_COM_TIM14_IRQHandler)
</UL>
<P><STRONG><a name="[123]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TimerInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetFrequency
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[18a]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[a7]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sp_irq.o(.text.TIM1_TRG_COM_TIM11_IRQHandler)
<LI> sp_irq.o(.text.TIM8_BRK_TIM12_IRQHandler)
<LI> sp_irq.o(.text.TIM8_UP_TIM13_IRQHandler)
<LI> sp_irq.o(.text.TIM8_TRG_COM_TIM14_IRQHandler)
</UL>
<P><STRONG><a name="[181]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_TimerInit
</UL>

<P><STRONG><a name="[120]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[121]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[184]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[185]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[186]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[187]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[188]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[189]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_OutputInit
</UL>

<P><STRONG><a name="[183]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[18c]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
</UL>

<P><STRONG><a name="[aa]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 8]<UL><LI> sp_irq.o(.text.USART1_IRQHandler)
<LI> sp_irq.o(.text.USART2_IRQHandler)
<LI> sp_irq.o(.text.USART3_IRQHandler)
<LI> sp_irq.o(.text.UART4_IRQHandler)
<LI> sp_irq.o(.text.UART5_IRQHandler)
<LI> sp_irq.o(.text.USART6_IRQHandler)
<LI> sp_irq.o(.text.UART7_IRQHandler)
<LI> sp_irq.o(.text.UART8_IRQHandler)
</UL>
<P><STRONG><a name="[16c]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[143]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_TX_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_RX_Config
</UL>

<P><STRONG><a name="[a9]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Address Reference Count : 8]<UL><LI> sp_irq.o(.text.USART1_IRQHandler)
<LI> sp_irq.o(.text.USART2_IRQHandler)
<LI> sp_irq.o(.text.USART3_IRQHandler)
<LI> sp_irq.o(.text.UART4_IRQHandler)
<LI> sp_irq.o(.text.UART5_IRQHandler)
<LI> sp_irq.o(.text.USART6_IRQHandler)
<LI> sp_irq.o(.text.UART7_IRQHandler)
<LI> sp_irq.o(.text.UART8_IRQHandler)
</UL>
<P><STRONG><a name="[16b]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ReceiverInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TASK_GlobalInit
</UL>

<P><STRONG><a name="[18d]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
</UL>

<P><STRONG><a name="[18b]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_OverSampling8Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Config
</UL>

<P><STRONG><a name="[1e1]"></a>USBD_ClrCfg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_ClrCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1ce]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[1cf]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[1cd]"></a>USBD_CtlError</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CtlError &rArr; DCD_EP_Stall &rArr; USB_OTG_EPSetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1d0]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlReceiveStatus &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[1d1]"></a>USBD_CtlSendData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1cc]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[156]"></a>USBD_OTG_ISR_Handler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usb_dcd_int.o(i.USBD_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_OTG_ISR_Handler &rArr; DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoOUTIncomplete_ISR
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_IsoINIncomplete_ISR
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUSBSuspend_ISR
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleSof_ISR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleResume_ISR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[1e3]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbd_req.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[1e0]"></a>USBD_SetCfg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1e4]"></a>USBD_StdDevReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[1e6]"></a>USBD_StdEPReq</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[1e5]"></a>USBD_StdItfReq</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[1bc]"></a>USB_OTG_EP0Activate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[1b7]"></a>USB_OTG_EP0StartXfer</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[1c1]"></a>USB_OTG_EP0_OutStart</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[1b5]"></a>USB_OTG_EPActivate</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_EPActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_EPActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>

<P><STRONG><a name="[1b3]"></a>USB_OTG_EPClearStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_ClrStall
</UL>

<P><STRONG><a name="[1ba]"></a>USB_OTG_EPSetStall</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>

<P><STRONG><a name="[1b8]"></a>USB_OTG_EPStartXfer</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Tx
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_PrepareRx
</UL>

<P><STRONG><a name="[1c9]"></a>USB_OTG_FlushTxFifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_uDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleUsbReset_ISR
</UL>

<P><STRONG><a name="[1bd]"></a>USB_OTG_GetDeviceSpeed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_GetDeviceSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_GetDeviceSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleEnumDone_ISR
</UL>

<P><STRONG><a name="[1e8]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsDeviceMode
</UL>

<P><STRONG><a name="[1d6]"></a>USB_OTG_IsDeviceMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsDeviceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsDeviceMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1d7]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1bf]"></a>USB_OTG_ReadDevAllInEPItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllInEPItr))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[1c4]"></a>USB_OTG_ReadDevAllOutEp_itr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevAllOutEp_itr))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[1c5]"></a>USB_OTG_ReadDevOutEP_itr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadDevOutEP_itr))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleOutEP_ISR
</UL>

<P><STRONG><a name="[1c7]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleRxStatusQueueLevel_ISR
</UL>

<P><STRONG><a name="[157]"></a>USB_OTG_UngateClock</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usb_core.o(i.USB_OTG_UngateClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_UngateClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[1ca]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EPStartXfer
</UL>

<P><STRONG><a name="[239]"></a>delay_us</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, sp_delay.o(sp_delay), UNUSED)

<P><STRONG><a name="[1ac]"></a>delay_ms</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, sp_delay.o(sp_delay))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
</UL>

<P><STRONG><a name="[1e9]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
</UL>

<P><STRONG><a name="[1ec]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1f0]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[1ef]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[1f1]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[23c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[1f2]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[23d]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
</UL>

<P><STRONG><a name="[1f3]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1eb]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1ee]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[23e]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[1f4]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
</UL>

<P><STRONG><a name="[1f6]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[23f]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[1f8]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1f9]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
</UL>

<P><STRONG><a name="[1fa]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[240]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[1fb]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_ControllerDriver
</UL>

<P><STRONG><a name="[1fc]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[1fd]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1f7]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[d4]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[242]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[243]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1ea]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[150]"></a>deadzone_gain</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sp_motor.o(.text.deadzone_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deadzone_gain
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_ControlLooper
</UL>

<P><STRONG><a name="[197]"></a>sign</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sp_motor.o(.text.sign))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deadzone_gain
</UL>

<P><STRONG><a name="[139]"></a>sign</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sp_chasis.o(.text.sign))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Change_Limit
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASIS_Looper
</UL>

<P><STRONG><a name="[b5]"></a>__CAN_SendMsg</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, sp_can.o(.text.__CAN_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __CAN_SendMsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spCAN_MsgSendLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sp_can.o(.rodata.spCAN)
</UL>
<P><STRONG><a name="[175]"></a>SetSysClock</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, system_stm32f427ii.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1]"></a>USBD_DataInStage</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtlContinueSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_DataOutStage</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtlContinueRx &rArr; DCD_EP_PrepareRx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_IsoINIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoINIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>USBD_IsoOUTIncomplete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_IsoOUTIncomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_Reset</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Reset &rArr; DCD_EP_Open &rArr; USB_OTG_EPActivate
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_Resume</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1d2]"></a>USBD_RunTestMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RunTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[3]"></a>USBD_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SOF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_SetupStage</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_Stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_Suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_core.o(.data)
</UL>
<P><STRONG><a name="[1cb]"></a>USBD_ClrFeature</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1d3]"></a>USBD_GetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1d4]"></a>USBD_GetDescriptor</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1d5]"></a>USBD_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1dd]"></a>USBD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_EP_SetAddress
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1df]"></a>USBD_SetConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd_req.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetCfg
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1e2]"></a>USBD_SetFeature</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, usbd_req.o(i.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; DCD_EP_Tx &rArr; USB_OTG_EPStartXfer &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1bb]"></a>DCD_HandleEnumDone_ISR</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleEnumDone_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DCD_HandleEnumDone_ISR &rArr; USB_OTG_EP0Activate
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetDeviceSpeed
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1be]"></a>DCD_HandleInEP_ISR</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleInEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCD_HandleInEP_ISR &rArr; DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_WriteEmptyTxFifo
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_ReadDevInEP
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllInEPItr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1c3]"></a>DCD_HandleOutEP_ISR</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleOutEP_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DCD_HandleOutEP_ISR &rArr; USB_OTG_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevOutEP_itr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadDevAllOutEp_itr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1d8]"></a>DCD_HandleResume_ISR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleResume_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleResume_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1c6]"></a>DCD_HandleRxStatusQueueLevel_ISR</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleRxStatusQueueLevel_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DCD_HandleRxStatusQueueLevel_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1da]"></a>DCD_HandleSof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_HandleSof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_HandleSof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1d9]"></a>DCD_HandleUSBSuspend_ISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, usb_dcd_int.o(i.DCD_HandleUSBSuspend_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCD_HandleUSBSuspend_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1c8]"></a>DCD_HandleUsbReset_ISR</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, usb_dcd_int.o(i.DCD_HandleUsbReset_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DCD_HandleUsbReset_ISR &rArr; USB_OTG_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_EP0_OutStart
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1db]"></a>DCD_IsoINIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoINIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoINIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1dc]"></a>DCD_IsoOUTIncomplete_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_dcd_int.o(i.DCD_IsoOUTIncomplete_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCD_IsoOUTIncomplete_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[1c0]"></a>DCD_ReadDevInEP</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, usb_dcd_int.o(i.DCD_ReadDevInEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DCD_ReadDevInEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[1c2]"></a>DCD_WriteEmptyTxFifo</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usb_dcd_int.o(i.DCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCD_WriteEmptyTxFifo &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCD_HandleInEP_ISR
</UL>

<P><STRONG><a name="[1b1]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CheckITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[1f5]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[1ed]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[9e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
