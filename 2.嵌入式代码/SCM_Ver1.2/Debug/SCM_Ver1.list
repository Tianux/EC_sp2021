
SCM_Ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f53c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee8  0800f728  0800f728  0001f728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010610  08010610  000305e4  2**0
                  CONTENTS
  4 .ARM          00000000  08010610  08010610  000305e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010610  08010610  000305e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010610  08010610  00020610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010614  08010614  00020614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e4  20000000  08010618  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d18  200005e4  08010bfc  000305e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022fc  08010bfc  000322fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000305e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f47a  00000000  00000000  0003060d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049f6  00000000  00000000  0004fa87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001800  00000000  00000000  00054480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001590  00000000  00000000  00055c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c8d1  00000000  00000000  00057210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001851d  00000000  00000000  00073ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009064a  00000000  00000000  0008bffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c648  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007564  00000000  00000000  0011c6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200005e4 	.word	0x200005e4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800f70c 	.word	0x0800f70c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200005e8 	.word	0x200005e8
 8000224:	0800f70c 	.word	0x0800f70c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	d1ed      	bne.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_ADC1_Init+0x74>)
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <MX_ADC1_Init+0x78>)
 8001288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_ADC1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_ADC1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_ADC1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_ADC1_Init+0x74>)
 800129e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_ADC1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_ADC1_Init+0x74>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_ADC1_Init+0x74>)
 80012b2:	f001 fa05 	bl	80026c0 <HAL_ADC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012bc:	f000 fc6f 	bl	8001b9e <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012c0:	230b      	movs	r3, #11
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_ADC1_Init+0x74>)
 80012d2:	f001 fadf 	bl	8002894 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012dc:	f000 fc5f 	bl	8001b9e <Error_Handler>
  }

}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000a24 	.word	0x20000a24
 80012ec:	40012400 	.word	0x40012400

080012f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_ADC_MspInit+0x6c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d121      	bne.n	8001354 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_ADC_MspInit+0x70>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_ADC_MspInit+0x70>)
 8001316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_ADC_MspInit+0x70>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_ADC_MspInit+0x70>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_ADC_MspInit+0x70>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_ADC_MspInit+0x70>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001340:	2306      	movs	r3, #6
 8001342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001344:	2303      	movs	r3, #3
 8001346:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_ADC_MspInit+0x74>)
 8001350:	f003 f8a6 	bl	80044a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40012400 	.word	0x40012400
 8001360:	40021000 	.word	0x40021000
 8001364:	40011000 	.word	0x40011000

08001368 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_CAN_Init+0x64>)
 800136e:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <MX_CAN_Init+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_CAN_Init+0x64>)
 8001374:	2203      	movs	r2, #3
 8001376:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_CAN_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_CAN_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_CAN_Init+0x64>)
 8001386:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800138a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_CAN_Init+0x64>)
 800138e:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8001392:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <MX_CAN_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_CAN_Init+0x64>)
 800139c:	2201      	movs	r2, #1
 800139e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_CAN_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_CAN_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_CAN_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_CAN_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_CAN_Init+0x64>)
 80013ba:	f001 fb9d 	bl	8002af8 <HAL_CAN_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80013c4:	f000 fbeb 	bl	8001b9e <Error_Handler>
  }

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000a54 	.word	0x20000a54
 80013d0:	40006400 	.word	0x40006400

080013d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a41      	ldr	r2, [pc, #260]	; (80014f4 <HAL_CAN_MspInit+0x120>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d17b      	bne.n	80014ec <HAL_CAN_MspInit+0x118>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <HAL_CAN_MspInit+0x124>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <HAL_CAN_MspInit+0x124>)
 80013fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_CAN_MspInit+0x124>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
 800140a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <HAL_CAN_MspInit+0x124>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a39      	ldr	r2, [pc, #228]	; (80014f8 <HAL_CAN_MspInit+0x124>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <HAL_CAN_MspInit+0x124>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
 8001422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001428:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142a:	2300      	movs	r3, #0
 800142c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001436:	4619      	mov	r1, r3
 8001438:	4830      	ldr	r0, [pc, #192]	; (80014fc <HAL_CAN_MspInit+0x128>)
 800143a:	f003 f831 	bl	80044a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800143e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001450:	4619      	mov	r1, r3
 8001452:	482a      	ldr	r0, [pc, #168]	; (80014fc <HAL_CAN_MspInit+0x128>)
 8001454:	f003 f824 	bl	80044a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_CAN_MspInit+0x12c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800145e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001460:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001468:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800146c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800146e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001476:	4a22      	ldr	r2, [pc, #136]	; (8001500 <HAL_CAN_MspInit+0x12c>)
 8001478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800147a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2101      	movs	r1, #1
 8001480:	2014      	movs	r0, #20
 8001482:	f002 fa46 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001486:	2014      	movs	r0, #20
 8001488:	f002 fa5f 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */
    CAN_FilterTypeDef  CanFilterConfig;

    CanFilterConfig.FilterBank = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
    CanFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    CanFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001494:	2301      	movs	r3, #1
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
    CanFilterConfig.FilterIdHigh = 0x0000;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
    CanFilterConfig.FilterIdLow = 0x0000;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
    CanFilterConfig.FilterMaskIdHigh = 0x0000;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
    CanFilterConfig.FilterMaskIdLow = 0x0000;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
    CanFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    CanFilterConfig.FilterActivation = ENABLE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    CanFilterConfig.SlaveStartFilterBank = 0;  //For single CAN instances, this parameter is meaningless.
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30

    if(HAL_CAN_ConfigFilter(canHandle, &CanFilterConfig) != HAL_OK){
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f001 fc17 	bl	8002cee <HAL_CAN_ConfigFilter>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_CAN_MspInit+0xf6>
    	 Error_Handler();
 80014c6:	f000 fb6a 	bl	8001b9e <Error_Handler>
    }
    if(HAL_CAN_ActivateNotification(canHandle,CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80014ca:	2102      	movs	r1, #2
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f001 ff06 	bl	80032de <HAL_CAN_ActivateNotification>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_CAN_MspInit+0x108>
		 Error_Handler();
 80014d8:	f000 fb61 	bl	8001b9e <Error_Handler>
	}
    if(HAL_CAN_Start(canHandle) != HAL_OK){
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f001 fccf 	bl	8002e80 <HAL_CAN_Start>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_CAN_MspInit+0x118>
		 Error_Handler();
 80014e8:	f000 fb59 	bl	8001b9e <Error_Handler>
	}
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80014ec:	bf00      	nop
 80014ee:	3750      	adds	r7, #80	; 0x50
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40006400 	.word	0x40006400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010c00 	.word	0x40010c00
 8001500:	40010000 	.word	0x40010000

08001504 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CanRxData) != HAL_OK){
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800150e:	4a23      	ldr	r2, [pc, #140]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001510:	2100      	movs	r1, #0
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f001 fdd2 	bl	80030bc <HAL_CAN_GetRxMessage>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 800151e:	f000 fb3e 	bl	8001b9e <Error_Handler>
	}
	if(RxHeader.StdId==0x300 && SCM_CanReceiveFlag==SCM_CAN_Ready){
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800152a:	d130      	bne.n	800158e <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d12c      	bne.n	800158e <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
		SCM.CAN_ConnectWDT=20;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8001536:	2214      	movs	r2, #20
 8001538:	849a      	strh	r2, [r3, #36]	; 0x24

		if((CanRxData[0] & 0x01) == 0x01)
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
			SCM_Next.Buck=SCM_Buck_Run;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e002      	b.n	8001554 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		else
			SCM_Next.Buck=SCM_Buck_Off;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]

		if((CanRxData[0] & 0x02) == 0x02)
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
			SCM_Next.Mode=SCM_Mode_Cap;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001562:	2201      	movs	r2, #1
 8001564:	705a      	strb	r2, [r3, #1]
 8001566:	e002      	b.n	800156e <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
		else
			SCM_Next.Mode=SCM_Mode_Bat;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]

		SCM_Next.SetPow=(CanRxData[2]<<8|CanRxData[3])*25;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001570:	789b      	ldrb	r3, [r3, #2]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001576:	78d2      	ldrb	r2, [r2, #3]
 8001578:	431a      	orrs	r2, r3
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	009a      	lsls	r2, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8001586:	6053      	str	r3, [r2, #4]

		SCM_CanReceiveFlag=SCM_CAN_Busy;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
	}

}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000a84 	.word	0x20000a84
 800159c:	20000aa4 	.word	0x20000aa4
 80015a0:	2000060c 	.word	0x2000060c
 80015a4:	20000e00 	.word	0x20000e00
 80015a8:	20000ddc 	.word	0x20000ddc

080015ac <SCM_CAN_Transmit>:
void SCM_CAN_Transmit(void){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
	uint32_t retMail;

	TxHeader.StdId=0x301;
 80015b2:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <SCM_CAN_Transmit+0xb8>)
 80015b4:	f240 3201 	movw	r2, #769	; 0x301
 80015b8:	601a      	str	r2, [r3, #0]
//	TxHeader.ExtId=0x00;
	TxHeader.IDE=CAN_ID_STD;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <SCM_CAN_Transmit+0xb8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
	TxHeader.RTR=CAN_RTR_DATA;
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <SCM_CAN_Transmit+0xb8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
	TxHeader.DLC=8;
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <SCM_CAN_Transmit+0xb8>)
 80015c8:	2208      	movs	r2, #8
 80015ca:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime=DISABLE;
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <SCM_CAN_Transmit+0xb8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	751a      	strb	r2, [r3, #20]
	CanTxData[0]=SCM.Mode<<1 | SCM.Buck;
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <SCM_CAN_Transmit+0xbc>)
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	b25a      	sxtb	r2, r3
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <SCM_CAN_Transmit+0xbc>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <SCM_CAN_Transmit+0xc0>)
 80015e8:	701a      	strb	r2, [r3, #0]
	CanTxData[1]=0;
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <SCM_CAN_Transmit+0xc0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	705a      	strb	r2, [r3, #1]
	CanTxData[2]=InaPow[1]>>8;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <SCM_CAN_Transmit+0xc4>)
 80015f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015f6:	121b      	asrs	r3, r3, #8
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <SCM_CAN_Transmit+0xc0>)
 80015fe:	709a      	strb	r2, [r3, #2]
	CanTxData[3]=InaPow[1];
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <SCM_CAN_Transmit+0xc4>)
 8001602:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <SCM_CAN_Transmit+0xc0>)
 800160a:	70da      	strb	r2, [r3, #3]
	CanTxData[4]=InaPow[0]>>8;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <SCM_CAN_Transmit+0xc4>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	121b      	asrs	r3, r3, #8
 8001614:	b21b      	sxth	r3, r3
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <SCM_CAN_Transmit+0xc0>)
 800161a:	711a      	strb	r2, [r3, #4]
	CanTxData[5]=InaPow[0];
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <SCM_CAN_Transmit+0xc4>)
 800161e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <SCM_CAN_Transmit+0xc0>)
 8001626:	715a      	strb	r2, [r3, #5]
	CanTxData[6]=InaVol[1]>>8;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <SCM_CAN_Transmit+0xc8>)
 800162a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800162e:	121b      	asrs	r3, r3, #8
 8001630:	b21b      	sxth	r3, r3
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <SCM_CAN_Transmit+0xc0>)
 8001636:	719a      	strb	r2, [r3, #6]
	CanTxData[7]=InaVol[1];
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <SCM_CAN_Transmit+0xc8>)
 800163a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <SCM_CAN_Transmit+0xc0>)
 8001642:	71da      	strb	r2, [r3, #7]
//	HAL_CAN_ActivateNotification(&hcan,CAN_IT_TX_MAILBOX_EMPTY);
	if(HAL_CAN_AddTxMessage(&hcan,&TxHeader,CanTxData, &retMail)!=HAL_OK){
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <SCM_CAN_Transmit+0xc0>)
 8001648:	4906      	ldr	r1, [pc, #24]	; (8001664 <SCM_CAN_Transmit+0xb8>)
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <SCM_CAN_Transmit+0xcc>)
 800164c:	f001 fc5c 	bl	8002f08 <HAL_CAN_AddTxMessage>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SCM_CAN_Transmit+0xae>
		Error_Handler();
 8001656:	f000 faa2 	bl	8001b9e <Error_Handler>
	}
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000a8c 	.word	0x20000a8c
 8001668:	20000e00 	.word	0x20000e00
 800166c:	20000a7c 	.word	0x20000a7c
 8001670:	20000f74 	.word	0x20000f74
 8001674:	20000f78 	.word	0x20000f78
 8001678:	20000a54 	.word	0x20000a54

0800167c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_CRC_Init+0x20>)
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <MX_CRC_Init+0x24>)
 8001684:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_CRC_Init+0x20>)
 8001688:	f002 f979 	bl	800397e <HAL_CRC_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001692:	f000 fa84 	bl	8001b9e <Error_Handler>
  }

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000ac0 	.word	0x20000ac0
 80016a0:	40023000 	.word	0x40023000

080016a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_CRC_MspInit+0x34>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10b      	bne.n	80016ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_CRC_MspInit+0x38>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_CRC_MspInit+0x38>)
 80016bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c0:	6153      	str	r3, [r2, #20]
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_CRC_MspInit+0x38>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40023000 	.word	0x40023000
 80016dc:	40021000 	.word	0x40021000

080016e0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_DAC_Init+0x4c>)
 80016f0:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <MX_DAC_Init+0x50>)
 80016f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_DAC_Init+0x4c>)
 80016f6:	f002 f95e 	bl	80039b6 <HAL_DAC_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001700:	f000 fa4d 	bl	8001b9e <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001704:	2300      	movs	r3, #0
 8001706:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <MX_DAC_Init+0x4c>)
 8001714:	f002 f9e6 	bl	8003ae4 <HAL_DAC_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800171e:	f000 fa3e 	bl	8001b9e <Error_Handler>
  }

}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000ac8 	.word	0x20000ac8
 8001730:	40007400 	.word	0x40007400

08001734 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_DAC_MspInit+0x6c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d121      	bne.n	8001798 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_DAC_MspInit+0x70>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <HAL_DAC_MspInit+0x70>)
 800175a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800175e:	61d3      	str	r3, [r2, #28]
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_DAC_MspInit+0x70>)
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_DAC_MspInit+0x70>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_DAC_MspInit+0x70>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_DAC_MspInit+0x70>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001784:	2310      	movs	r3, #16
 8001786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001788:	2303      	movs	r3, #3
 800178a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_DAC_MspInit+0x74>)
 8001794:	f002 fe84 	bl	80044a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001798:	bf00      	nop
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40007400 	.word	0x40007400
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800

080017ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_DMA_Init+0x70>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a19      	ldr	r2, [pc, #100]	; (800181c <MX_DMA_Init+0x70>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6153      	str	r3, [r2, #20]
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_DMA_Init+0x70>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_DMA_Init+0x70>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <MX_DMA_Init+0x70>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6153      	str	r3, [r2, #20]
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_DMA_Init+0x70>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	200e      	movs	r0, #14
 80017e8:	f002 f893 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80017ec:	200e      	movs	r0, #14
 80017ee:	f002 f8ac 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	200f      	movs	r0, #15
 80017f8:	f002 f88b 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80017fc:	200f      	movs	r0, #15
 80017fe:	f002 f8a4 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2039      	movs	r0, #57	; 0x39
 8001808:	f002 f883 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800180c:	2039      	movs	r0, #57	; 0x39
 800180e:	f002 f89c 	bl	800394a <HAL_NVIC_EnableIRQ>

}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001834:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <MX_GPIO_Init+0x110>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <MX_GPIO_Init+0x110>)
 800183a:	f043 0320 	orr.w	r3, r3, #32
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <MX_GPIO_Init+0x110>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <MX_GPIO_Init+0x110>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a37      	ldr	r2, [pc, #220]	; (8001930 <MX_GPIO_Init+0x110>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <MX_GPIO_Init+0x110>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <MX_GPIO_Init+0x110>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a31      	ldr	r2, [pc, #196]	; (8001930 <MX_GPIO_Init+0x110>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <MX_GPIO_Init+0x110>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <MX_GPIO_Init+0x110>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <MX_GPIO_Init+0x110>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <MX_GPIO_Init+0x110>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2108      	movs	r1, #8
 8001898:	4826      	ldr	r0, [pc, #152]	; (8001934 <MX_GPIO_Init+0x114>)
 800189a:	f002 ff82 	bl	80047a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11 
 800189e:	2200      	movs	r2, #0
 80018a0:	f641 4150 	movw	r1, #7248	; 0x1c50
 80018a4:	4824      	ldr	r0, [pc, #144]	; (8001938 <MX_GPIO_Init+0x118>)
 80018a6:	f002 ff7c 	bl	80047a2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80018b0:	4822      	ldr	r0, [pc, #136]	; (800193c <MX_GPIO_Init+0x11c>)
 80018b2:	f002 ff76 	bl	80047a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b6:	2301      	movs	r3, #1
 80018b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	4619      	mov	r1, r3
 80018c8:	481b      	ldr	r0, [pc, #108]	; (8001938 <MX_GPIO_Init+0x118>)
 80018ca:	f002 fde9 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018ce:	2308      	movs	r3, #8
 80018d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2302      	movs	r3, #2
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4619      	mov	r1, r3
 80018e4:	4813      	ldr	r0, [pc, #76]	; (8001934 <MX_GPIO_Init+0x114>)
 80018e6:	f002 fddb 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11 
 80018ea:	f641 4350 	movw	r3, #7248	; 0x1c50
 80018ee:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_GPIO_Init+0x118>)
 8001904:	f002 fdcc 	bl	80044a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001908:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800190c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2302      	movs	r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_GPIO_Init+0x11c>)
 8001922:	f002 fdbd 	bl	80044a0 <HAL_GPIO_Init>

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	40010800 	.word	0x40010800
 8001938:	40011000 	.word	0x40011000
 800193c:	40010c00 	.word	0x40010c00

08001940 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_I2C1_Init+0x50>)
 8001946:	4a13      	ldr	r2, [pc, #76]	; (8001994 <MX_I2C1_Init+0x54>)
 8001948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_I2C1_Init+0x50>)
 800194c:	4a12      	ldr	r2, [pc, #72]	; (8001998 <MX_I2C1_Init+0x58>)
 800194e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_I2C1_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_I2C1_Init+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_I2C1_Init+0x50>)
 800195e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001962:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_I2C1_Init+0x50>)
 800197e:	f002 ff29 	bl	80047d4 <HAL_I2C_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001988:	f000 f909 	bl	8001b9e <Error_Handler>
  }

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000adc 	.word	0x20000adc
 8001994:	40005400 	.word	0x40005400
 8001998:	000186a0 	.word	0x000186a0

0800199c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d12f      	bne.n	8001a1c <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	  __HAL_RCC_I2C1_CLK_ENABLE();
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 80019c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c6:	61d3      	str	r3, [r2, #28]
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ec:	23c0      	movs	r3, #192	; 0xc0
 80019ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f0:	2312      	movs	r3, #18
 80019f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	4619      	mov	r1, r3
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <HAL_I2C_MspInit+0x90>)
 8001a00:	f002 fd4e 	bl	80044a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 8001a0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a0e:	61d3      	str	r3, [r2, #28]
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40005400 	.word	0x40005400
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010c00 	.word	0x40010c00

08001a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a34:	f000 fdc0 	bl	80025b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a38:	f000 f840 	bl	8001abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3c:	f7ff fef0 	bl	8001820 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a40:	f7ff feb4 	bl	80017ac <MX_DMA_Init>
  MX_ADC1_Init();
 8001a44:	f7ff fc16 	bl	8001274 <MX_ADC1_Init>
  MX_CAN_Init();
 8001a48:	f7ff fc8e 	bl	8001368 <MX_CAN_Init>
  MX_DAC_Init();
 8001a4c:	f7ff fe48 	bl	80016e0 <MX_DAC_Init>
  MX_I2C1_Init();
 8001a50:	f7ff ff76 	bl	8001940 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a54:	f000 f8aa 	bl	8001bac <MX_SPI1_Init>
  MX_SPI2_Init();
 8001a58:	f000 f8de 	bl	8001c18 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001a5c:	f000 f912 	bl	8001c84 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001a60:	f000 fbcc 	bl	80021fc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001a64:	f000 fcb6 	bl	80023d4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001a68:	f000 fb78 	bl	800215c <MX_TIM1_Init>
  MX_CRC_Init();
 8001a6c:	f7ff fe06 	bl	800167c <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a70:	f000 f881 	bl	8001b76 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4); //Breath light
 8001a74:	210c      	movs	r1, #12
 8001a76:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <main+0x78>)
 8001a78:	f005 f9f6 	bl	8006e68 <HAL_TIM_PWM_Start>
	  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	480b      	ldr	r0, [pc, #44]	; (8001aac <main+0x7c>)
 8001a80:	f001 ffbb 	bl	80039fa <HAL_DAC_Start>
	  HAL_CAN_MspInit(&hcan);
 8001a84:	480a      	ldr	r0, [pc, #40]	; (8001ab0 <main+0x80>)
 8001a86:	f7ff fca5 	bl	80013d4 <HAL_CAN_MspInit>
	  //Enable UART IDLE interrupt and set DMA for Unfixed-length Data Receiving
	  SCM_Init();
 8001a8a:	f006 ffeb 	bl	8008a64 <SCM_Init>
	  Ina226_Init();
 8001a8e:	f007 fc69 	bl	8009364 <Ina226_Init>
	  ssd1306_Init();
 8001a92:	f008 f96d 	bl	8009d70 <ssd1306_Init>
	  UART_InitForUpper(&huart1);
 8001a96:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <main+0x84>)
 8001a98:	f008 fb3e 	bl	800a118 <UART_InitForUpper>
	  MPU9255_Init();
 8001a9c:	f008 f80e 	bl	8009abc <MPU9255_Init>
	  //Start Tim1 for control task interrupt
	  HAL_TIM_Base_Start_IT(&htim1);
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <main+0x88>)
 8001aa2:	f005 f993 	bl	8006dcc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <main+0x76>
 8001aa8:	20000cbc 	.word	0x20000cbc
 8001aac:	20000ac8 	.word	0x20000ac8
 8001ab0:	20000a54 	.word	0x20000a54
 8001ab4:	20000d84 	.word	0x20000d84
 8001ab8:	20000c7c 	.word	0x20000c7c

08001abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b096      	sub	sp, #88	; 0x58
 8001ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac6:	2228      	movs	r2, #40	; 0x28
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f008 ff5b 	bl	800a986 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001afe:	2301      	movs	r3, #1
 8001b00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b02:	2302      	movs	r3, #2
 8001b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fdea 	bl	80056f0 <HAL_RCC_OscConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001b22:	f000 f83c 	bl	8001b9e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b26:	230f      	movs	r3, #15
 8001b28:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2102      	movs	r1, #2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 f854 	bl	8005bf0 <HAL_RCC_ClockConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b4e:	f000 f826 	bl	8001b9e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b52:	2302      	movs	r3, #2
 8001b54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b5a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 f9e2 	bl	8005f28 <HAL_RCCEx_PeriphCLKConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b6a:	f000 f818 	bl	8001b9e <Error_Handler>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3758      	adds	r7, #88	; 0x58
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	2025      	movs	r0, #37	; 0x25
 8001b80:	f001 fec7 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b84:	2025      	movs	r0, #37	; 0x25
 8001b86:	f001 fee0 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2019      	movs	r0, #25
 8001b90:	f001 febf 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b94:	2019      	movs	r0, #25
 8001b96:	f001 fed8 	bl	800394a <HAL_NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
	...

08001bac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <MX_SPI1_Init+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001be0:	2208      	movs	r2, #8
 8001be2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bf8:	220a      	movs	r2, #10
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_SPI1_Init+0x64>)
 8001bfe:	f004 fa49 	bl	8006094 <HAL_SPI_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c08:	f7ff ffc9 	bl	8001b9e <Error_Handler>
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000c24 	.word	0x20000c24
 8001c14:	40013000 	.word	0x40013000

08001c18 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c1e:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <MX_SPI2_Init+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c64:	220a      	movs	r2, #10
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <MX_SPI2_Init+0x64>)
 8001c6a:	f004 fa13 	bl	8006094 <HAL_SPI_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c74:	f7ff ff93 	bl	8001b9e <Error_Handler>
  }

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000b30 	.word	0x20000b30
 8001c80:	40003800 	.word	0x40003800

08001c84 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001c8a:	4a18      	ldr	r2, [pc, #96]	; (8001cec <MX_SPI3_Init+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001cb8:	2208      	movs	r2, #8
 8001cba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_SPI3_Init+0x64>)
 8001cd6:	f004 f9dd 	bl	8006094 <HAL_SPI_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001ce0:	f7ff ff5d 	bl	8001b9e <Error_Handler>
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000b88 	.word	0x20000b88
 8001cec:	40003c00 	.word	0x40003c00

08001cf0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0320 	add.w	r3, r7, #32
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <HAL_SPI_MspInit+0x180>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d130      	bne.n	8001d72 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d10:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a57      	ldr	r2, [pc, #348]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b55      	ldr	r3, [pc, #340]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	4b52      	ldr	r3, [pc, #328]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a51      	ldr	r2, [pc, #324]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d40:	23a0      	movs	r3, #160	; 0xa0
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0320 	add.w	r3, r7, #32
 8001d50:	4619      	mov	r1, r3
 8001d52:	4849      	ldr	r0, [pc, #292]	; (8001e78 <HAL_SPI_MspInit+0x188>)
 8001d54:	f002 fba4 	bl	80044a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d58:	2340      	movs	r3, #64	; 0x40
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0320 	add.w	r3, r7, #32
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4843      	ldr	r0, [pc, #268]	; (8001e78 <HAL_SPI_MspInit+0x188>)
 8001d6c:	f002 fb98 	bl	80044a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001d70:	e079      	b.n	8001e66 <HAL_SPI_MspInit+0x176>
  else if(spiHandle->Instance==SPI2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a41      	ldr	r2, [pc, #260]	; (8001e7c <HAL_SPI_MspInit+0x18c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d125      	bne.n	8001dc8 <HAL_SPI_MspInit+0xd8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	4a3c      	ldr	r2, [pc, #240]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d86:	61d3      	str	r3, [r2, #28]
 8001d88:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a36      	ldr	r2, [pc, #216]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001dac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 0320 	add.w	r3, r7, #32
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	482f      	ldr	r0, [pc, #188]	; (8001e80 <HAL_SPI_MspInit+0x190>)
 8001dc2:	f002 fb6d 	bl	80044a0 <HAL_GPIO_Init>
}
 8001dc6:	e04e      	b.n	8001e66 <HAL_SPI_MspInit+0x176>
  else if(spiHandle->Instance==SPI3)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_SPI_MspInit+0x194>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d149      	bne.n	8001e66 <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ddc:	61d3      	str	r3, [r2, #28]
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6193      	str	r3, [r2, #24]
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <HAL_SPI_MspInit+0x184>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001e02:	2328      	movs	r3, #40	; 0x28
 8001e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	4619      	mov	r1, r3
 8001e14:	481a      	ldr	r0, [pc, #104]	; (8001e80 <HAL_SPI_MspInit+0x190>)
 8001e16:	f002 fb43 	bl	80044a0 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <HAL_SPI_MspInit+0x19c>)
 8001e1e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e22:	2210      	movs	r2, #16
 8001e24:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001e4a:	480f      	ldr	r0, [pc, #60]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e4c:	f001 fea6 	bl	8003b9c <HAL_DMA_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 8001e56:	f7ff fea2 	bl	8001b9e <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e5e:	649a      	str	r2, [r3, #72]	; 0x48
 8001e60:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_SPI_MspInit+0x198>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001e66:	bf00      	nop
 8001e68:	3730      	adds	r7, #48	; 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40013000 	.word	0x40013000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	40003800 	.word	0x40003800
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	40003c00 	.word	0x40003c00
 8001e88:	20000be0 	.word	0x20000be0
 8001e8c:	4002041c 	.word	0x4002041c

08001e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_MspInit+0x5c>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <HAL_MspInit+0x5c>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6193      	str	r3, [r2, #24]
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_MspInit+0x5c>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_MspInit+0x5c>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_MspInit+0x5c>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	61d3      	str	r3, [r2, #28]
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_MspInit+0x5c>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_MspInit+0x60>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_MspInit+0x60>)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <HardFault_Handler+0x4>

08001f06 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <MemManage_Handler+0x4>

08001f0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <BusFault_Handler+0x4>

08001f12 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <UsageFault_Handler+0x4>

08001f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 fb80 	bl	8002644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <DMA1_Channel4_IRQHandler+0x10>)
 8001f4e:	f002 f83d 	bl	8003fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000cfc 	.word	0x20000cfc

08001f5c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <DMA1_Channel5_IRQHandler+0x10>)
 8001f62:	f002 f833 	bl	8003fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000d40 	.word	0x20000d40

08001f70 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f76:	f001 f9d7 	bl	8003328 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000a54 	.word	0x20000a54

08001f84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <TIM1_UP_IRQHandler+0x14>)
 8001f8a:	f004 ffab 	bl	8006ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  ControlTask();
 8001f8e:	f006 fc03 	bl	8008798 <ControlTask>
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000c7c 	.word	0x20000c7c

08001f9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <USART1_IRQHandler+0x14>)
 8001fa2:	f005 ffb5 	bl	8007f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 8001fa6:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <USART1_IRQHandler+0x14>)
 8001fa8:	f008 f8ce 	bl	800a148 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000d84 	.word	0x20000d84

08001fb4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <DMA2_Channel2_IRQHandler+0x10>)
 8001fba:	f002 f807 	bl	8003fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000be0 	.word	0x20000be0

08001fc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e00a      	b.n	8001ff0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fda:	f3af 8000 	nop.w
 8001fde:	4601      	mov	r1, r0
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	60ba      	str	r2, [r7, #8]
 8001fe6:	b2ca      	uxtb	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbf0      	blt.n	8001fda <_read+0x12>
	}

return len;
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e009      	b.n	8002028 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	60ba      	str	r2, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 f9c7 	bl	80023b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3301      	adds	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	dbf1      	blt.n	8002014 <_write+0x12>
	}
	return len;
 8002030:	687b      	ldr	r3, [r7, #4]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <_close>:

int _close(int file)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
	return -1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002060:	605a      	str	r2, [r3, #4]
	return 0;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <_isatty>:

int _isatty(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	return 1;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
	return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
	...

0800209c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <_sbrk+0x50>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x16>
		heap_end = &end;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <_sbrk+0x50>)
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <_sbrk+0x54>)
 80020b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <_sbrk+0x50>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <_sbrk+0x50>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	466a      	mov	r2, sp
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d907      	bls.n	80020d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020c6:	f008 fc1b 	bl	800a900 <__errno>
 80020ca:	4602      	mov	r2, r0
 80020cc:	230c      	movs	r3, #12
 80020ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
 80020d4:	e006      	b.n	80020e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <_sbrk+0x50>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a03      	ldr	r2, [pc, #12]	; (80020ec <_sbrk+0x50>)
 80020e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000600 	.word	0x20000600
 80020f0:	20002300 	.word	0x20002300

080020f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <SystemInit+0x5c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <SystemInit+0x5c>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <SystemInit+0x5c>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4911      	ldr	r1, [pc, #68]	; (8002150 <SystemInit+0x5c>)
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <SystemInit+0x60>)
 800210c:	4013      	ands	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <SystemInit+0x5c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <SystemInit+0x5c>)
 8002116:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800211a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <SystemInit+0x5c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <SystemInit+0x5c>)
 8002126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <SystemInit+0x5c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <SystemInit+0x5c>)
 8002132:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002136:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <SystemInit+0x5c>)
 800213a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800213e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <SystemInit+0x64>)
 8002142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002146:	609a      	str	r2, [r3, #8]
#endif 
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	f8ff0000 	.word	0xf8ff0000
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	463b      	mov	r3, r7
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002178:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <MX_TIM1_Init+0x98>)
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <MX_TIM1_Init+0x9c>)
 800217c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <MX_TIM1_Init+0x98>)
 8002180:	2247      	movs	r2, #71	; 0x47
 8002182:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_TIM1_Init+0x98>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_TIM1_Init+0x98>)
 800218c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002190:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_TIM1_Init+0x98>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <MX_TIM1_Init+0x98>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <MX_TIM1_Init+0x98>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021a4:	4813      	ldr	r0, [pc, #76]	; (80021f4 <MX_TIM1_Init+0x98>)
 80021a6:	f004 fde6 	bl	8006d76 <HAL_TIM_Base_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80021b0:	f7ff fcf5 	bl	8001b9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	4619      	mov	r1, r3
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <MX_TIM1_Init+0x98>)
 80021c2:	f005 f85d 	bl	8007280 <HAL_TIM_ConfigClockSource>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80021cc:	f7ff fce7 	bl	8001b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021d8:	463b      	mov	r3, r7
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_TIM1_Init+0x98>)
 80021de:	f005 fc13 	bl	8007a08 <HAL_TIMEx_MasterConfigSynchronization>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80021e8:	f7ff fcd9 	bl	8001b9e <Error_Handler>
  }

}
 80021ec:	bf00      	nop
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000c7c 	.word	0x20000c7c
 80021f8:	40012c00 	.word	0x40012c00

080021fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002202:	f107 0320 	add.w	r3, r7, #32
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]
 800221a:	615a      	str	r2, [r3, #20]
 800221c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <MX_TIM2_Init+0xb0>)
 8002220:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002224:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002226:	4b21      	ldr	r3, [pc, #132]	; (80022ac <MX_TIM2_Init+0xb0>)
 8002228:	2247      	movs	r2, #71	; 0x47
 800222a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <MX_TIM2_Init+0xb0>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <MX_TIM2_Init+0xb0>)
 8002234:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002238:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <MX_TIM2_Init+0xb0>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_TIM2_Init+0xb0>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002246:	4819      	ldr	r0, [pc, #100]	; (80022ac <MX_TIM2_Init+0xb0>)
 8002248:	f004 fde3 	bl	8006e12 <HAL_TIM_PWM_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002252:	f7ff fca4 	bl	8001b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800225e:	f107 0320 	add.w	r3, r7, #32
 8002262:	4619      	mov	r1, r3
 8002264:	4811      	ldr	r0, [pc, #68]	; (80022ac <MX_TIM2_Init+0xb0>)
 8002266:	f005 fbcf 	bl	8007a08 <HAL_TIMEx_MasterConfigSynchronization>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002270:	f7ff fc95 	bl	8001b9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002274:	2360      	movs	r3, #96	; 0x60
 8002276:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002278:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800227c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	220c      	movs	r2, #12
 800228a:	4619      	mov	r1, r3
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <MX_TIM2_Init+0xb0>)
 800228e:	f004 ff31 	bl	80070f4 <HAL_TIM_PWM_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002298:	f7ff fc81 	bl	8001b9e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <MX_TIM2_Init+0xb0>)
 800229e:	f000 f841 	bl	8002324 <HAL_TIM_MspPostInit>

}
 80022a2:	bf00      	nop
 80022a4:	3728      	adds	r7, #40	; 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000cbc 	.word	0x20000cbc

080022b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_TIM_Base_MspInit+0x34>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10b      	bne.n	80022da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_TIM_Base_MspInit+0x38>)
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <HAL_TIM_Base_MspInit+0x38>)
 80022c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022cc:	6193      	str	r3, [r2, #24]
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_TIM_Base_MspInit+0x38>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	40012c00 	.word	0x40012c00
 80022e8:	40021000 	.word	0x40021000

080022ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fc:	d10b      	bne.n	8002316 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_TIM_PWM_MspInit+0x34>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_TIM_PWM_MspInit+0x34>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	61d3      	str	r3, [r2, #28]
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_TIM_PWM_MspInit+0x34>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002342:	d12a      	bne.n	800239a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_TIM_MspPostInit+0x80>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_TIM_MspPostInit+0x80>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_TIM_MspPostInit+0x80>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800235c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002360:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	4619      	mov	r1, r3
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <HAL_TIM_MspPostInit+0x84>)
 8002372:	f002 f895 	bl	80044a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_TIM_MspPostInit+0x88>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	4a05      	ldr	r2, [pc, #20]	; (80023ac <HAL_TIM_MspPostInit+0x88>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010c00 	.word	0x40010c00
 80023ac:	40010000 	.word	0x40010000

080023b0 <__io_putchar>:

/* USER CODE BEGIN 0 */
#include "stdio.h"
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80023b8:	1d39      	adds	r1, r7, #4
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	2201      	movs	r2, #1
 80023c0:	4803      	ldr	r0, [pc, #12]	; (80023d0 <__io_putchar+0x20>)
 80023c2:	f005 fbc4 	bl	8007b4e <HAL_UART_Transmit>
	return ch;
 80023c6:	687b      	ldr	r3, [r7, #4]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000d84 	.word	0x20000d84

080023d4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <MX_USART1_UART_Init+0x50>)
 80023dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_USART1_UART_Init+0x4c>)
 800240c:	f005 fb52 	bl	8007ab4 <HAL_UART_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002416:	f7ff fbc2 	bl	8001b9e <Error_Handler>
  }

}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000d84 	.word	0x20000d84
 8002424:	40013800 	.word	0x40013800

08002428 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a43      	ldr	r2, [pc, #268]	; (8002550 <HAL_UART_MspInit+0x128>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d17f      	bne.n	8002548 <HAL_UART_MspInit+0x120>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <HAL_UART_MspInit+0x12c>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	4a41      	ldr	r2, [pc, #260]	; (8002554 <HAL_UART_MspInit+0x12c>)
 800244e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002452:	6193      	str	r3, [r2, #24]
 8002454:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_UART_MspInit+0x12c>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <HAL_UART_MspInit+0x12c>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_UART_MspInit+0x12c>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_UART_MspInit+0x12c>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800247c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	4619      	mov	r1, r3
 800248c:	4832      	ldr	r0, [pc, #200]	; (8002558 <HAL_UART_MspInit+0x130>)
 800248e:	f002 f807 	bl	80044a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	4619      	mov	r1, r3
 80024a6:	482c      	ldr	r0, [pc, #176]	; (8002558 <HAL_UART_MspInit+0x130>)
 80024a8:	f001 fffa 	bl	80044a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_UART_MspInit+0x134>)
 80024ae:	4a2c      	ldr	r2, [pc, #176]	; (8002560 <HAL_UART_MspInit+0x138>)
 80024b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_UART_MspInit+0x134>)
 80024b4:	2210      	movs	r2, #16
 80024b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b8:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_UART_MspInit+0x134>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_UART_MspInit+0x134>)
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c4:	4b25      	ldr	r3, [pc, #148]	; (800255c <HAL_UART_MspInit+0x134>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_UART_MspInit+0x134>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <HAL_UART_MspInit+0x134>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <HAL_UART_MspInit+0x134>)
 80024d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024de:	481f      	ldr	r0, [pc, #124]	; (800255c <HAL_UART_MspInit+0x134>)
 80024e0:	f001 fb5c 	bl	8003b9c <HAL_DMA_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80024ea:	f7ff fb58 	bl	8001b9e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1a      	ldr	r2, [pc, #104]	; (800255c <HAL_UART_MspInit+0x134>)
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_UART_MspInit+0x134>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_UART_MspInit+0x13c>)
 80024fc:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_UART_MspInit+0x140>)
 80024fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_UART_MspInit+0x13c>)
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_UART_MspInit+0x13c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_UART_MspInit+0x13c>)
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_UART_MspInit+0x13c>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_UART_MspInit+0x13c>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_UART_MspInit+0x13c>)
 8002520:	2220      	movs	r2, #32
 8002522:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_UART_MspInit+0x13c>)
 8002526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <HAL_UART_MspInit+0x13c>)
 800252e:	f001 fb35 	bl	8003b9c <HAL_DMA_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8002538:	f7ff fb31 	bl	8001b9e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_UART_MspInit+0x13c>)
 8002540:	635a      	str	r2, [r3, #52]	; 0x34
 8002542:	4a08      	ldr	r2, [pc, #32]	; (8002564 <HAL_UART_MspInit+0x13c>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002548:	bf00      	nop
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40013800 	.word	0x40013800
 8002554:	40021000 	.word	0x40021000
 8002558:	40010800 	.word	0x40010800
 800255c:	20000cfc 	.word	0x20000cfc
 8002560:	40020044 	.word	0x40020044
 8002564:	20000d40 	.word	0x20000d40
 8002568:	40020058 	.word	0x40020058

0800256c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800256c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800256e:	e003      	b.n	8002578 <LoopCopyDataInit>

08002570 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002572:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002574:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002576:	3104      	adds	r1, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002578:	480a      	ldr	r0, [pc, #40]	; (80025a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800257c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800257e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002580:	d3f6      	bcc.n	8002570 <CopyDataInit>
  ldr r2, =_sbss
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002584:	e002      	b.n	800258c <LoopFillZerobss>

08002586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002588:	f842 3b04 	str.w	r3, [r2], #4

0800258c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800258e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002590:	d3f9      	bcc.n	8002586 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002592:	f7ff fdaf 	bl	80020f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002596:	f008 f9b9 	bl	800a90c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800259a:	f7ff fa49 	bl	8001a30 <main>
  bx lr
 800259e:	4770      	bx	lr
  ldr r3, =_sidata
 80025a0:	08010618 	.word	0x08010618
  ldr r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80025a8:	200005e4 	.word	0x200005e4
  ldr r2, =_sbss
 80025ac:	200005e4 	.word	0x200005e4
  ldr r3, = _ebss
 80025b0:	200022fc 	.word	0x200022fc

080025b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <ADC1_2_IRQHandler>
	...

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_Init+0x28>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_Init+0x28>)
 80025c2:	f043 0310 	orr.w	r3, r3, #16
 80025c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c8:	2003      	movs	r0, #3
 80025ca:	f001 f997 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f000 f808 	bl	80025e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d4:	f7ff fc5c 	bl	8001e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40022000 	.word	0x40022000

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_InitTick+0x54>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_InitTick+0x58>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f001 f9af 	bl	8003966 <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00e      	b.n	8002630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d80a      	bhi.n	800262e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f001 f977 	bl	8003912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <HAL_InitTick+0x5c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000000 	.word	0x20000000
 800263c:	20000008 	.word	0x20000008
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_IncTick+0x1c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_IncTick+0x20>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <HAL_IncTick+0x20>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	20000008 	.word	0x20000008
 8002664:	20000dc4 	.word	0x20000dc4

08002668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b02      	ldr	r3, [pc, #8]	; (8002678 <HAL_GetTick+0x10>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	20000dc4 	.word	0x20000dc4

0800267c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff fff0 	bl	8002668 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d005      	beq.n	80026a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_Delay+0x40>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026a2:	bf00      	nop
 80026a4:	f7ff ffe0 	bl	8002668 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <HAL_Delay+0x28>
  {
  }
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000008 	.word	0x20000008

080026c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0ce      	b.n	8002880 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fdf6 	bl	80012f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f9bd 	bl	8002a84 <ADC_ConversionStop_Disable>
 800270a:	4603      	mov	r3, r0
 800270c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 80a9 	bne.w	800286e <HAL_ADC_Init+0x1ae>
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 80a5 	bne.w	800286e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800272c:	f023 0302 	bic.w	r3, r3, #2
 8002730:	f043 0202 	orr.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4951      	ldr	r1, [pc, #324]	; (8002888 <HAL_ADC_Init+0x1c8>)
 8002742:	428b      	cmp	r3, r1
 8002744:	d10a      	bne.n	800275c <HAL_ADC_Init+0x9c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800274e:	d002      	beq.n	8002756 <HAL_ADC_Init+0x96>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	e004      	b.n	8002760 <HAL_ADC_Init+0xa0>
 8002756:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800275a:	e001      	b.n	8002760 <HAL_ADC_Init+0xa0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002760:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	7b1b      	ldrb	r3, [r3, #12]
 8002766:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002768:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4313      	orrs	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002778:	d003      	beq.n	8002782 <HAL_ADC_Init+0xc2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_ADC_Init+0xc8>
 8002782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002786:	e000      	b.n	800278a <HAL_ADC_Init+0xca>
 8002788:	2300      	movs	r3, #0
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7d1b      	ldrb	r3, [r3, #20]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d119      	bne.n	80027cc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7b1b      	ldrb	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	035a      	lsls	r2, r3, #13
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	e00b      	b.n	80027cc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	430a      	orrs	r2, r1
 80027de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_ADC_Init+0x1cc>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fc:	d003      	beq.n	8002806 <HAL_ADC_Init+0x146>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d104      	bne.n	8002810 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	3b01      	subs	r3, #1
 800280c:	051b      	lsls	r3, r3, #20
 800280e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	430a      	orrs	r2, r1
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_ADC_Init+0x1d0>)
 800282c:	4013      	ands	r3, r2
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d10b      	bne.n	800284c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800284a:	e018      	b.n	800287e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	f023 0312 	bic.w	r3, r3, #18
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800286c:	e007      	b.n	800287e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	f043 0210 	orr.w	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40013c00 	.word	0x40013c00
 800288c:	ffe1f7fd 	.word	0xffe1f7fd
 8002890:	ff1f0efe 	.word	0xff1f0efe

08002894 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x20>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e0dc      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x1da>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d81c      	bhi.n	80028fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	3b05      	subs	r3, #5
 80028d6:	221f      	movs	r2, #31
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	4019      	ands	r1, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b05      	subs	r3, #5
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34
 80028fc:	e03c      	b.n	8002978 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d81c      	bhi.n	8002940 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3b23      	subs	r3, #35	; 0x23
 8002918:	221f      	movs	r2, #31
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	4019      	ands	r1, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b23      	subs	r3, #35	; 0x23
 8002932:	fa00 f203 	lsl.w	r2, r0, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
 800293e:	e01b      	b.n	8002978 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b41      	subs	r3, #65	; 0x41
 8002952:	221f      	movs	r2, #31
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	4019      	ands	r1, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3b41      	subs	r3, #65	; 0x41
 800296c:	fa00 f203 	lsl.w	r2, r0, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b09      	cmp	r3, #9
 800297e:	d91c      	bls.n	80029ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	3b1e      	subs	r3, #30
 8002992:	2207      	movs	r2, #7
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	4019      	ands	r1, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6898      	ldr	r0, [r3, #8]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	3b1e      	subs	r3, #30
 80029ac:	fa00 f203 	lsl.w	r2, r0, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	e019      	b.n	80029ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6919      	ldr	r1, [r3, #16]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	2207      	movs	r2, #7
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4019      	ands	r1, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6898      	ldr	r0, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	fa00 f203 	lsl.w	r2, r0, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d003      	beq.n	80029fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029fa:	2b11      	cmp	r3, #17
 80029fc:	d132      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d125      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d126      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a24:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	d11a      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_ADC_ConfigChannel+0x1e8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	0c9a      	lsrs	r2, r3, #18
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a44:	e002      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f9      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x1b2>
 8002a52:	e007      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f043 0220 	orr.w	r2, r3, #32
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40012400 	.word	0x40012400
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	431bde83 	.word	0x431bde83

08002a84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d127      	bne.n	8002aee <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aae:	f7ff fddb 	bl	8002668 <HAL_GetTick>
 8002ab2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ab4:	e014      	b.n	8002ae0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ab6:	f7ff fdd7 	bl	8002668 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d90d      	bls.n	8002ae0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	f043 0210 	orr.w	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d0e3      	beq.n	8002ab6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0ed      	b.n	8002ce6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe fc5c 	bl	80013d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0202 	bic.w	r2, r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7ff fd9c 	bl	8002668 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b32:	e012      	b.n	8002b5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b34:	f7ff fd98 	bl	8002668 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b0a      	cmp	r3, #10
 8002b40:	d90b      	bls.n	8002b5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2205      	movs	r2, #5
 8002b52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e0c5      	b.n	8002ce6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e5      	bne.n	8002b34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b78:	f7ff fd76 	bl	8002668 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b7e:	e012      	b.n	8002ba6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b80:	f7ff fd72 	bl	8002668 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b0a      	cmp	r3, #10
 8002b8c:	d90b      	bls.n	8002ba6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2205      	movs	r2, #5
 8002b9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e09f      	b.n	8002ce6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0e5      	beq.n	8002b80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e1b      	ldrb	r3, [r3, #24]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d108      	bne.n	8002bce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e007      	b.n	8002bde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7e5b      	ldrb	r3, [r3, #25]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d108      	bne.n	8002bf8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e007      	b.n	8002c08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7e9b      	ldrb	r3, [r3, #26]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d108      	bne.n	8002c22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0220 	orr.w	r2, r2, #32
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e007      	b.n	8002c32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0220 	bic.w	r2, r2, #32
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7edb      	ldrb	r3, [r3, #27]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d108      	bne.n	8002c4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0210 	bic.w	r2, r2, #16
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e007      	b.n	8002c5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0210 	orr.w	r2, r2, #16
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7f1b      	ldrb	r3, [r3, #28]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d108      	bne.n	8002c76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0208 	orr.w	r2, r2, #8
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e007      	b.n	8002c86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0208 	bic.w	r2, r2, #8
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7f5b      	ldrb	r3, [r3, #29]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d108      	bne.n	8002ca0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0204 	orr.w	r2, r2, #4
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e007      	b.n	8002cb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0204 	bic.w	r2, r2, #4
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	ea42 0103 	orr.w	r1, r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b087      	sub	sp, #28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d06:	7cfb      	ldrb	r3, [r7, #19]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d003      	beq.n	8002d14 <HAL_CAN_ConfigFilter+0x26>
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	f040 80aa 	bne.w	8002e68 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d123      	bne.n	8002d96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	401a      	ands	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3248      	adds	r2, #72	; 0x48
 8002d76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d8c:	6979      	ldr	r1, [r7, #20]
 8002d8e:	3348      	adds	r3, #72	; 0x48
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d122      	bne.n	8002de4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002dbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3248      	adds	r2, #72	; 0x48
 8002dc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dda:	6979      	ldr	r1, [r7, #20]
 8002ddc:	3348      	adds	r3, #72	; 0x48
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	401a      	ands	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002dfe:	e007      	b.n	8002e10 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	401a      	ands	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e2a:	e007      	b.n	8002e3c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e5a:	f023 0201 	bic.w	r2, r3, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e006      	b.n	8002e76 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d12e      	bne.n	8002ef2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eac:	f7ff fbdc 	bl	8002668 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eb2:	e012      	b.n	8002eda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb4:	f7ff fbd8 	bl	8002668 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b0a      	cmp	r3, #10
 8002ec0:	d90b      	bls.n	8002eda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2205      	movs	r2, #5
 8002ed2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e012      	b.n	8002f00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e5      	bne.n	8002eb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e006      	b.n	8002f00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d003      	beq.n	8002f34 <HAL_CAN_AddTxMessage+0x2c>
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	f040 80b8 	bne.w	80030a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80a0 	beq.w	8003094 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	0e1b      	lsrs	r3, r3, #24
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d907      	bls.n	8002f74 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e09e      	b.n	80030b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f74:	2201      	movs	r2, #1
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3318      	adds	r3, #24
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	440b      	add	r3, r1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e00f      	b.n	8002fc2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002fb6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3318      	adds	r3, #24
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	440b      	add	r3, r1
 8002fc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3318      	adds	r3, #24
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	7d1b      	ldrb	r3, [r3, #20]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d111      	bne.n	8003002 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3318      	adds	r3, #24
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	6811      	ldr	r1, [r2, #0]
 8002ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3318      	adds	r3, #24
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3304      	adds	r3, #4
 8003000:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3307      	adds	r3, #7
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	061a      	lsls	r2, r3, #24
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3306      	adds	r3, #6
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3305      	adds	r3, #5
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4313      	orrs	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	3204      	adds	r2, #4
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	4610      	mov	r0, r2
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	6811      	ldr	r1, [r2, #0]
 800302a:	ea43 0200 	orr.w	r2, r3, r0
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	440b      	add	r3, r1
 8003034:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003038:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3303      	adds	r3, #3
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	061a      	lsls	r2, r3, #24
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3302      	adds	r3, #2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3301      	adds	r3, #1
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	4313      	orrs	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	4610      	mov	r0, r2
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	6811      	ldr	r1, [r2, #0]
 8003060:	ea43 0200 	orr.w	r2, r3, r0
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	440b      	add	r3, r1
 800306a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800306e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3318      	adds	r3, #24
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	4413      	add	r3, r2
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	6811      	ldr	r1, [r2, #0]
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3318      	adds	r3, #24
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	440b      	add	r3, r1
 800308e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e00e      	b.n	80030b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e006      	b.n	80030b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
  }
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d003      	beq.n	80030e0 <HAL_CAN_GetRxMessage+0x24>
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	f040 80f3 	bne.w	80032c6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10e      	bne.n	8003104 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d116      	bne.n	8003122 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0e7      	b.n	80032d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0d8      	b.n	80032d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	331b      	adds	r3, #27
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	4413      	add	r3, r2
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0204 	and.w	r2, r3, #4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10c      	bne.n	800315a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	331b      	adds	r3, #27
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	4413      	add	r3, r2
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	0d5b      	lsrs	r3, r3, #21
 8003150:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e00b      	b.n	8003172 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	331b      	adds	r3, #27
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	4413      	add	r3, r2
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	331b      	adds	r3, #27
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	4413      	add	r3, r2
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0202 	and.w	r2, r3, #2
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	331b      	adds	r3, #27
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	331b      	adds	r3, #27
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	331b      	adds	r3, #27
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	4413      	add	r3, r2
 80031c4:	3304      	adds	r3, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	4413      	add	r3, r2
 80031da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	0a1a      	lsrs	r2, r3, #8
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	4413      	add	r3, r2
 800320a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	0c1a      	lsrs	r2, r3, #16
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	3302      	adds	r3, #2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	4413      	add	r3, r2
 8003224:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0e1a      	lsrs	r2, r3, #24
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	3303      	adds	r3, #3
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	4413      	add	r3, r2
 800323e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	3304      	adds	r3, #4
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	4413      	add	r3, r2
 8003256:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0a1a      	lsrs	r2, r3, #8
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	3305      	adds	r3, #5
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	4413      	add	r3, r2
 8003270:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0c1a      	lsrs	r2, r3, #16
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	3306      	adds	r3, #6
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	0e1a      	lsrs	r2, r3, #24
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	3307      	adds	r3, #7
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d108      	bne.n	80032b2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0220 	orr.w	r2, r2, #32
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	e007      	b.n	80032c2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0220 	orr.w	r2, r2, #32
 80032c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e006      	b.n	80032d4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d002      	beq.n	80032fc <HAL_CAN_ActivateNotification+0x1e>
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d109      	bne.n	8003310 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6959      	ldr	r1, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e006      	b.n	800331e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d07c      	beq.n	8003468 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d023      	beq.n	80033c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2201      	movs	r2, #1
 800337e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f97d 	bl	800368a <HAL_CAN_TxMailbox0CompleteCallback>
 8003390:	e016      	b.n	80033c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
 80033a4:	e00c      	b.n	80033c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	e002      	b.n	80033c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f980 	bl	80036c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d024      	beq.n	8003414 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f95c 	bl	800369c <HAL_CAN_TxMailbox1CompleteCallback>
 80033e4:	e016      	b.n	8003414 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
 80033f8:	e00c      	b.n	8003414 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	e002      	b.n	8003414 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f95f 	bl	80036d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d024      	beq.n	8003468 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003426:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f93b 	bl	80036ae <HAL_CAN_TxMailbox2CompleteCallback>
 8003438:	e016      	b.n	8003468 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
 800344c:	e00c      	b.n	8003468 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
 8003460:	e002      	b.n	8003468 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f93e 	bl	80036e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003482:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2210      	movs	r2, #16
 800348a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2208      	movs	r2, #8
 80034a6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f924 	bl	80036f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe f81c 	bl	8001504 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2210      	movs	r2, #16
 80034ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d006      	beq.n	8003512 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2208      	movs	r2, #8
 800350a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f904 	bl	800371a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d009      	beq.n	8003530 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8ec 	bl	8003708 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2210      	movs	r2, #16
 800354a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f8ed 	bl	800372c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00b      	beq.n	8003574 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2208      	movs	r2, #8
 800356c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8e5 	bl	800373e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d075      	beq.n	800366a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d06c      	beq.n	8003662 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d03d      	beq.n	8003662 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d038      	beq.n	8003662 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035f6:	2b30      	cmp	r3, #48	; 0x30
 80035f8:	d017      	beq.n	800362a <HAL_CAN_IRQHandler+0x302>
 80035fa:	2b30      	cmp	r3, #48	; 0x30
 80035fc:	d804      	bhi.n	8003608 <HAL_CAN_IRQHandler+0x2e0>
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d009      	beq.n	8003616 <HAL_CAN_IRQHandler+0x2ee>
 8003602:	2b20      	cmp	r3, #32
 8003604:	d00c      	beq.n	8003620 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003606:	e024      	b.n	8003652 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003608:	2b50      	cmp	r3, #80	; 0x50
 800360a:	d018      	beq.n	800363e <HAL_CAN_IRQHandler+0x316>
 800360c:	2b60      	cmp	r3, #96	; 0x60
 800360e:	d01b      	beq.n	8003648 <HAL_CAN_IRQHandler+0x320>
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d00f      	beq.n	8003634 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003614:	e01d      	b.n	8003652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	f043 0308 	orr.w	r3, r3, #8
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800361e:	e018      	b.n	8003652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	f043 0310 	orr.w	r3, r3, #16
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003628:	e013      	b.n	8003652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	f043 0320 	orr.w	r3, r3, #32
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003632:	e00e      	b.n	8003652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800363c:	e009      	b.n	8003652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003646:	e004      	b.n	8003652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003650:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003660:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2204      	movs	r2, #4
 8003668:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f867 	bl	8003750 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003682:	bf00      	nop
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
	...

08003764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800378c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	60d3      	str	r3, [r2, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <__NVIC_GetPriorityGrouping+0x18>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0307 	and.w	r3, r3, #7
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db0b      	blt.n	80037f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4906      	ldr	r1, [pc, #24]	; (80037fc <__NVIC_EnableIRQ+0x34>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2001      	movs	r0, #1
 80037ea:	fa00 f202 	lsl.w	r2, r0, r2
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100

08003800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003810:	2b00      	cmp	r3, #0
 8003812:	db0a      	blt.n	800382a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	490c      	ldr	r1, [pc, #48]	; (800384c <__NVIC_SetPriority+0x4c>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	440b      	add	r3, r1
 8003824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003828:	e00a      	b.n	8003840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4908      	ldr	r1, [pc, #32]	; (8003850 <__NVIC_SetPriority+0x50>)
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	3b04      	subs	r3, #4
 8003838:	0112      	lsls	r2, r2, #4
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	440b      	add	r3, r1
 800383e:	761a      	strb	r2, [r3, #24]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	e000e100 	.word	0xe000e100
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f1c3 0307 	rsb	r3, r3, #7
 800386e:	2b04      	cmp	r3, #4
 8003870:	bf28      	it	cs
 8003872:	2304      	movcs	r3, #4
 8003874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3304      	adds	r3, #4
 800387a:	2b06      	cmp	r3, #6
 800387c:	d902      	bls.n	8003884 <NVIC_EncodePriority+0x30>
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3b03      	subs	r3, #3
 8003882:	e000      	b.n	8003886 <NVIC_EncodePriority+0x32>
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	f04f 32ff 	mov.w	r2, #4294967295
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	401a      	ands	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800389c:	f04f 31ff 	mov.w	r1, #4294967295
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	43d9      	mvns	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	4313      	orrs	r3, r2
         );
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7ff ff90 	bl	8003800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff2d 	bl	8003764 <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003924:	f7ff ff42 	bl	80037ac <__NVIC_GetPriorityGrouping>
 8003928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff90 	bl	8003854 <NVIC_EncodePriority>
 8003934:	4602      	mov	r2, r0
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5f 	bl	8003800 <__NVIC_SetPriority>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff35 	bl	80037c8 <__NVIC_EnableIRQ>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ffa2 	bl	80038b8 <SysTick_Config>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e00e      	b.n	80039ae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	795b      	ldrb	r3, [r3, #5]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fd fe7f 	bl	80016a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e014      	b.n	80039f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	791b      	ldrb	r3, [r3, #4]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d105      	bne.n	80039de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fd feab 	bl	8001734 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	795b      	ldrb	r3, [r3, #5]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_DAC_Start+0x16>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e040      	b.n	8003a92 <HAL_DAC_Start+0x98>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2201      	movs	r2, #1
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003a44:	2b3c      	cmp	r3, #60	; 0x3c
 8003a46:	d11d      	bne.n	8003a84 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	e014      	b.n	8003a84 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	213c      	movs	r1, #60	; 0x3c
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d107      	bne.n	8003a84 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0202 	orr.w	r2, r2, #2
 8003a82:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e004      	b.n	8003ad0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	3314      	adds	r3, #20
 8003ace:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	795b      	ldrb	r3, [r3, #5]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_DAC_ConfigChannel+0x18>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e04a      	b.n	8003b92 <HAL_DAC_ConfigChannel+0xae>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2202      	movs	r2, #2
 8003b06:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4013      	ands	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	22c0      	movs	r2, #192	; 0xc0
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	400a      	ands	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6819      	ldr	r1, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	22c0      	movs	r2, #192	; 0xc0
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	400a      	ands	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e059      	b.n	8003c66 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_DMA_Init+0xd4>)
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d80f      	bhi.n	8003bde <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <HAL_DMA_Init+0xd8>)
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a2b      	ldr	r2, [pc, #172]	; (8003c78 <HAL_DMA_Init+0xdc>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	009a      	lsls	r2, r3, #2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <HAL_DMA_Init+0xe0>)
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bdc:	e00e      	b.n	8003bfc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b26      	ldr	r3, [pc, #152]	; (8003c80 <HAL_DMA_Init+0xe4>)
 8003be6:	4413      	add	r3, r2
 8003be8:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <HAL_DMA_Init+0xdc>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	009a      	lsls	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <HAL_DMA_Init+0xe8>)
 8003bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr
 8003c70:	40020407 	.word	0x40020407
 8003c74:	bffdfff8 	.word	0xbffdfff8
 8003c78:	cccccccd 	.word	0xcccccccd
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	bffdfbf8 	.word	0xbffdfbf8
 8003c84:	40020400 	.word	0x40020400

08003c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_DMA_Start_IT+0x20>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e04a      	b.n	8003d3e <HAL_DMA_Start_IT+0xb6>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d13a      	bne.n	8003d30 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fbb0 	bl	8004444 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 020e 	orr.w	r2, r2, #14
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e00f      	b.n	8003d1e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0204 	bic.w	r2, r2, #4
 8003d0c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 020a 	orr.w	r2, r2, #10
 8003d1c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e005      	b.n	8003d3c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d008      	beq.n	8003d6e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e020      	b.n	8003db0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 020e 	bic.w	r2, r2, #14
 8003d7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
	...

08003dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d005      	beq.n	8003dde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	e0d6      	b.n	8003f8c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 020e 	bic.w	r2, r2, #14
 8003dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b64      	ldr	r3, [pc, #400]	; (8003f98 <HAL_DMA_Abort_IT+0x1dc>)
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d958      	bls.n	8003ebc <HAL_DMA_Abort_IT+0x100>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a63      	ldr	r2, [pc, #396]	; (8003f9c <HAL_DMA_Abort_IT+0x1e0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d04f      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0xf8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a61      	ldr	r2, [pc, #388]	; (8003fa0 <HAL_DMA_Abort_IT+0x1e4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d048      	beq.n	8003eb0 <HAL_DMA_Abort_IT+0xf4>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a60      	ldr	r2, [pc, #384]	; (8003fa4 <HAL_DMA_Abort_IT+0x1e8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d040      	beq.n	8003eaa <HAL_DMA_Abort_IT+0xee>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5e      	ldr	r2, [pc, #376]	; (8003fa8 <HAL_DMA_Abort_IT+0x1ec>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d038      	beq.n	8003ea4 <HAL_DMA_Abort_IT+0xe8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a5d      	ldr	r2, [pc, #372]	; (8003fac <HAL_DMA_Abort_IT+0x1f0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d030      	beq.n	8003e9e <HAL_DMA_Abort_IT+0xe2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5b      	ldr	r2, [pc, #364]	; (8003fb0 <HAL_DMA_Abort_IT+0x1f4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d028      	beq.n	8003e98 <HAL_DMA_Abort_IT+0xdc>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a53      	ldr	r2, [pc, #332]	; (8003f98 <HAL_DMA_Abort_IT+0x1dc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d020      	beq.n	8003e92 <HAL_DMA_Abort_IT+0xd6>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a57      	ldr	r2, [pc, #348]	; (8003fb4 <HAL_DMA_Abort_IT+0x1f8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d019      	beq.n	8003e8e <HAL_DMA_Abort_IT+0xd2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a56      	ldr	r2, [pc, #344]	; (8003fb8 <HAL_DMA_Abort_IT+0x1fc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d012      	beq.n	8003e8a <HAL_DMA_Abort_IT+0xce>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a54      	ldr	r2, [pc, #336]	; (8003fbc <HAL_DMA_Abort_IT+0x200>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00a      	beq.n	8003e84 <HAL_DMA_Abort_IT+0xc8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a53      	ldr	r2, [pc, #332]	; (8003fc0 <HAL_DMA_Abort_IT+0x204>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d102      	bne.n	8003e7e <HAL_DMA_Abort_IT+0xc2>
 8003e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e7c:	e01b      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e82:	e018      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e88:	e015      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003e8a:	2310      	movs	r3, #16
 8003e8c:	e013      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e011      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e96:	e00e      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003e98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e9c:	e00b      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ea2:	e008      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea8:	e005      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eae:	e002      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	e000      	b.n	8003eb6 <HAL_DMA_Abort_IT+0xfa>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	4a43      	ldr	r2, [pc, #268]	; (8003fc4 <HAL_DMA_Abort_IT+0x208>)
 8003eb8:	6053      	str	r3, [r2, #4]
 8003eba:	e057      	b.n	8003f6c <HAL_DMA_Abort_IT+0x1b0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a36      	ldr	r2, [pc, #216]	; (8003f9c <HAL_DMA_Abort_IT+0x1e0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d04f      	beq.n	8003f66 <HAL_DMA_Abort_IT+0x1aa>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a35      	ldr	r2, [pc, #212]	; (8003fa0 <HAL_DMA_Abort_IT+0x1e4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d048      	beq.n	8003f62 <HAL_DMA_Abort_IT+0x1a6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a33      	ldr	r2, [pc, #204]	; (8003fa4 <HAL_DMA_Abort_IT+0x1e8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d040      	beq.n	8003f5c <HAL_DMA_Abort_IT+0x1a0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a32      	ldr	r2, [pc, #200]	; (8003fa8 <HAL_DMA_Abort_IT+0x1ec>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d038      	beq.n	8003f56 <HAL_DMA_Abort_IT+0x19a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <HAL_DMA_Abort_IT+0x1f0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d030      	beq.n	8003f50 <HAL_DMA_Abort_IT+0x194>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <HAL_DMA_Abort_IT+0x1f4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d028      	beq.n	8003f4a <HAL_DMA_Abort_IT+0x18e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <HAL_DMA_Abort_IT+0x1dc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d020      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x188>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2b      	ldr	r2, [pc, #172]	; (8003fb4 <HAL_DMA_Abort_IT+0x1f8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d019      	beq.n	8003f40 <HAL_DMA_Abort_IT+0x184>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_DMA_Abort_IT+0x1fc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d012      	beq.n	8003f3c <HAL_DMA_Abort_IT+0x180>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <HAL_DMA_Abort_IT+0x200>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00a      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x17a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <HAL_DMA_Abort_IT+0x204>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d102      	bne.n	8003f30 <HAL_DMA_Abort_IT+0x174>
 8003f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f2e:	e01b      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f34:	e018      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3a:	e015      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	e013      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e011      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f48:	e00e      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f4e:	e00b      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f54:	e008      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f5a:	e005      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f60:	e002      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f62:	2310      	movs	r3, #16
 8003f64:	e000      	b.n	8003f68 <HAL_DMA_Abort_IT+0x1ac>
 8003f66:	2301      	movs	r3, #1
 8003f68:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <HAL_DMA_Abort_IT+0x20c>)
 8003f6a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
    } 
  }
  return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40020080 	.word	0x40020080
 8003f9c:	40020008 	.word	0x40020008
 8003fa0:	4002001c 	.word	0x4002001c
 8003fa4:	40020030 	.word	0x40020030
 8003fa8:	40020044 	.word	0x40020044
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	4002006c 	.word	0x4002006c
 8003fb4:	40020408 	.word	0x40020408
 8003fb8:	4002041c 	.word	0x4002041c
 8003fbc:	40020430 	.word	0x40020430
 8003fc0:	40020444 	.word	0x40020444
 8003fc4:	40020400 	.word	0x40020400
 8003fc8:	40020000 	.word	0x40020000

08003fcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	2204      	movs	r2, #4
 8003fea:	409a      	lsls	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80d6 	beq.w	80041a2 <HAL_DMA_IRQHandler+0x1d6>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80d0 	beq.w	80041a2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d107      	bne.n	8004020 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0204 	bic.w	r2, r2, #4
 800401e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	4b9b      	ldr	r3, [pc, #620]	; (8004294 <HAL_DMA_IRQHandler+0x2c8>)
 8004028:	429a      	cmp	r2, r3
 800402a:	d958      	bls.n	80040de <HAL_DMA_IRQHandler+0x112>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a99      	ldr	r2, [pc, #612]	; (8004298 <HAL_DMA_IRQHandler+0x2cc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d04f      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x10a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a98      	ldr	r2, [pc, #608]	; (800429c <HAL_DMA_IRQHandler+0x2d0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d048      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x106>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a96      	ldr	r2, [pc, #600]	; (80042a0 <HAL_DMA_IRQHandler+0x2d4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d040      	beq.n	80040cc <HAL_DMA_IRQHandler+0x100>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a95      	ldr	r2, [pc, #596]	; (80042a4 <HAL_DMA_IRQHandler+0x2d8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d038      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xfa>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a93      	ldr	r2, [pc, #588]	; (80042a8 <HAL_DMA_IRQHandler+0x2dc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d030      	beq.n	80040c0 <HAL_DMA_IRQHandler+0xf4>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a92      	ldr	r2, [pc, #584]	; (80042ac <HAL_DMA_IRQHandler+0x2e0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d028      	beq.n	80040ba <HAL_DMA_IRQHandler+0xee>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a89      	ldr	r2, [pc, #548]	; (8004294 <HAL_DMA_IRQHandler+0x2c8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d020      	beq.n	80040b4 <HAL_DMA_IRQHandler+0xe8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a8e      	ldr	r2, [pc, #568]	; (80042b0 <HAL_DMA_IRQHandler+0x2e4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d019      	beq.n	80040b0 <HAL_DMA_IRQHandler+0xe4>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a8c      	ldr	r2, [pc, #560]	; (80042b4 <HAL_DMA_IRQHandler+0x2e8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d012      	beq.n	80040ac <HAL_DMA_IRQHandler+0xe0>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a8b      	ldr	r2, [pc, #556]	; (80042b8 <HAL_DMA_IRQHandler+0x2ec>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00a      	beq.n	80040a6 <HAL_DMA_IRQHandler+0xda>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a89      	ldr	r2, [pc, #548]	; (80042bc <HAL_DMA_IRQHandler+0x2f0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d102      	bne.n	80040a0 <HAL_DMA_IRQHandler+0xd4>
 800409a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800409e:	e01b      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80040a4:	e018      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040aa:	e015      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	e013      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040b0:	2304      	movs	r3, #4
 80040b2:	e011      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80040b8:	e00e      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040be:	e00b      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80040c4:	e008      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040ca:	e005      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040d0:	e002      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040d2:	2340      	movs	r3, #64	; 0x40
 80040d4:	e000      	b.n	80040d8 <HAL_DMA_IRQHandler+0x10c>
 80040d6:	2304      	movs	r3, #4
 80040d8:	4a79      	ldr	r2, [pc, #484]	; (80042c0 <HAL_DMA_IRQHandler+0x2f4>)
 80040da:	6053      	str	r3, [r2, #4]
 80040dc:	e057      	b.n	800418e <HAL_DMA_IRQHandler+0x1c2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6d      	ldr	r2, [pc, #436]	; (8004298 <HAL_DMA_IRQHandler+0x2cc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d04f      	beq.n	8004188 <HAL_DMA_IRQHandler+0x1bc>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a6b      	ldr	r2, [pc, #428]	; (800429c <HAL_DMA_IRQHandler+0x2d0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d048      	beq.n	8004184 <HAL_DMA_IRQHandler+0x1b8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a6a      	ldr	r2, [pc, #424]	; (80042a0 <HAL_DMA_IRQHandler+0x2d4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d040      	beq.n	800417e <HAL_DMA_IRQHandler+0x1b2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a68      	ldr	r2, [pc, #416]	; (80042a4 <HAL_DMA_IRQHandler+0x2d8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d038      	beq.n	8004178 <HAL_DMA_IRQHandler+0x1ac>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a67      	ldr	r2, [pc, #412]	; (80042a8 <HAL_DMA_IRQHandler+0x2dc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d030      	beq.n	8004172 <HAL_DMA_IRQHandler+0x1a6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a65      	ldr	r2, [pc, #404]	; (80042ac <HAL_DMA_IRQHandler+0x2e0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d028      	beq.n	800416c <HAL_DMA_IRQHandler+0x1a0>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a5d      	ldr	r2, [pc, #372]	; (8004294 <HAL_DMA_IRQHandler+0x2c8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d020      	beq.n	8004166 <HAL_DMA_IRQHandler+0x19a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a61      	ldr	r2, [pc, #388]	; (80042b0 <HAL_DMA_IRQHandler+0x2e4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d019      	beq.n	8004162 <HAL_DMA_IRQHandler+0x196>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a60      	ldr	r2, [pc, #384]	; (80042b4 <HAL_DMA_IRQHandler+0x2e8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d012      	beq.n	800415e <HAL_DMA_IRQHandler+0x192>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a5e      	ldr	r2, [pc, #376]	; (80042b8 <HAL_DMA_IRQHandler+0x2ec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00a      	beq.n	8004158 <HAL_DMA_IRQHandler+0x18c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a5d      	ldr	r2, [pc, #372]	; (80042bc <HAL_DMA_IRQHandler+0x2f0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d102      	bne.n	8004152 <HAL_DMA_IRQHandler+0x186>
 800414c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004150:	e01b      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 8004152:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004156:	e018      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 8004158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415c:	e015      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 800415e:	2340      	movs	r3, #64	; 0x40
 8004160:	e013      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 8004162:	2304      	movs	r3, #4
 8004164:	e011      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 8004166:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800416a:	e00e      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 800416c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004170:	e00b      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 8004172:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004176:	e008      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 8004178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800417c:	e005      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 800417e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004182:	e002      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	e000      	b.n	800418a <HAL_DMA_IRQHandler+0x1be>
 8004188:	2304      	movs	r3, #4
 800418a:	4a4e      	ldr	r2, [pc, #312]	; (80042c4 <HAL_DMA_IRQHandler+0x2f8>)
 800418c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8136 	beq.w	8004404 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80041a0:	e130      	b.n	8004404 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	2202      	movs	r2, #2
 80041a8:	409a      	lsls	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80f8 	beq.w	80043a4 <HAL_DMA_IRQHandler+0x3d8>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80f2 	beq.w	80043a4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10b      	bne.n	80041e6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 020a 	bic.w	r2, r2, #10
 80041dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b29      	ldr	r3, [pc, #164]	; (8004294 <HAL_DMA_IRQHandler+0x2c8>)
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d973      	bls.n	80042da <HAL_DMA_IRQHandler+0x30e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a28      	ldr	r2, [pc, #160]	; (8004298 <HAL_DMA_IRQHandler+0x2cc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d06a      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x306>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a26      	ldr	r2, [pc, #152]	; (800429c <HAL_DMA_IRQHandler+0x2d0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d063      	beq.n	80042ce <HAL_DMA_IRQHandler+0x302>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a25      	ldr	r2, [pc, #148]	; (80042a0 <HAL_DMA_IRQHandler+0x2d4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d05b      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x2fc>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <HAL_DMA_IRQHandler+0x2d8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d038      	beq.n	800428c <HAL_DMA_IRQHandler+0x2c0>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <HAL_DMA_IRQHandler+0x2dc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d030      	beq.n	8004286 <HAL_DMA_IRQHandler+0x2ba>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a20      	ldr	r2, [pc, #128]	; (80042ac <HAL_DMA_IRQHandler+0x2e0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d028      	beq.n	8004280 <HAL_DMA_IRQHandler+0x2b4>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_DMA_IRQHandler+0x2c8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d020      	beq.n	800427a <HAL_DMA_IRQHandler+0x2ae>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <HAL_DMA_IRQHandler+0x2e4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d019      	beq.n	8004276 <HAL_DMA_IRQHandler+0x2aa>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <HAL_DMA_IRQHandler+0x2e8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d012      	beq.n	8004272 <HAL_DMA_IRQHandler+0x2a6>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a19      	ldr	r2, [pc, #100]	; (80042b8 <HAL_DMA_IRQHandler+0x2ec>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00a      	beq.n	800426c <HAL_DMA_IRQHandler+0x2a0>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a18      	ldr	r2, [pc, #96]	; (80042bc <HAL_DMA_IRQHandler+0x2f0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d102      	bne.n	8004266 <HAL_DMA_IRQHandler+0x29a>
 8004260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004264:	e036      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 8004266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800426a:	e033      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 800426c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004270:	e030      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 8004272:	2320      	movs	r3, #32
 8004274:	e02e      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 8004276:	2302      	movs	r3, #2
 8004278:	e02c      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 800427a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800427e:	e029      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 8004280:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004284:	e026      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 8004286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800428a:	e023      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 800428c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004290:	e020      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 8004292:	bf00      	nop
 8004294:	40020080 	.word	0x40020080
 8004298:	40020008 	.word	0x40020008
 800429c:	4002001c 	.word	0x4002001c
 80042a0:	40020030 	.word	0x40020030
 80042a4:	40020044 	.word	0x40020044
 80042a8:	40020058 	.word	0x40020058
 80042ac:	4002006c 	.word	0x4002006c
 80042b0:	40020408 	.word	0x40020408
 80042b4:	4002041c 	.word	0x4002041c
 80042b8:	40020430 	.word	0x40020430
 80042bc:	40020444 	.word	0x40020444
 80042c0:	40020400 	.word	0x40020400
 80042c4:	40020000 	.word	0x40020000
 80042c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042cc:	e002      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 80042ce:	2320      	movs	r3, #32
 80042d0:	e000      	b.n	80042d4 <HAL_DMA_IRQHandler+0x308>
 80042d2:	2302      	movs	r3, #2
 80042d4:	4a4e      	ldr	r2, [pc, #312]	; (8004410 <HAL_DMA_IRQHandler+0x444>)
 80042d6:	6053      	str	r3, [r2, #4]
 80042d8:	e057      	b.n	800438a <HAL_DMA_IRQHandler+0x3be>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a4d      	ldr	r2, [pc, #308]	; (8004414 <HAL_DMA_IRQHandler+0x448>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d04f      	beq.n	8004384 <HAL_DMA_IRQHandler+0x3b8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a4b      	ldr	r2, [pc, #300]	; (8004418 <HAL_DMA_IRQHandler+0x44c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d048      	beq.n	8004380 <HAL_DMA_IRQHandler+0x3b4>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a4a      	ldr	r2, [pc, #296]	; (800441c <HAL_DMA_IRQHandler+0x450>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d040      	beq.n	800437a <HAL_DMA_IRQHandler+0x3ae>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a48      	ldr	r2, [pc, #288]	; (8004420 <HAL_DMA_IRQHandler+0x454>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d038      	beq.n	8004374 <HAL_DMA_IRQHandler+0x3a8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a47      	ldr	r2, [pc, #284]	; (8004424 <HAL_DMA_IRQHandler+0x458>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d030      	beq.n	800436e <HAL_DMA_IRQHandler+0x3a2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a45      	ldr	r2, [pc, #276]	; (8004428 <HAL_DMA_IRQHandler+0x45c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d028      	beq.n	8004368 <HAL_DMA_IRQHandler+0x39c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a44      	ldr	r2, [pc, #272]	; (800442c <HAL_DMA_IRQHandler+0x460>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d020      	beq.n	8004362 <HAL_DMA_IRQHandler+0x396>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a42      	ldr	r2, [pc, #264]	; (8004430 <HAL_DMA_IRQHandler+0x464>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d019      	beq.n	800435e <HAL_DMA_IRQHandler+0x392>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a41      	ldr	r2, [pc, #260]	; (8004434 <HAL_DMA_IRQHandler+0x468>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d012      	beq.n	800435a <HAL_DMA_IRQHandler+0x38e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a3f      	ldr	r2, [pc, #252]	; (8004438 <HAL_DMA_IRQHandler+0x46c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00a      	beq.n	8004354 <HAL_DMA_IRQHandler+0x388>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a3e      	ldr	r2, [pc, #248]	; (800443c <HAL_DMA_IRQHandler+0x470>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d102      	bne.n	800434e <HAL_DMA_IRQHandler+0x382>
 8004348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800434c:	e01b      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 800434e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004352:	e018      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 8004354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004358:	e015      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 800435a:	2320      	movs	r3, #32
 800435c:	e013      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 800435e:	2302      	movs	r3, #2
 8004360:	e011      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 8004362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004366:	e00e      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 8004368:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800436c:	e00b      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 800436e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004372:	e008      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 8004374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004378:	e005      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 800437a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800437e:	e002      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 8004380:	2320      	movs	r3, #32
 8004382:	e000      	b.n	8004386 <HAL_DMA_IRQHandler+0x3ba>
 8004384:	2302      	movs	r3, #2
 8004386:	4a2e      	ldr	r2, [pc, #184]	; (8004440 <HAL_DMA_IRQHandler+0x474>)
 8004388:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d034      	beq.n	8004404 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043a2:	e02f      	b.n	8004404 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	2208      	movs	r2, #8
 80043aa:	409a      	lsls	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d028      	beq.n	8004406 <HAL_DMA_IRQHandler+0x43a>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d023      	beq.n	8004406 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 020e 	bic.w	r2, r2, #14
 80043cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f202 	lsl.w	r2, r1, r2
 80043dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
    }
  }
  return;
 8004404:	bf00      	nop
 8004406:	bf00      	nop
}
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40020400 	.word	0x40020400
 8004414:	40020008 	.word	0x40020008
 8004418:	4002001c 	.word	0x4002001c
 800441c:	40020030 	.word	0x40020030
 8004420:	40020044 	.word	0x40020044
 8004424:	40020058 	.word	0x40020058
 8004428:	4002006c 	.word	0x4002006c
 800442c:	40020080 	.word	0x40020080
 8004430:	40020408 	.word	0x40020408
 8004434:	4002041c 	.word	0x4002041c
 8004438:	40020430 	.word	0x40020430
 800443c:	40020444 	.word	0x40020444
 8004440:	40020000 	.word	0x40020000

08004444 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	2101      	movs	r1, #1
 800445c:	fa01 f202 	lsl.w	r2, r1, r2
 8004460:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b10      	cmp	r3, #16
 8004470:	d108      	bne.n	8004484 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004482:	e007      	b.n	8004494 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	60da      	str	r2, [r3, #12]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b08b      	sub	sp, #44	; 0x2c
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044ae:	2300      	movs	r3, #0
 80044b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044b2:	e133      	b.n	800471c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044b4:	2201      	movs	r2, #1
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	f040 8122 	bne.w	8004716 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b12      	cmp	r3, #18
 80044d8:	d034      	beq.n	8004544 <HAL_GPIO_Init+0xa4>
 80044da:	2b12      	cmp	r3, #18
 80044dc:	d80d      	bhi.n	80044fa <HAL_GPIO_Init+0x5a>
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d02b      	beq.n	800453a <HAL_GPIO_Init+0x9a>
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d804      	bhi.n	80044f0 <HAL_GPIO_Init+0x50>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d031      	beq.n	800454e <HAL_GPIO_Init+0xae>
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d01c      	beq.n	8004528 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044ee:	e048      	b.n	8004582 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d043      	beq.n	800457c <HAL_GPIO_Init+0xdc>
 80044f4:	2b11      	cmp	r3, #17
 80044f6:	d01b      	beq.n	8004530 <HAL_GPIO_Init+0x90>
          break;
 80044f8:	e043      	b.n	8004582 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80044fa:	4a8f      	ldr	r2, [pc, #572]	; (8004738 <HAL_GPIO_Init+0x298>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d026      	beq.n	800454e <HAL_GPIO_Init+0xae>
 8004500:	4a8d      	ldr	r2, [pc, #564]	; (8004738 <HAL_GPIO_Init+0x298>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d806      	bhi.n	8004514 <HAL_GPIO_Init+0x74>
 8004506:	4a8d      	ldr	r2, [pc, #564]	; (800473c <HAL_GPIO_Init+0x29c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d020      	beq.n	800454e <HAL_GPIO_Init+0xae>
 800450c:	4a8c      	ldr	r2, [pc, #560]	; (8004740 <HAL_GPIO_Init+0x2a0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01d      	beq.n	800454e <HAL_GPIO_Init+0xae>
          break;
 8004512:	e036      	b.n	8004582 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004514:	4a8b      	ldr	r2, [pc, #556]	; (8004744 <HAL_GPIO_Init+0x2a4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d019      	beq.n	800454e <HAL_GPIO_Init+0xae>
 800451a:	4a8b      	ldr	r2, [pc, #556]	; (8004748 <HAL_GPIO_Init+0x2a8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d016      	beq.n	800454e <HAL_GPIO_Init+0xae>
 8004520:	4a8a      	ldr	r2, [pc, #552]	; (800474c <HAL_GPIO_Init+0x2ac>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <HAL_GPIO_Init+0xae>
          break;
 8004526:	e02c      	b.n	8004582 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	623b      	str	r3, [r7, #32]
          break;
 800452e:	e028      	b.n	8004582 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	3304      	adds	r3, #4
 8004536:	623b      	str	r3, [r7, #32]
          break;
 8004538:	e023      	b.n	8004582 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	3308      	adds	r3, #8
 8004540:	623b      	str	r3, [r7, #32]
          break;
 8004542:	e01e      	b.n	8004582 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	330c      	adds	r3, #12
 800454a:	623b      	str	r3, [r7, #32]
          break;
 800454c:	e019      	b.n	8004582 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004556:	2304      	movs	r3, #4
 8004558:	623b      	str	r3, [r7, #32]
          break;
 800455a:	e012      	b.n	8004582 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d105      	bne.n	8004570 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004564:	2308      	movs	r3, #8
 8004566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	611a      	str	r2, [r3, #16]
          break;
 800456e:	e008      	b.n	8004582 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004570:	2308      	movs	r3, #8
 8004572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	615a      	str	r2, [r3, #20]
          break;
 800457a:	e002      	b.n	8004582 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800457c:	2300      	movs	r3, #0
 800457e:	623b      	str	r3, [r7, #32]
          break;
 8004580:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2bff      	cmp	r3, #255	; 0xff
 8004586:	d801      	bhi.n	800458c <HAL_GPIO_Init+0xec>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	e001      	b.n	8004590 <HAL_GPIO_Init+0xf0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2bff      	cmp	r3, #255	; 0xff
 8004596:	d802      	bhi.n	800459e <HAL_GPIO_Init+0xfe>
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	e002      	b.n	80045a4 <HAL_GPIO_Init+0x104>
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	3b08      	subs	r3, #8
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	210f      	movs	r1, #15
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	fa01 f303 	lsl.w	r3, r1, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	401a      	ands	r2, r3
 80045b6:	6a39      	ldr	r1, [r7, #32]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	431a      	orrs	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a2 	beq.w	8004716 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045d2:	4b5f      	ldr	r3, [pc, #380]	; (8004750 <HAL_GPIO_Init+0x2b0>)
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	4a5e      	ldr	r2, [pc, #376]	; (8004750 <HAL_GPIO_Init+0x2b0>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	6193      	str	r3, [r2, #24]
 80045de:	4b5c      	ldr	r3, [pc, #368]	; (8004750 <HAL_GPIO_Init+0x2b0>)
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045ea:	4a5a      	ldr	r2, [pc, #360]	; (8004754 <HAL_GPIO_Init+0x2b4>)
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	089b      	lsrs	r3, r3, #2
 80045f0:	3302      	adds	r3, #2
 80045f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	220f      	movs	r2, #15
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4013      	ands	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a51      	ldr	r2, [pc, #324]	; (8004758 <HAL_GPIO_Init+0x2b8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01f      	beq.n	8004656 <HAL_GPIO_Init+0x1b6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a50      	ldr	r2, [pc, #320]	; (800475c <HAL_GPIO_Init+0x2bc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d019      	beq.n	8004652 <HAL_GPIO_Init+0x1b2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a4f      	ldr	r2, [pc, #316]	; (8004760 <HAL_GPIO_Init+0x2c0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_GPIO_Init+0x1ae>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a4e      	ldr	r2, [pc, #312]	; (8004764 <HAL_GPIO_Init+0x2c4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00d      	beq.n	800464a <HAL_GPIO_Init+0x1aa>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a4d      	ldr	r2, [pc, #308]	; (8004768 <HAL_GPIO_Init+0x2c8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <HAL_GPIO_Init+0x1a6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a4c      	ldr	r2, [pc, #304]	; (800476c <HAL_GPIO_Init+0x2cc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_GPIO_Init+0x1a2>
 800463e:	2305      	movs	r3, #5
 8004640:	e00a      	b.n	8004658 <HAL_GPIO_Init+0x1b8>
 8004642:	2306      	movs	r3, #6
 8004644:	e008      	b.n	8004658 <HAL_GPIO_Init+0x1b8>
 8004646:	2304      	movs	r3, #4
 8004648:	e006      	b.n	8004658 <HAL_GPIO_Init+0x1b8>
 800464a:	2303      	movs	r3, #3
 800464c:	e004      	b.n	8004658 <HAL_GPIO_Init+0x1b8>
 800464e:	2302      	movs	r3, #2
 8004650:	e002      	b.n	8004658 <HAL_GPIO_Init+0x1b8>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <HAL_GPIO_Init+0x1b8>
 8004656:	2300      	movs	r3, #0
 8004658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465a:	f002 0203 	and.w	r2, r2, #3
 800465e:	0092      	lsls	r2, r2, #2
 8004660:	4093      	lsls	r3, r2
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004668:	493a      	ldr	r1, [pc, #232]	; (8004754 <HAL_GPIO_Init+0x2b4>)
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	089b      	lsrs	r3, r3, #2
 800466e:	3302      	adds	r3, #2
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004682:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	493a      	ldr	r1, [pc, #232]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
 800468e:	e006      	b.n	800469e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004690:	4b37      	ldr	r3, [pc, #220]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	43db      	mvns	r3, r3
 8004698:	4935      	ldr	r1, [pc, #212]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 800469a:	4013      	ands	r3, r2
 800469c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	4930      	ldr	r1, [pc, #192]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
 80046b6:	e006      	b.n	80046c6 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046b8:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	43db      	mvns	r3, r3
 80046c0:	492b      	ldr	r1, [pc, #172]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046d2:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	4926      	ldr	r1, [pc, #152]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
 80046de:	e006      	b.n	80046ee <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	4921      	ldr	r1, [pc, #132]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d006      	beq.n	8004708 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	491c      	ldr	r1, [pc, #112]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	60cb      	str	r3, [r1, #12]
 8004706:	e006      	b.n	8004716 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004708:	4b19      	ldr	r3, [pc, #100]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	43db      	mvns	r3, r3
 8004710:	4917      	ldr	r1, [pc, #92]	; (8004770 <HAL_GPIO_Init+0x2d0>)
 8004712:	4013      	ands	r3, r2
 8004714:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	3301      	adds	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	fa22 f303 	lsr.w	r3, r2, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	f47f aec4 	bne.w	80044b4 <HAL_GPIO_Init+0x14>
  }
}
 800472c:	bf00      	nop
 800472e:	372c      	adds	r7, #44	; 0x2c
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	10210000 	.word	0x10210000
 800473c:	10110000 	.word	0x10110000
 8004740:	10120000 	.word	0x10120000
 8004744:	10310000 	.word	0x10310000
 8004748:	10320000 	.word	0x10320000
 800474c:	10220000 	.word	0x10220000
 8004750:	40021000 	.word	0x40021000
 8004754:	40010000 	.word	0x40010000
 8004758:	40010800 	.word	0x40010800
 800475c:	40010c00 	.word	0x40010c00
 8004760:	40011000 	.word	0x40011000
 8004764:	40011400 	.word	0x40011400
 8004768:	40011800 	.word	0x40011800
 800476c:	40011c00 	.word	0x40011c00
 8004770:	40010400 	.word	0x40010400

08004774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	887b      	ldrh	r3, [r7, #2]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
 8004790:	e001      	b.n	8004796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004796:	7bfb      	ldrb	r3, [r7, #15]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr

080047a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	807b      	strh	r3, [r7, #2]
 80047ae:	4613      	mov	r3, r2
 80047b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047b2:	787b      	ldrb	r3, [r7, #1]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047b8:	887a      	ldrh	r2, [r7, #2]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047be:	e003      	b.n	80047c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047c0:	887b      	ldrh	r3, [r7, #2]
 80047c2:	041a      	lsls	r2, r3, #16
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	611a      	str	r2, [r3, #16]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr
	...

080047d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e10f      	b.n	8004a06 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd f8ce 	bl	800199c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2224      	movs	r2, #36	; 0x24
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004818:	f001 fb40 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 800481c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4a7b      	ldr	r2, [pc, #492]	; (8004a10 <HAL_I2C_Init+0x23c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d807      	bhi.n	8004838 <HAL_I2C_Init+0x64>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a7a      	ldr	r2, [pc, #488]	; (8004a14 <HAL_I2C_Init+0x240>)
 800482c:	4293      	cmp	r3, r2
 800482e:	bf94      	ite	ls
 8004830:	2301      	movls	r3, #1
 8004832:	2300      	movhi	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	e006      	b.n	8004846 <HAL_I2C_Init+0x72>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a77      	ldr	r2, [pc, #476]	; (8004a18 <HAL_I2C_Init+0x244>)
 800483c:	4293      	cmp	r3, r2
 800483e:	bf94      	ite	ls
 8004840:	2301      	movls	r3, #1
 8004842:	2300      	movhi	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e0db      	b.n	8004a06 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4a72      	ldr	r2, [pc, #456]	; (8004a1c <HAL_I2C_Init+0x248>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	0c9b      	lsrs	r3, r3, #18
 8004858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a64      	ldr	r2, [pc, #400]	; (8004a10 <HAL_I2C_Init+0x23c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d802      	bhi.n	8004888 <HAL_I2C_Init+0xb4>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	3301      	adds	r3, #1
 8004886:	e009      	b.n	800489c <HAL_I2C_Init+0xc8>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	4a63      	ldr	r2, [pc, #396]	; (8004a20 <HAL_I2C_Init+0x24c>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	099b      	lsrs	r3, r3, #6
 800489a:	3301      	adds	r3, #1
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4956      	ldr	r1, [pc, #344]	; (8004a10 <HAL_I2C_Init+0x23c>)
 80048b8:	428b      	cmp	r3, r1
 80048ba:	d80d      	bhi.n	80048d8 <HAL_I2C_Init+0x104>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1e59      	subs	r1, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ca:	3301      	adds	r3, #1
 80048cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	bf38      	it	cc
 80048d4:	2304      	movcc	r3, #4
 80048d6:	e04f      	b.n	8004978 <HAL_I2C_Init+0x1a4>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d111      	bne.n	8004904 <HAL_I2C_Init+0x130>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1e58      	subs	r0, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	440b      	add	r3, r1
 80048ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e012      	b.n	800492a <HAL_I2C_Init+0x156>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1e58      	subs	r0, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6859      	ldr	r1, [r3, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	0099      	lsls	r1, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	fbb0 f3f3 	udiv	r3, r0, r3
 800491a:	3301      	adds	r3, #1
 800491c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_I2C_Init+0x15e>
 800492e:	2301      	movs	r3, #1
 8004930:	e022      	b.n	8004978 <HAL_I2C_Init+0x1a4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10e      	bne.n	8004958 <HAL_I2C_Init+0x184>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1e58      	subs	r0, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6859      	ldr	r1, [r3, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	440b      	add	r3, r1
 8004948:	fbb0 f3f3 	udiv	r3, r0, r3
 800494c:	3301      	adds	r3, #1
 800494e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004956:	e00f      	b.n	8004978 <HAL_I2C_Init+0x1a4>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	1e58      	subs	r0, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6859      	ldr	r1, [r3, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	0099      	lsls	r1, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	fbb0 f3f3 	udiv	r3, r0, r3
 800496e:	3301      	adds	r3, #1
 8004970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	6809      	ldr	r1, [r1, #0]
 800497c:	4313      	orrs	r3, r2
 800497e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6911      	ldr	r1, [r2, #16]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68d2      	ldr	r2, [r2, #12]
 80049b2:	4311      	orrs	r1, r2
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6812      	ldr	r2, [r2, #0]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	000186a0 	.word	0x000186a0
 8004a14:	001e847f 	.word	0x001e847f
 8004a18:	003d08ff 	.word	0x003d08ff
 8004a1c:	431bde83 	.word	0x431bde83
 8004a20:	10624dd3 	.word	0x10624dd3

08004a24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	817b      	strh	r3, [r7, #10]
 8004a36:	460b      	mov	r3, r1
 8004a38:	813b      	strh	r3, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a3e:	f7fd fe13 	bl	8002668 <HAL_GetTick>
 8004a42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	f040 80d9 	bne.w	8004c04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	2319      	movs	r3, #25
 8004a58:	2201      	movs	r2, #1
 8004a5a:	496d      	ldr	r1, [pc, #436]	; (8004c10 <HAL_I2C_Mem_Write+0x1ec>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fc6b 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e0cc      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_I2C_Mem_Write+0x56>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e0c5      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d007      	beq.n	8004aa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2221      	movs	r2, #33	; 0x21
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2240      	movs	r2, #64	; 0x40
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a4d      	ldr	r2, [pc, #308]	; (8004c14 <HAL_I2C_Mem_Write+0x1f0>)
 8004ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ae2:	88f8      	ldrh	r0, [r7, #6]
 8004ae4:	893a      	ldrh	r2, [r7, #8]
 8004ae6:	8979      	ldrh	r1, [r7, #10]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4603      	mov	r3, r0
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fac6 	bl	8005084 <I2C_RequestMemoryWrite>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d052      	beq.n	8004ba4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e081      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fcec 	bl	80054e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d107      	bne.n	8004b2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e06b      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_I2C_Mem_Write+0x180>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d017      	beq.n	8004ba4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1aa      	bne.n	8004b02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fcd8 	bl	8005566 <I2C_WaitOnBTFFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d107      	bne.n	8004bd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e016      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	00100002 	.word	0x00100002
 8004c14:	ffff0000 	.word	0xffff0000

08004c18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	817b      	strh	r3, [r7, #10]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	813b      	strh	r3, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c32:	f7fd fd19 	bl	8002668 <HAL_GetTick>
 8004c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	f040 8218 	bne.w	8005076 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2319      	movs	r3, #25
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	4981      	ldr	r1, [pc, #516]	; (8004e54 <HAL_I2C_Mem_Read+0x23c>)
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fb71 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e20b      	b.n	8005078 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_I2C_Mem_Read+0x56>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e204      	b.n	8005078 <HAL_I2C_Mem_Read+0x460>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d007      	beq.n	8004c94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2222      	movs	r2, #34	; 0x22
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2240      	movs	r2, #64	; 0x40
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a61      	ldr	r2, [pc, #388]	; (8004e58 <HAL_I2C_Mem_Read+0x240>)
 8004cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cd6:	88f8      	ldrh	r0, [r7, #6]
 8004cd8:	893a      	ldrh	r2, [r7, #8]
 8004cda:	8979      	ldrh	r1, [r7, #10]
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fa56 	bl	8005198 <I2C_RequestMemoryRead>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e1c0      	b.n	8005078 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d113      	bne.n	8004d26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	623b      	str	r3, [r7, #32]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	623b      	str	r3, [r7, #32]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	623b      	str	r3, [r7, #32]
 8004d12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e194      	b.n	8005050 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d11d      	bne.n	8004d6a <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d3e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d40:	2300      	movs	r3, #0
 8004d42:	61fb      	str	r3, [r7, #28]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d66:	b662      	cpsie	i
 8004d68:	e172      	b.n	8005050 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d11d      	bne.n	8004dae <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d82:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d84:	2300      	movs	r3, #0
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004daa:	b662      	cpsie	i
 8004dac:	e150      	b.n	8005050 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dbc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004dd4:	e13c      	b.n	8005050 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	f200 80f5 	bhi.w	8004fca <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d123      	bne.n	8004e30 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fbfb 	bl	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e13d      	b.n	8005078 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e2e:	e10f      	b.n	8005050 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d150      	bne.n	8004eda <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	2200      	movs	r2, #0
 8004e40:	4906      	ldr	r1, [pc, #24]	; (8004e5c <HAL_I2C_Mem_Read+0x244>)
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fa78 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e112      	b.n	8005078 <HAL_I2C_Mem_Read+0x460>
 8004e52:	bf00      	nop
 8004e54:	00100002 	.word	0x00100002
 8004e58:	ffff0000 	.word	0xffff0000
 8004e5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e60:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e70:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ea4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed8:	e0ba      	b.n	8005050 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4967      	ldr	r1, [pc, #412]	; (8005080 <HAL_I2C_Mem_Read+0x468>)
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fa27 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0c1      	b.n	8005078 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f04:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	2200      	movs	r2, #0
 8004f40:	494f      	ldr	r1, [pc, #316]	; (8005080 <HAL_I2C_Mem_Read+0x468>)
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f9f8 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e092      	b.n	8005078 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f60:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f94:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fc8:	e042      	b.n	8005050 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fb0a 	bl	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e04c      	b.n	8005078 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b04      	cmp	r3, #4
 800501c:	d118      	bne.n	8005050 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	f47f aebe 	bne.w	8004dd6 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
  }
}
 8005078:	4618      	mov	r0, r3
 800507a:	3728      	adds	r7, #40	; 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	00010004 	.word	0x00010004

08005084 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	4603      	mov	r3, r0
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	460b      	mov	r3, r1
 8005098:	813b      	strh	r3, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f93c 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e05f      	b.n	800518a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050ca:	897b      	ldrh	r3, [r7, #10]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	492d      	ldr	r1, [pc, #180]	; (8005194 <I2C_RequestMemoryWrite+0x110>)
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f980 	bl	80053e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e04c      	b.n	800518a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	6a39      	ldr	r1, [r7, #32]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f9ea 	bl	80054e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00d      	beq.n	8005132 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	2b04      	cmp	r3, #4
 800511c:	d107      	bne.n	800512e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800512c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e02b      	b.n	800518a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d105      	bne.n	8005144 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005138:	893b      	ldrh	r3, [r7, #8]
 800513a:	b2da      	uxtb	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	611a      	str	r2, [r3, #16]
 8005142:	e021      	b.n	8005188 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005144:	893b      	ldrh	r3, [r7, #8]
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	b29b      	uxth	r3, r3
 800514a:	b2da      	uxtb	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	6a39      	ldr	r1, [r7, #32]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f9c4 	bl	80054e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	2b04      	cmp	r3, #4
 8005168:	d107      	bne.n	800517a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e005      	b.n	800518a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800517e:	893b      	ldrh	r3, [r7, #8]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	00010002 	.word	0x00010002

08005198 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	4608      	mov	r0, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	461a      	mov	r2, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	817b      	strh	r3, [r7, #10]
 80051aa:	460b      	mov	r3, r1
 80051ac:	813b      	strh	r3, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	2200      	movs	r2, #0
 80051da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f8aa 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e09e      	b.n	800532c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ee:	897b      	ldrh	r3, [r7, #10]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	6a3a      	ldr	r2, [r7, #32]
 8005202:	494c      	ldr	r1, [pc, #304]	; (8005334 <I2C_RequestMemoryRead+0x19c>)
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f8ee 	bl	80053e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e08b      	b.n	800532c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	6a39      	ldr	r1, [r7, #32]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f958 	bl	80054e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00d      	beq.n	8005256 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b04      	cmp	r3, #4
 8005240:	d107      	bne.n	8005252 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e06a      	b.n	800532c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d105      	bne.n	8005268 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800525c:	893b      	ldrh	r3, [r7, #8]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	611a      	str	r2, [r3, #16]
 8005266:	e021      	b.n	80052ac <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005268:	893b      	ldrh	r3, [r7, #8]
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	b29b      	uxth	r3, r3
 800526e:	b2da      	uxtb	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005278:	6a39      	ldr	r1, [r7, #32]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f932 	bl	80054e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00d      	beq.n	80052a2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	2b04      	cmp	r3, #4
 800528c:	d107      	bne.n	800529e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e044      	b.n	800532c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052a2:	893b      	ldrh	r3, [r7, #8]
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ae:	6a39      	ldr	r1, [r7, #32]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f917 	bl	80054e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d107      	bne.n	80052d4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e029      	b.n	800532c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f81f 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e013      	b.n	800532c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005304:	897b      	ldrh	r3, [r7, #10]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	6a3a      	ldr	r2, [r7, #32]
 8005318:	4906      	ldr	r1, [pc, #24]	; (8005334 <I2C_RequestMemoryRead+0x19c>)
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f863 	bl	80053e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	00010002 	.word	0x00010002

08005338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005348:	e025      	b.n	8005396 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d021      	beq.n	8005396 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fd f989 	bl	8002668 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d116      	bne.n	8005396 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f043 0220 	orr.w	r2, r3, #32
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e023      	b.n	80053de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	d10d      	bne.n	80053bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	43da      	mvns	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4013      	ands	r3, r2
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bf0c      	ite	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	2300      	movne	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	e00c      	b.n	80053d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	43da      	mvns	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4013      	ands	r3, r2
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf0c      	ite	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	2300      	movne	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d0b6      	beq.n	800534a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053f4:	e051      	b.n	800549a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d123      	bne.n	800544e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005414:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800541e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f043 0204 	orr.w	r2, r3, #4
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e046      	b.n	80054dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d021      	beq.n	800549a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005456:	f7fd f907 	bl	8002668 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d302      	bcc.n	800546c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d116      	bne.n	800549a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f043 0220 	orr.w	r2, r3, #32
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e020      	b.n	80054dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d10c      	bne.n	80054be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	43da      	mvns	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4013      	ands	r3, r2
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bf14      	ite	ne
 80054b6:	2301      	movne	r3, #1
 80054b8:	2300      	moveq	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e00b      	b.n	80054d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	43da      	mvns	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4013      	ands	r3, r2
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	bf14      	ite	ne
 80054d0:	2301      	movne	r3, #1
 80054d2:	2300      	moveq	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d18d      	bne.n	80053f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054f0:	e02d      	b.n	800554e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f8ce 	bl	8005694 <I2C_IsAcknowledgeFailed>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e02d      	b.n	800555e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d021      	beq.n	800554e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550a:	f7fd f8ad 	bl	8002668 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	429a      	cmp	r2, r3
 8005518:	d302      	bcc.n	8005520 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d116      	bne.n	800554e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e007      	b.n	800555e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005558:	2b80      	cmp	r3, #128	; 0x80
 800555a:	d1ca      	bne.n	80054f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005572:	e02d      	b.n	80055d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f88d 	bl	8005694 <I2C_IsAcknowledgeFailed>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e02d      	b.n	80055e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558a:	d021      	beq.n	80055d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558c:	f7fd f86c 	bl	8002668 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	429a      	cmp	r2, r3
 800559a:	d302      	bcc.n	80055a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d116      	bne.n	80055d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	f043 0220 	orr.w	r2, r3, #32
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e007      	b.n	80055e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d1ca      	bne.n	8005574 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055f4:	e042      	b.n	800567c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b10      	cmp	r3, #16
 8005602:	d119      	bne.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0210 	mvn.w	r2, #16
 800560c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e029      	b.n	800568c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005638:	f7fd f816 	bl	8002668 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d116      	bne.n	800567c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e007      	b.n	800568c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d1b5      	bne.n	80055f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d11b      	bne.n	80056e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	f043 0204 	orr.w	r2, r3, #4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e26c      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8087 	beq.w	800581e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005710:	4b92      	ldr	r3, [pc, #584]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b04      	cmp	r3, #4
 800571a:	d00c      	beq.n	8005736 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800571c:	4b8f      	ldr	r3, [pc, #572]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 030c 	and.w	r3, r3, #12
 8005724:	2b08      	cmp	r3, #8
 8005726:	d112      	bne.n	800574e <HAL_RCC_OscConfig+0x5e>
 8005728:	4b8c      	ldr	r3, [pc, #560]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005734:	d10b      	bne.n	800574e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005736:	4b89      	ldr	r3, [pc, #548]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d06c      	beq.n	800581c <HAL_RCC_OscConfig+0x12c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d168      	bne.n	800581c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e246      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x76>
 8005758:	4b80      	ldr	r3, [pc, #512]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a7f      	ldr	r2, [pc, #508]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 800575e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	e02e      	b.n	80057c4 <HAL_RCC_OscConfig+0xd4>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0x98>
 800576e:	4b7b      	ldr	r3, [pc, #492]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a7a      	ldr	r2, [pc, #488]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	4b78      	ldr	r3, [pc, #480]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a77      	ldr	r2, [pc, #476]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e01d      	b.n	80057c4 <HAL_RCC_OscConfig+0xd4>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005790:	d10c      	bne.n	80057ac <HAL_RCC_OscConfig+0xbc>
 8005792:	4b72      	ldr	r3, [pc, #456]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a71      	ldr	r2, [pc, #452]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	4b6f      	ldr	r3, [pc, #444]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a6e      	ldr	r2, [pc, #440]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	e00b      	b.n	80057c4 <HAL_RCC_OscConfig+0xd4>
 80057ac:	4b6b      	ldr	r3, [pc, #428]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a6a      	ldr	r2, [pc, #424]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80057b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	4b68      	ldr	r3, [pc, #416]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a67      	ldr	r2, [pc, #412]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80057be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d013      	beq.n	80057f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057cc:	f7fc ff4c 	bl	8002668 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057d4:	f7fc ff48 	bl	8002668 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b64      	cmp	r3, #100	; 0x64
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e1fa      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e6:	4b5d      	ldr	r3, [pc, #372]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0xe4>
 80057f2:	e014      	b.n	800581e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fc ff38 	bl	8002668 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057fc:	f7fc ff34 	bl	8002668 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	; 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e1e6      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580e:	4b53      	ldr	r3, [pc, #332]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x10c>
 800581a:	e000      	b.n	800581e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800581c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d063      	beq.n	80058f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800582a:	4b4c      	ldr	r3, [pc, #304]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005836:	4b49      	ldr	r3, [pc, #292]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f003 030c 	and.w	r3, r3, #12
 800583e:	2b08      	cmp	r3, #8
 8005840:	d11c      	bne.n	800587c <HAL_RCC_OscConfig+0x18c>
 8005842:	4b46      	ldr	r3, [pc, #280]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d116      	bne.n	800587c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584e:	4b43      	ldr	r3, [pc, #268]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_RCC_OscConfig+0x176>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d001      	beq.n	8005866 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e1ba      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005866:	4b3d      	ldr	r3, [pc, #244]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	4939      	ldr	r1, [pc, #228]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005876:	4313      	orrs	r3, r2
 8005878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587a:	e03a      	b.n	80058f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d020      	beq.n	80058c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005884:	4b36      	ldr	r3, [pc, #216]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588a:	f7fc feed 	bl	8002668 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005892:	f7fc fee9 	bl	8002668 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e19b      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a4:	4b2d      	ldr	r3, [pc, #180]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b0:	4b2a      	ldr	r3, [pc, #168]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	4927      	ldr	r1, [pc, #156]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]
 80058c4:	e015      	b.n	80058f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c6:	4b26      	ldr	r3, [pc, #152]	; (8005960 <HAL_RCC_OscConfig+0x270>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fc fecc 	bl	8002668 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d4:	f7fc fec8 	bl	8002668 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e17a      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e6:	4b1d      	ldr	r3, [pc, #116]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d03a      	beq.n	8005974 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d019      	beq.n	800593a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005906:	4b17      	ldr	r3, [pc, #92]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005908:	2201      	movs	r2, #1
 800590a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590c:	f7fc feac 	bl	8002668 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005914:	f7fc fea8 	bl	8002668 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e15a      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005926:	4b0d      	ldr	r3, [pc, #52]	; (800595c <HAL_RCC_OscConfig+0x26c>)
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005932:	2001      	movs	r0, #1
 8005934:	f000 fada 	bl	8005eec <RCC_Delay>
 8005938:	e01c      	b.n	8005974 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005940:	f7fc fe92 	bl	8002668 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005946:	e00f      	b.n	8005968 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005948:	f7fc fe8e 	bl	8002668 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d908      	bls.n	8005968 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e140      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000
 8005960:	42420000 	.word	0x42420000
 8005964:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005968:	4b9e      	ldr	r3, [pc, #632]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e9      	bne.n	8005948 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80a6 	beq.w	8005ace <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005982:	2300      	movs	r3, #0
 8005984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005986:	4b97      	ldr	r3, [pc, #604]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10d      	bne.n	80059ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005992:	4b94      	ldr	r3, [pc, #592]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	4a93      	ldr	r2, [pc, #588]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599c:	61d3      	str	r3, [r2, #28]
 800599e:	4b91      	ldr	r3, [pc, #580]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a6:	60bb      	str	r3, [r7, #8]
 80059a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ae:	4b8e      	ldr	r3, [pc, #568]	; (8005be8 <HAL_RCC_OscConfig+0x4f8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d118      	bne.n	80059ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ba:	4b8b      	ldr	r3, [pc, #556]	; (8005be8 <HAL_RCC_OscConfig+0x4f8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a8a      	ldr	r2, [pc, #552]	; (8005be8 <HAL_RCC_OscConfig+0x4f8>)
 80059c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059c6:	f7fc fe4f 	bl	8002668 <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ce:	f7fc fe4b 	bl	8002668 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b64      	cmp	r3, #100	; 0x64
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e0fd      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e0:	4b81      	ldr	r3, [pc, #516]	; (8005be8 <HAL_RCC_OscConfig+0x4f8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0f0      	beq.n	80059ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d106      	bne.n	8005a02 <HAL_RCC_OscConfig+0x312>
 80059f4:	4b7b      	ldr	r3, [pc, #492]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	4a7a      	ldr	r2, [pc, #488]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	6213      	str	r3, [r2, #32]
 8005a00:	e02d      	b.n	8005a5e <HAL_RCC_OscConfig+0x36e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10c      	bne.n	8005a24 <HAL_RCC_OscConfig+0x334>
 8005a0a:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	4a75      	ldr	r2, [pc, #468]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a10:	f023 0301 	bic.w	r3, r3, #1
 8005a14:	6213      	str	r3, [r2, #32]
 8005a16:	4b73      	ldr	r3, [pc, #460]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	4a72      	ldr	r2, [pc, #456]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a1c:	f023 0304 	bic.w	r3, r3, #4
 8005a20:	6213      	str	r3, [r2, #32]
 8005a22:	e01c      	b.n	8005a5e <HAL_RCC_OscConfig+0x36e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b05      	cmp	r3, #5
 8005a2a:	d10c      	bne.n	8005a46 <HAL_RCC_OscConfig+0x356>
 8005a2c:	4b6d      	ldr	r3, [pc, #436]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	4a6c      	ldr	r2, [pc, #432]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a32:	f043 0304 	orr.w	r3, r3, #4
 8005a36:	6213      	str	r3, [r2, #32]
 8005a38:	4b6a      	ldr	r3, [pc, #424]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	4a69      	ldr	r2, [pc, #420]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a3e:	f043 0301 	orr.w	r3, r3, #1
 8005a42:	6213      	str	r3, [r2, #32]
 8005a44:	e00b      	b.n	8005a5e <HAL_RCC_OscConfig+0x36e>
 8005a46:	4b67      	ldr	r3, [pc, #412]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	4a66      	ldr	r2, [pc, #408]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	6213      	str	r3, [r2, #32]
 8005a52:	4b64      	ldr	r3, [pc, #400]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	4a63      	ldr	r2, [pc, #396]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d015      	beq.n	8005a92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a66:	f7fc fdff 	bl	8002668 <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6e:	f7fc fdfb 	bl	8002668 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e0ab      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a84:	4b57      	ldr	r3, [pc, #348]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0ee      	beq.n	8005a6e <HAL_RCC_OscConfig+0x37e>
 8005a90:	e014      	b.n	8005abc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a92:	f7fc fde9 	bl	8002668 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a98:	e00a      	b.n	8005ab0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9a:	f7fc fde5 	bl	8002668 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e095      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab0:	4b4c      	ldr	r3, [pc, #304]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1ee      	bne.n	8005a9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d105      	bne.n	8005ace <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac2:	4b48      	ldr	r3, [pc, #288]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	4a47      	ldr	r2, [pc, #284]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005acc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8081 	beq.w	8005bda <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ad8:	4b42      	ldr	r3, [pc, #264]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 030c 	and.w	r3, r3, #12
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d061      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d146      	bne.n	8005b7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aec:	4b3f      	ldr	r3, [pc, #252]	; (8005bec <HAL_RCC_OscConfig+0x4fc>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af2:	f7fc fdb9 	bl	8002668 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afa:	f7fc fdb5 	bl	8002668 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e067      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b0c:	4b35      	ldr	r3, [pc, #212]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1f0      	bne.n	8005afa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b20:	d108      	bne.n	8005b34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b22:	4b30      	ldr	r3, [pc, #192]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	492d      	ldr	r1, [pc, #180]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b34:	4b2b      	ldr	r3, [pc, #172]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a19      	ldr	r1, [r3, #32]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	430b      	orrs	r3, r1
 8005b46:	4927      	ldr	r1, [pc, #156]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b4c:	4b27      	ldr	r3, [pc, #156]	; (8005bec <HAL_RCC_OscConfig+0x4fc>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b52:	f7fc fd89 	bl	8002668 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b5a:	f7fc fd85 	bl	8002668 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e037      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x46a>
 8005b78:	e02f      	b.n	8005bda <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7a:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <HAL_RCC_OscConfig+0x4fc>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b80:	f7fc fd72 	bl	8002668 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b88:	f7fc fd6e 	bl	8002668 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e020      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b9a:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x498>
 8005ba6:	e018      	b.n	8005bda <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e013      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_OscConfig+0x4f4>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d106      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d001      	beq.n	8005bda <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40021000 	.word	0x40021000
 8005be8:	40007000 	.word	0x40007000
 8005bec:	42420060 	.word	0x42420060

08005bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0d0      	b.n	8005da6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c04:	4b6a      	ldr	r3, [pc, #424]	; (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d910      	bls.n	8005c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b67      	ldr	r3, [pc, #412]	; (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 0207 	bic.w	r2, r3, #7
 8005c1a:	4965      	ldr	r1, [pc, #404]	; (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c22:	4b63      	ldr	r3, [pc, #396]	; (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e0b8      	b.n	8005da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d020      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c4c:	4b59      	ldr	r3, [pc, #356]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4a58      	ldr	r2, [pc, #352]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c64:	4b53      	ldr	r3, [pc, #332]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4a52      	ldr	r2, [pc, #328]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c70:	4b50      	ldr	r3, [pc, #320]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	494d      	ldr	r1, [pc, #308]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d040      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d107      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c96:	4b47      	ldr	r3, [pc, #284]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d115      	bne.n	8005cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e07f      	b.n	8005da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d107      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cae:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e073      	b.n	8005da6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cbe:	4b3d      	ldr	r3, [pc, #244]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e06b      	b.n	8005da6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cce:	4b39      	ldr	r3, [pc, #228]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f023 0203 	bic.w	r2, r3, #3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4936      	ldr	r1, [pc, #216]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ce0:	f7fc fcc2 	bl	8002668 <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce6:	e00a      	b.n	8005cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce8:	f7fc fcbe 	bl	8002668 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e053      	b.n	8005da6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfe:	4b2d      	ldr	r3, [pc, #180]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f003 020c 	and.w	r2, r3, #12
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d1eb      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d10:	4b27      	ldr	r3, [pc, #156]	; (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d210      	bcs.n	8005d40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1e:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f023 0207 	bic.w	r2, r3, #7
 8005d26:	4922      	ldr	r1, [pc, #136]	; (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2e:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d001      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e032      	b.n	8005da6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d008      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d4c:	4b19      	ldr	r3, [pc, #100]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4916      	ldr	r1, [pc, #88]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d009      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d6a:	4b12      	ldr	r3, [pc, #72]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	490e      	ldr	r1, [pc, #56]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d7e:	f000 f821 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 8005d82:	4601      	mov	r1, r0
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	091b      	lsrs	r3, r3, #4
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <HAL_RCC_ClockConfig+0x1c8>)
 8005d90:	5cd3      	ldrb	r3, [r2, r3]
 8005d92:	fa21 f303 	lsr.w	r3, r1, r3
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <HAL_RCC_ClockConfig+0x1cc>)
 8005d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d9a:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <HAL_RCC_ClockConfig+0x1d0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fc fc20 	bl	80025e4 <HAL_InitTick>

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40022000 	.word	0x40022000
 8005db4:	40021000 	.word	0x40021000
 8005db8:	0800f798 	.word	0x0800f798
 8005dbc:	20000000 	.word	0x20000000
 8005dc0:	20000004 	.word	0x20000004

08005dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc4:	b490      	push	{r4, r7}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005dca:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005dcc:	1d3c      	adds	r4, r7, #4
 8005dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005dd4:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	2300      	movs	r3, #0
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005dee:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d002      	beq.n	8005e04 <HAL_RCC_GetSysClockFreq+0x40>
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d003      	beq.n	8005e0a <HAL_RCC_GetSysClockFreq+0x46>
 8005e02:	e02d      	b.n	8005e60 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e04:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e06:	623b      	str	r3, [r7, #32]
      break;
 8005e08:	e02d      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	0c9b      	lsrs	r3, r3, #18
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e16:	4413      	add	r3, r2
 8005e18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e1c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d013      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e28:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	0c5b      	lsrs	r3, r3, #17
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e36:	4413      	add	r3, r2
 8005e38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	4a0f      	ldr	r2, [pc, #60]	; (8005e80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e42:	fb02 f203 	mul.w	r2, r2, r3
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4e:	e004      	b.n	8005e5a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e54:	fb02 f303 	mul.w	r3, r2, r3
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	623b      	str	r3, [r7, #32]
      break;
 8005e5e:	e002      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e62:	623b      	str	r3, [r7, #32]
      break;
 8005e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e66:	6a3b      	ldr	r3, [r7, #32]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3728      	adds	r7, #40	; 0x28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc90      	pop	{r4, r7}
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	0800f728 	.word	0x0800f728
 8005e78:	0800f738 	.word	0x0800f738
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	007a1200 	.word	0x007a1200
 8005e84:	003d0900 	.word	0x003d0900

08005e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	20000000 	.word	0x20000000

08005e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ea0:	f7ff fff2 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8005ea4:	4601      	mov	r1, r0
 8005ea6:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	4a03      	ldr	r2, [pc, #12]	; (8005ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eb2:	5cd3      	ldrb	r3, [r2, r3]
 8005eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	0800f7a8 	.word	0x0800f7a8

08005ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ec8:	f7ff ffde 	bl	8005e88 <HAL_RCC_GetHCLKFreq>
 8005ecc:	4601      	mov	r1, r0
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	0adb      	lsrs	r3, r3, #11
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	4a03      	ldr	r2, [pc, #12]	; (8005ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eda:	5cd3      	ldrb	r3, [r2, r3]
 8005edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	0800f7a8 	.word	0x0800f7a8

08005eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <RCC_Delay+0x34>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <RCC_Delay+0x38>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	0a5b      	lsrs	r3, r3, #9
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f08:	bf00      	nop
  }
  while (Delay --);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1e5a      	subs	r2, r3, #1
 8005f0e:	60fa      	str	r2, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f9      	bne.n	8005f08 <RCC_Delay+0x1c>
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000000 	.word	0x20000000
 8005f24:	10624dd3 	.word	0x10624dd3

08005f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d07d      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005f44:	2300      	movs	r3, #0
 8005f46:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f48:	4b4f      	ldr	r3, [pc, #316]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10d      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f54:	4b4c      	ldr	r3, [pc, #304]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	4a4b      	ldr	r2, [pc, #300]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f5e:	61d3      	str	r3, [r2, #28]
 8005f60:	4b49      	ldr	r3, [pc, #292]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f70:	4b46      	ldr	r3, [pc, #280]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d118      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f7c:	4b43      	ldr	r3, [pc, #268]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a42      	ldr	r2, [pc, #264]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f88:	f7fc fb6e 	bl	8002668 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f90:	f7fc fb6a 	bl	8002668 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b64      	cmp	r3, #100	; 0x64
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e06d      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa2:	4b3a      	ldr	r3, [pc, #232]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fae:	4b36      	ldr	r3, [pc, #216]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d02e      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d027      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fcc:	4b2e      	ldr	r3, [pc, #184]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fd6:	4b2e      	ldr	r3, [pc, #184]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fdc:	4b2c      	ldr	r3, [pc, #176]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fe2:	4a29      	ldr	r2, [pc, #164]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d014      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff2:	f7fc fb39 	bl	8002668 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fc fb35 	bl	8002668 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	; 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e036      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006010:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ee      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800601c:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4917      	ldr	r1, [pc, #92]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800602a:	4313      	orrs	r3, r2
 800602c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d105      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	4a13      	ldr	r2, [pc, #76]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d008      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800604c:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	490b      	ldr	r1, [pc, #44]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605a:	4313      	orrs	r3, r2
 800605c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b00      	cmp	r3, #0
 8006068:	d008      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	4904      	ldr	r1, [pc, #16]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	40021000 	.word	0x40021000
 800608c:	40007000 	.word	0x40007000
 8006090:	42420440 	.word	0x42420440

08006094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e053      	b.n	800614e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d106      	bne.n	80060c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7fb fe15 	bl	8001cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	ea42 0103 	orr.w	r1, r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	0c1a      	lsrs	r2, r3, #16
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f002 0204 	and.w	r2, r2, #4
 800612c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800613c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b088      	sub	sp, #32
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_SPI_Transmit+0x22>
 8006174:	2302      	movs	r3, #2
 8006176:	e11e      	b.n	80063b6 <HAL_SPI_Transmit+0x260>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006180:	f7fc fa72 	bl	8002668 <HAL_GetTick>
 8006184:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b01      	cmp	r3, #1
 8006194:	d002      	beq.n	800619c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006196:	2302      	movs	r3, #2
 8006198:	77fb      	strb	r3, [r7, #31]
    goto error;
 800619a:	e103      	b.n	80063a4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_SPI_Transmit+0x52>
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d102      	bne.n	80061ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061ac:	e0fa      	b.n	80063a4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2203      	movs	r2, #3
 80061b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f4:	d107      	bne.n	8006206 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006204:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d007      	beq.n	8006224 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006222:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622c:	d14b      	bne.n	80062c6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_SPI_Transmit+0xe6>
 8006236:	8afb      	ldrh	r3, [r7, #22]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d13e      	bne.n	80062ba <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	881a      	ldrh	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	1c9a      	adds	r2, r3, #2
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006256:	b29b      	uxth	r3, r3
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006260:	e02b      	b.n	80062ba <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b02      	cmp	r3, #2
 800626e:	d112      	bne.n	8006296 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006274:	881a      	ldrh	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	1c9a      	adds	r2, r3, #2
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	86da      	strh	r2, [r3, #54]	; 0x36
 8006294:	e011      	b.n	80062ba <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006296:	f7fc f9e7 	bl	8002668 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d803      	bhi.n	80062ae <HAL_SPI_Transmit+0x158>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ac:	d102      	bne.n	80062b4 <HAL_SPI_Transmit+0x15e>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062b8:	e074      	b.n	80063a4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1ce      	bne.n	8006262 <HAL_SPI_Transmit+0x10c>
 80062c4:	e04c      	b.n	8006360 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_SPI_Transmit+0x17e>
 80062ce:	8afb      	ldrh	r3, [r7, #22]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d140      	bne.n	8006356 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	330c      	adds	r3, #12
 80062de:	7812      	ldrb	r2, [r2, #0]
 80062e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062fa:	e02c      	b.n	8006356 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d113      	bne.n	8006332 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	330c      	adds	r3, #12
 8006314:	7812      	ldrb	r2, [r2, #0]
 8006316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006330:	e011      	b.n	8006356 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006332:	f7fc f999 	bl	8002668 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d803      	bhi.n	800634a <HAL_SPI_Transmit+0x1f4>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d102      	bne.n	8006350 <HAL_SPI_Transmit+0x1fa>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006354:	e026      	b.n	80063a4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1cd      	bne.n	80062fc <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fce8 	bl	8006d3a <SPI_EndRxTxTransaction>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e000      	b.n	80063a4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80063a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3720      	adds	r7, #32
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b088      	sub	sp, #32
 80063c2:	af02      	add	r7, sp, #8
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063da:	d112      	bne.n	8006402 <HAL_SPI_Receive+0x44>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10e      	bne.n	8006402 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2204      	movs	r2, #4
 80063e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063ec:	88fa      	ldrh	r2, [r7, #6]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4613      	mov	r3, r2
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f8e9 	bl	80065d0 <HAL_SPI_TransmitReceive>
 80063fe:	4603      	mov	r3, r0
 8006400:	e0e2      	b.n	80065c8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_SPI_Receive+0x52>
 800640c:	2302      	movs	r3, #2
 800640e:	e0db      	b.n	80065c8 <HAL_SPI_Receive+0x20a>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006418:	f7fc f926 	bl	8002668 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	d002      	beq.n	8006430 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800642a:	2302      	movs	r3, #2
 800642c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800642e:	e0c2      	b.n	80065b6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_SPI_Receive+0x7e>
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006440:	e0b9      	b.n	80065b6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2204      	movs	r2, #4
 8006446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	88fa      	ldrh	r2, [r7, #6]
 800645a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006488:	d107      	bne.n	800649a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006498:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a4:	2b40      	cmp	r3, #64	; 0x40
 80064a6:	d007      	beq.n	80064b8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d162      	bne.n	8006586 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064c0:	e02e      	b.n	8006520 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d115      	bne.n	80064fc <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f103 020c 	add.w	r2, r3, #12
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	7812      	ldrb	r2, [r2, #0]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064fa:	e011      	b.n	8006520 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064fc:	f7fc f8b4 	bl	8002668 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d803      	bhi.n	8006514 <HAL_SPI_Receive+0x156>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d102      	bne.n	800651a <HAL_SPI_Receive+0x15c>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d102      	bne.n	8006520 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800651e:	e04a      	b.n	80065b6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1cb      	bne.n	80064c2 <HAL_SPI_Receive+0x104>
 800652a:	e031      	b.n	8006590 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b01      	cmp	r3, #1
 8006538:	d113      	bne.n	8006562 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	b292      	uxth	r2, r2
 8006546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006560:	e011      	b.n	8006586 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006562:	f7fc f881 	bl	8002668 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d803      	bhi.n	800657a <HAL_SPI_Receive+0x1bc>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006578:	d102      	bne.n	8006580 <HAL_SPI_Receive+0x1c2>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d102      	bne.n	8006586 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006584:	e017      	b.n	80065b6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1cd      	bne.n	800652c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 fb7e 	bl	8006c96 <SPI_EndRxTransaction>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	75fb      	strb	r3, [r7, #23]
 80065b2:	e000      	b.n	80065b6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80065b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08c      	sub	sp, #48	; 0x30
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065de:	2301      	movs	r3, #1
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_SPI_TransmitReceive+0x26>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e18a      	b.n	800690c <HAL_SPI_TransmitReceive+0x33c>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065fe:	f7fc f833 	bl	8002668 <HAL_GetTick>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006614:	887b      	ldrh	r3, [r7, #2]
 8006616:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800661c:	2b01      	cmp	r3, #1
 800661e:	d00f      	beq.n	8006640 <HAL_SPI_TransmitReceive+0x70>
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006626:	d107      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d103      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x68>
 8006630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006634:	2b04      	cmp	r3, #4
 8006636:	d003      	beq.n	8006640 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006638:	2302      	movs	r3, #2
 800663a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800663e:	e15b      	b.n	80068f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x82>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x82>
 800664c:	887b      	ldrh	r3, [r7, #2]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d103      	bne.n	800665a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006658:	e14e      	b.n	80068f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b04      	cmp	r3, #4
 8006664:	d003      	beq.n	800666e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2205      	movs	r2, #5
 800666a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	887a      	ldrh	r2, [r7, #2]
 800667e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	887a      	ldrh	r2, [r7, #2]
 8006690:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	887a      	ldrh	r2, [r7, #2]
 8006696:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d007      	beq.n	80066c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ca:	d178      	bne.n	80067be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_SPI_TransmitReceive+0x10a>
 80066d4:	8b7b      	ldrh	r3, [r7, #26]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d166      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	881a      	ldrh	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066fe:	e053      	b.n	80067a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b02      	cmp	r3, #2
 800670c:	d11b      	bne.n	8006746 <HAL_SPI_TransmitReceive+0x176>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d016      	beq.n	8006746 <HAL_SPI_TransmitReceive+0x176>
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	2b01      	cmp	r3, #1
 800671c:	d113      	bne.n	8006746 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	881a      	ldrh	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	1c9a      	adds	r2, r3, #2
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006738:	b29b      	uxth	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d119      	bne.n	8006788 <HAL_SPI_TransmitReceive+0x1b8>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d014      	beq.n	8006788 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	b292      	uxth	r2, r2
 800676a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	1c9a      	adds	r2, r3, #2
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006784:	2301      	movs	r3, #1
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006788:	f7fb ff6e 	bl	8002668 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006794:	429a      	cmp	r2, r3
 8006796:	d807      	bhi.n	80067a8 <HAL_SPI_TransmitReceive+0x1d8>
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679e:	d003      	beq.n	80067a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067a6:	e0a7      	b.n	80068f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1a6      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x130>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1a1      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x130>
 80067bc:	e07c      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_SPI_TransmitReceive+0x1fc>
 80067c6:	8b7b      	ldrh	r3, [r7, #26]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d16b      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	7812      	ldrb	r2, [r2, #0]
 80067d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067f2:	e057      	b.n	80068a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d11c      	bne.n	800683c <HAL_SPI_TransmitReceive+0x26c>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d017      	beq.n	800683c <HAL_SPI_TransmitReceive+0x26c>
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	2b01      	cmp	r3, #1
 8006810:	d114      	bne.n	800683c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	330c      	adds	r3, #12
 800681c:	7812      	ldrb	r2, [r2, #0]
 800681e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b01      	cmp	r3, #1
 8006848:	d119      	bne.n	800687e <HAL_SPI_TransmitReceive+0x2ae>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d014      	beq.n	800687e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800687a:	2301      	movs	r3, #1
 800687c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800687e:	f7fb fef3 	bl	8002668 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800688a:	429a      	cmp	r2, r3
 800688c:	d803      	bhi.n	8006896 <HAL_SPI_TransmitReceive+0x2c6>
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006894:	d102      	bne.n	800689c <HAL_SPI_TransmitReceive+0x2cc>
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d103      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068a2:	e029      	b.n	80068f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1a2      	bne.n	80067f4 <HAL_SPI_TransmitReceive+0x224>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d19d      	bne.n	80067f4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fa3c 	bl	8006d3a <SPI_EndRxTxTransaction>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d006      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068d4:	e010      	b.n	80068f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	e000      	b.n	80068f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006908:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800690c:	4618      	mov	r0, r3
 800690e:	3730      	adds	r7, #48	; 0x30
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_SPI_Transmit_DMA+0x20>
 8006930:	2302      	movs	r3, #2
 8006932:	e093      	b.n	8006a5c <HAL_SPI_Transmit_DMA+0x148>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d002      	beq.n	800694e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006948:	2302      	movs	r3, #2
 800694a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800694c:	e081      	b.n	8006a52 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <HAL_SPI_Transmit_DMA+0x46>
 8006954:	88fb      	ldrh	r3, [r7, #6]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800695e:	e078      	b.n	8006a52 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2203      	movs	r2, #3
 8006964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	88fa      	ldrh	r2, [r7, #6]
 8006978:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	88fa      	ldrh	r2, [r7, #6]
 800697e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a6:	d107      	bne.n	80069b8 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069bc:	4a29      	ldr	r2, [pc, #164]	; (8006a64 <HAL_SPI_Transmit_DMA+0x150>)
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c4:	4a28      	ldr	r2, [pc, #160]	; (8006a68 <HAL_SPI_Transmit_DMA+0x154>)
 80069c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069cc:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <HAL_SPI_Transmit_DMA+0x158>)
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d4:	2200      	movs	r2, #0
 80069d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	4619      	mov	r1, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80069f0:	f7fd f94a 	bl	8003c88 <HAL_DMA_Start_IT>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	f043 0210 	orr.w	r2, r3, #16
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006a12:	e01e      	b.n	8006a52 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	d007      	beq.n	8006a32 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a30:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0220 	orr.w	r2, r2, #32
 8006a40:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0202 	orr.w	r2, r2, #2
 8006a50:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	08006b67 	.word	0x08006b67
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	08006b83 	.word	0x08006b83

08006a70 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr

08006a82 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ab4:	b2db      	uxtb	r3, r3
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr

08006ac0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ace:	f7fb fdcb 	bl	8002668 <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d03b      	beq.n	8006b5a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0220 	bic.w	r2, r2, #32
 8006af0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0202 	bic.w	r2, r2, #2
 8006b00:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	2164      	movs	r1, #100	; 0x64
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f000 f917 	bl	8006d3a <SPI_EndRxTxTransaction>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b16:	f043 0220 	orr.w	r2, r3, #32
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006b52:	6978      	ldr	r0, [r7, #20]
 8006b54:	f7ff ff9e 	bl	8006a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006b58:	e002      	b.n	8006b60 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006b5a:	6978      	ldr	r0, [r7, #20]
 8006b5c:	f7ff ff88 	bl	8006a70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff ff84 	bl	8006a82 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0203 	bic.w	r2, r2, #3
 8006b9e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	f043 0210 	orr.w	r2, r3, #16
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff ff6d 	bl	8006a94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	603b      	str	r3, [r7, #0]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd2:	e04c      	b.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d048      	beq.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006bdc:	f7fb fd44 	bl	8002668 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d902      	bls.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d13d      	bne.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c0a:	d111      	bne.n	8006c30 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c14:	d004      	beq.n	8006c20 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c1e:	d107      	bne.n	8006c30 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c38:	d10f      	bne.n	8006c5a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e00f      	b.n	8006c8e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4013      	ands	r3, r2
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	bf0c      	ite	eq
 8006c7e:	2301      	moveq	r3, #1
 8006c80:	2300      	movne	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d1a3      	bne.n	8006bd4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af02      	add	r7, sp, #8
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006caa:	d111      	bne.n	8006cd0 <SPI_EndRxTransaction+0x3a>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb4:	d004      	beq.n	8006cc0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cbe:	d107      	bne.n	8006cd0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cce:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cd8:	d117      	bne.n	8006d0a <SPI_EndRxTransaction+0x74>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce2:	d112      	bne.n	8006d0a <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	2101      	movs	r1, #1
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff ff67 	bl	8006bc2 <SPI_WaitFlagStateUntilTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01a      	beq.n	8006d30 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfe:	f043 0220 	orr.w	r2, r3, #32
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e013      	b.n	8006d32 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2200      	movs	r2, #0
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff ff54 	bl	8006bc2 <SPI_WaitFlagStateUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e000      	b.n	8006d32 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af02      	add	r7, sp, #8
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7ff ff36 	bl	8006bc2 <SPI_WaitFlagStateUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d60:	f043 0220 	orr.w	r2, r3, #32
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e000      	b.n	8006d6e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e01d      	b.n	8006dc4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d106      	bne.n	8006da2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fb fa87 	bl	80022b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f000 fb47 	bl	8007448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b06      	cmp	r3, #6
 8006df4:	d007      	beq.n	8006e06 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr

08006e12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e01d      	b.n	8006e60 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fb fa57 	bl	80022ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4610      	mov	r0, r2
 8006e52:	f000 faf9 	bl	8007448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2201      	movs	r2, #1
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fda0 	bl	80079c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a15      	ldr	r2, [pc, #84]	; (8006edc <HAL_TIM_PWM_Start+0x74>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d004      	beq.n	8006e94 <HAL_TIM_PWM_Start+0x2c>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a14      	ldr	r2, [pc, #80]	; (8006ee0 <HAL_TIM_PWM_Start+0x78>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d101      	bne.n	8006e98 <HAL_TIM_PWM_Start+0x30>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <HAL_TIM_PWM_Start+0x32>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b06      	cmp	r3, #6
 8006ebe:	d007      	beq.n	8006ed0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40013400 	.word	0x40013400

08006ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d122      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d11b      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0202 	mvn.w	r2, #2
 8006f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa73 	bl	8007412 <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa66 	bl	8007400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fa75 	bl	8007424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d122      	bne.n	8006f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d11b      	bne.n	8006f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0204 	mvn.w	r2, #4
 8006f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2202      	movs	r2, #2
 8006f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa49 	bl	8007412 <HAL_TIM_IC_CaptureCallback>
 8006f80:	e005      	b.n	8006f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa3c 	bl	8007400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa4b 	bl	8007424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d122      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d11b      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0208 	mvn.w	r2, #8
 8006fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2204      	movs	r2, #4
 8006fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa1f 	bl	8007412 <HAL_TIM_IC_CaptureCallback>
 8006fd4:	e005      	b.n	8006fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa12 	bl	8007400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fa21 	bl	8007424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d122      	bne.n	800703c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b10      	cmp	r3, #16
 8007002:	d11b      	bne.n	800703c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0210 	mvn.w	r2, #16
 800700c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2208      	movs	r2, #8
 8007012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f9f5 	bl	8007412 <HAL_TIM_IC_CaptureCallback>
 8007028:	e005      	b.n	8007036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9e8 	bl	8007400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f9f7 	bl	8007424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b01      	cmp	r3, #1
 8007048:	d10e      	bne.n	8007068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b01      	cmp	r3, #1
 8007056:	d107      	bne.n	8007068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0201 	mvn.w	r2, #1
 8007060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f9c3 	bl	80073ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d10e      	bne.n	8007094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007080:	2b80      	cmp	r3, #128	; 0x80
 8007082:	d107      	bne.n	8007094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800708c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fd07 	bl	8007aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d10e      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b40      	cmp	r3, #64	; 0x40
 80070ae:	d107      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f9bb 	bl	8007436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d10e      	bne.n	80070ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d107      	bne.n	80070ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0220 	mvn.w	r2, #32
 80070e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fcd2 	bl	8007a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800710a:	2302      	movs	r3, #2
 800710c:	e0b4      	b.n	8007278 <HAL_TIM_PWM_ConfigChannel+0x184>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2202      	movs	r2, #2
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b0c      	cmp	r3, #12
 8007122:	f200 809f 	bhi.w	8007264 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007161 	.word	0x08007161
 8007130:	08007265 	.word	0x08007265
 8007134:	08007265 	.word	0x08007265
 8007138:	08007265 	.word	0x08007265
 800713c:	080071a1 	.word	0x080071a1
 8007140:	08007265 	.word	0x08007265
 8007144:	08007265 	.word	0x08007265
 8007148:	08007265 	.word	0x08007265
 800714c:	080071e3 	.word	0x080071e3
 8007150:	08007265 	.word	0x08007265
 8007154:	08007265 	.word	0x08007265
 8007158:	08007265 	.word	0x08007265
 800715c:	08007223 	.word	0x08007223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f9e8 	bl	800753c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0208 	orr.w	r2, r2, #8
 800717a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0204 	bic.w	r2, r2, #4
 800718a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6999      	ldr	r1, [r3, #24]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	619a      	str	r2, [r3, #24]
      break;
 800719e:	e062      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fa38 	bl	800761c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	021a      	lsls	r2, r3, #8
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	619a      	str	r2, [r3, #24]
      break;
 80071e0:	e041      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fa8b 	bl	8007704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0208 	orr.w	r2, r2, #8
 80071fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0204 	bic.w	r2, r2, #4
 800720c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69d9      	ldr	r1, [r3, #28]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	61da      	str	r2, [r3, #28]
      break;
 8007220:	e021      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fadf 	bl	80077ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800723c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69da      	ldr	r2, [r3, #28]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69d9      	ldr	r1, [r3, #28]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	021a      	lsls	r2, r3, #8
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	61da      	str	r2, [r3, #28]
      break;
 8007262:	e000      	b.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007264:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_TIM_ConfigClockSource+0x18>
 8007294:	2302      	movs	r3, #2
 8007296:	e0a6      	b.n	80073e6 <HAL_TIM_ConfigClockSource+0x166>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d067      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x120>
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	d80b      	bhi.n	80072ec <HAL_TIM_ConfigClockSource+0x6c>
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d073      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0x140>
 80072d8:	2b10      	cmp	r3, #16
 80072da:	d802      	bhi.n	80072e2 <HAL_TIM_ConfigClockSource+0x62>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d06f      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80072e0:	e078      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072e2:	2b20      	cmp	r3, #32
 80072e4:	d06c      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0x140>
 80072e6:	2b30      	cmp	r3, #48	; 0x30
 80072e8:	d06a      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80072ea:	e073      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072ec:	2b70      	cmp	r3, #112	; 0x70
 80072ee:	d00d      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x8c>
 80072f0:	2b70      	cmp	r3, #112	; 0x70
 80072f2:	d804      	bhi.n	80072fe <HAL_TIM_ConfigClockSource+0x7e>
 80072f4:	2b50      	cmp	r3, #80	; 0x50
 80072f6:	d033      	beq.n	8007360 <HAL_TIM_ConfigClockSource+0xe0>
 80072f8:	2b60      	cmp	r3, #96	; 0x60
 80072fa:	d041      	beq.n	8007380 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80072fc:	e06a      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80072fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007302:	d066      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x152>
 8007304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007308:	d017      	beq.n	800733a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800730a:	e063      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6899      	ldr	r1, [r3, #8]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f000 fb31 	bl	8007982 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800732e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	609a      	str	r2, [r3, #8]
      break;
 8007338:	e04c      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	6899      	ldr	r1, [r3, #8]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f000 fb1a 	bl	8007982 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800735c:	609a      	str	r2, [r3, #8]
      break;
 800735e:	e039      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6859      	ldr	r1, [r3, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	461a      	mov	r2, r3
 800736e:	f000 fa91 	bl	8007894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2150      	movs	r1, #80	; 0x50
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fae8 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 800737e:	e029      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	6859      	ldr	r1, [r3, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	461a      	mov	r2, r3
 800738e:	f000 faaf 	bl	80078f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2160      	movs	r1, #96	; 0x60
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fad8 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 800739e:	e019      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	6859      	ldr	r1, [r3, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	461a      	mov	r2, r3
 80073ae:	f000 fa71 	bl	8007894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2140      	movs	r1, #64	; 0x40
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fac8 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 80073be:	e009      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	4610      	mov	r0, r2
 80073cc:	f000 fabf 	bl	800794e <TIM_ITRx_SetConfig>
      break;
 80073d0:	e000      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80073d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	bc80      	pop	{r7}
 8007410:	4770      	bx	lr

08007412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr

08007424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr

08007436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007436:	b480      	push	{r7}
 8007438:	b083      	sub	sp, #12
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr

08007448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a33      	ldr	r2, [pc, #204]	; (8007528 <TIM_Base_SetConfig+0xe0>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d013      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a32      	ldr	r2, [pc, #200]	; (800752c <TIM_Base_SetConfig+0xe4>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d00f      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746e:	d00b      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a2f      	ldr	r2, [pc, #188]	; (8007530 <TIM_Base_SetConfig+0xe8>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d007      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a2e      	ldr	r2, [pc, #184]	; (8007534 <TIM_Base_SetConfig+0xec>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d003      	beq.n	8007488 <TIM_Base_SetConfig+0x40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a2d      	ldr	r2, [pc, #180]	; (8007538 <TIM_Base_SetConfig+0xf0>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d108      	bne.n	800749a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a22      	ldr	r2, [pc, #136]	; (8007528 <TIM_Base_SetConfig+0xe0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d013      	beq.n	80074ca <TIM_Base_SetConfig+0x82>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a21      	ldr	r2, [pc, #132]	; (800752c <TIM_Base_SetConfig+0xe4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00f      	beq.n	80074ca <TIM_Base_SetConfig+0x82>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b0:	d00b      	beq.n	80074ca <TIM_Base_SetConfig+0x82>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a1e      	ldr	r2, [pc, #120]	; (8007530 <TIM_Base_SetConfig+0xe8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d007      	beq.n	80074ca <TIM_Base_SetConfig+0x82>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <TIM_Base_SetConfig+0xec>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_Base_SetConfig+0x82>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a1c      	ldr	r2, [pc, #112]	; (8007538 <TIM_Base_SetConfig+0xf0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d108      	bne.n	80074dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a09      	ldr	r2, [pc, #36]	; (8007528 <TIM_Base_SetConfig+0xe0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <TIM_Base_SetConfig+0xc8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a08      	ldr	r2, [pc, #32]	; (800752c <TIM_Base_SetConfig+0xe4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d103      	bne.n	8007518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	615a      	str	r2, [r3, #20]
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr
 8007528:	40012c00 	.word	0x40012c00
 800752c:	40013400 	.word	0x40013400
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00

0800753c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f023 0201 	bic.w	r2, r3, #1
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f023 0302 	bic.w	r3, r3, #2
 8007584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a20      	ldr	r2, [pc, #128]	; (8007614 <TIM_OC1_SetConfig+0xd8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d003      	beq.n	80075a0 <TIM_OC1_SetConfig+0x64>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1f      	ldr	r2, [pc, #124]	; (8007618 <TIM_OC1_SetConfig+0xdc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d10c      	bne.n	80075ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 0308 	bic.w	r3, r3, #8
 80075a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f023 0304 	bic.w	r3, r3, #4
 80075b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a15      	ldr	r2, [pc, #84]	; (8007614 <TIM_OC1_SetConfig+0xd8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d003      	beq.n	80075ca <TIM_OC1_SetConfig+0x8e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a14      	ldr	r2, [pc, #80]	; (8007618 <TIM_OC1_SetConfig+0xdc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d111      	bne.n	80075ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	621a      	str	r2, [r3, #32]
}
 8007608:	bf00      	nop
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	bc80      	pop	{r7}
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40012c00 	.word	0x40012c00
 8007618:	40013400 	.word	0x40013400

0800761c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f023 0210 	bic.w	r2, r3, #16
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f023 0320 	bic.w	r3, r3, #32
 8007666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4313      	orrs	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a21      	ldr	r2, [pc, #132]	; (80076fc <TIM_OC2_SetConfig+0xe0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d003      	beq.n	8007684 <TIM_OC2_SetConfig+0x68>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a20      	ldr	r2, [pc, #128]	; (8007700 <TIM_OC2_SetConfig+0xe4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d10d      	bne.n	80076a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800768a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800769e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a16      	ldr	r2, [pc, #88]	; (80076fc <TIM_OC2_SetConfig+0xe0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_OC2_SetConfig+0x94>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a15      	ldr	r2, [pc, #84]	; (8007700 <TIM_OC2_SetConfig+0xe4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d113      	bne.n	80076d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	621a      	str	r2, [r3, #32]
}
 80076f2:	bf00      	nop
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr
 80076fc:	40012c00 	.word	0x40012c00
 8007700:	40013400 	.word	0x40013400

08007704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800774c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a21      	ldr	r2, [pc, #132]	; (80077e4 <TIM_OC3_SetConfig+0xe0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_OC3_SetConfig+0x66>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a20      	ldr	r2, [pc, #128]	; (80077e8 <TIM_OC3_SetConfig+0xe4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d10d      	bne.n	8007786 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a16      	ldr	r2, [pc, #88]	; (80077e4 <TIM_OC3_SetConfig+0xe0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d003      	beq.n	8007796 <TIM_OC3_SetConfig+0x92>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <TIM_OC3_SetConfig+0xe4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d113      	bne.n	80077be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800779c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	621a      	str	r2, [r3, #32]
}
 80077d8:	bf00      	nop
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40012c00 	.word	0x40012c00
 80077e8:	40013400 	.word	0x40013400

080077ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4313      	orrs	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	031b      	lsls	r3, r3, #12
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a11      	ldr	r2, [pc, #68]	; (800788c <TIM_OC4_SetConfig+0xa0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_OC4_SetConfig+0x68>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a10      	ldr	r2, [pc, #64]	; (8007890 <TIM_OC4_SetConfig+0xa4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d109      	bne.n	8007868 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800785a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	019b      	lsls	r3, r3, #6
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	621a      	str	r2, [r3, #32]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr
 800788c:	40012c00 	.word	0x40012c00
 8007890:	40013400 	.word	0x40013400

08007894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f023 0201 	bic.w	r2, r3, #1
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	011b      	lsls	r3, r3, #4
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 030a 	bic.w	r3, r3, #10
 80078d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	621a      	str	r2, [r3, #32]
}
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr

080078f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	f023 0210 	bic.w	r2, r3, #16
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800791a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	031b      	lsls	r3, r3, #12
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800792c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	621a      	str	r2, [r3, #32]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr

0800794e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	f043 0307 	orr.w	r3, r3, #7
 8007970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	609a      	str	r2, [r3, #8]
}
 8007978:	bf00      	nop
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr

08007982 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007982:	b480      	push	{r7}
 8007984:	b087      	sub	sp, #28
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
 800798e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800799c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	021a      	lsls	r2, r3, #8
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	431a      	orrs	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	609a      	str	r2, [r3, #8]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr

080079c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	2201      	movs	r2, #1
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a1a      	ldr	r2, [r3, #32]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	43db      	mvns	r3, r3
 80079e2:	401a      	ands	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a1a      	ldr	r2, [r3, #32]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	fa01 f303 	lsl.w	r3, r1, r3
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e032      	b.n	8007a86 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a58:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bc80      	pop	{r7}
 8007a8e:	4770      	bx	lr

08007a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e03f      	b.n	8007b46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7fa fca4 	bl	8002428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2224      	movs	r2, #36	; 0x24
 8007ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fd73 	bl	80085e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691a      	ldr	r2, [r3, #16]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695a      	ldr	r2, [r3, #20]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b088      	sub	sp, #32
 8007b52:	af02      	add	r7, sp, #8
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	603b      	str	r3, [r7, #0]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	f040 8083 	bne.w	8007c76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <HAL_UART_Transmit+0x2e>
 8007b76:	88fb      	ldrh	r3, [r7, #6]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e07b      	b.n	8007c78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_UART_Transmit+0x40>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e074      	b.n	8007c78 <HAL_UART_Transmit+0x12a>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2221      	movs	r2, #33	; 0x21
 8007ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007ba4:	f7fa fd60 	bl	8002668 <HAL_GetTick>
 8007ba8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	88fa      	ldrh	r2, [r7, #6]
 8007bae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	88fa      	ldrh	r2, [r7, #6]
 8007bb4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007bb6:	e042      	b.n	8007c3e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bce:	d122      	bne.n	8007c16 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2180      	movs	r1, #128	; 0x80
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fb84 	bl	80082e8 <UART_WaitOnFlagUntilTimeout>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e046      	b.n	8007c78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bfc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	3302      	adds	r3, #2
 8007c0a:	60bb      	str	r3, [r7, #8]
 8007c0c:	e017      	b.n	8007c3e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	3301      	adds	r3, #1
 8007c12:	60bb      	str	r3, [r7, #8]
 8007c14:	e013      	b.n	8007c3e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2180      	movs	r1, #128	; 0x80
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 fb61 	bl	80082e8 <UART_WaitOnFlagUntilTimeout>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e023      	b.n	8007c78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	60ba      	str	r2, [r7, #8]
 8007c36:	781a      	ldrb	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1b7      	bne.n	8007bb8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2140      	movs	r1, #64	; 0x40
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fb48 	bl	80082e8 <UART_WaitOnFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e00a      	b.n	8007c78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	e000      	b.n	8007c78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007c76:	2302      	movs	r3, #2
  }
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	d153      	bne.n	8007d42 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_UART_Transmit_DMA+0x26>
 8007ca0:	88fb      	ldrh	r3, [r7, #6]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e04c      	b.n	8007d44 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_UART_Transmit_DMA+0x38>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e045      	b.n	8007d44 <HAL_UART_Transmit_DMA+0xc4>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	88fa      	ldrh	r2, [r7, #6]
 8007cca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	88fa      	ldrh	r2, [r7, #6]
 8007cd0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2221      	movs	r2, #33	; 0x21
 8007cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	4a19      	ldr	r2, [pc, #100]	; (8007d4c <HAL_UART_Transmit_DMA+0xcc>)
 8007ce6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cec:	4a18      	ldr	r2, [pc, #96]	; (8007d50 <HAL_UART_Transmit_DMA+0xd0>)
 8007cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	4a17      	ldr	r2, [pc, #92]	; (8007d54 <HAL_UART_Transmit_DMA+0xd4>)
 8007cf6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8007d00:	f107 0308 	add.w	r3, r7, #8
 8007d04:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3304      	adds	r3, #4
 8007d14:	461a      	mov	r2, r3
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	f7fb ffb6 	bl	8003c88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d24:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695a      	ldr	r2, [r3, #20]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d3c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e000      	b.n	8007d44 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007d42:	2302      	movs	r3, #2
  }
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	08008163 	.word	0x08008163
 8007d50:	080081b5 	.word	0x080081b5
 8007d54:	08008255 	.word	0x08008255

08007d58 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	4613      	mov	r3, r2
 8007d64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d166      	bne.n	8007e40 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <HAL_UART_Receive_DMA+0x26>
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e05f      	b.n	8007e42 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d101      	bne.n	8007d90 <HAL_UART_Receive_DMA+0x38>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	e058      	b.n	8007e42 <HAL_UART_Receive_DMA+0xea>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2222      	movs	r2, #34	; 0x22
 8007dae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db6:	4a25      	ldr	r2, [pc, #148]	; (8007e4c <HAL_UART_Receive_DMA+0xf4>)
 8007db8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbe:	4a24      	ldr	r2, [pc, #144]	; (8007e50 <HAL_UART_Receive_DMA+0xf8>)
 8007dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc6:	4a23      	ldr	r2, [pc, #140]	; (8007e54 <HAL_UART_Receive_DMA+0xfc>)
 8007dc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dce:	2200      	movs	r2, #0
 8007dd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8007dd2:	f107 0308 	add.w	r3, r7, #8
 8007dd6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3304      	adds	r3, #4
 8007de2:	4619      	mov	r1, r3
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	f7fb ff4d 	bl	8003c88 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	613b      	str	r3, [r7, #16]
 8007e02:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e1a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695a      	ldr	r2, [r3, #20]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0201 	orr.w	r2, r2, #1
 8007e2a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695a      	ldr	r2, [r3, #20]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e3a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e000      	b.n	8007e42 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007e40:	2302      	movs	r3, #2
  }
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	080081d1 	.word	0x080081d1
 8007e50:	08008239 	.word	0x08008239
 8007e54:	08008255 	.word	0x08008255

08007e58 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bf14      	ite	ne
 8007e72:	2301      	movne	r3, #1
 8007e74:	2300      	moveq	r3, #0
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b21      	cmp	r3, #33	; 0x21
 8007e84:	d116      	bne.n	8007eb4 <HAL_UART_DMAStop+0x5c>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d013      	beq.n	8007eb4 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695a      	ldr	r2, [r3, #20]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e9a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fb ff4c 	bl	8003d46 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa64 	bl	800837c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bf14      	ite	ne
 8007ec2:	2301      	movne	r3, #1
 8007ec4:	2300      	moveq	r3, #0
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b22      	cmp	r3, #34	; 0x22
 8007ed4:	d116      	bne.n	8007f04 <HAL_UART_DMAStop+0xac>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d013      	beq.n	8007f04 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695a      	ldr	r2, [r3, #20]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eea:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fb ff24 	bl	8003d46 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa51 	bl	80083a6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f003 030f 	and.w	r3, r3, #15
 8007f3e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d008      	beq.n	8007f62 <HAL_UART_IRQHandler+0x52>
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fac1 	bl	80084e2 <UART_Receive_IT>
      return;
 8007f60:	e0cc      	b.n	80080fc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 80ab 	beq.w	80080c0 <HAL_UART_IRQHandler+0x1b0>
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d105      	bne.n	8007f80 <HAL_UART_IRQHandler+0x70>
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 80a0 	beq.w	80080c0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <HAL_UART_IRQHandler+0x90>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f98:	f043 0201 	orr.w	r2, r3, #1
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <HAL_UART_IRQHandler+0xb0>
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb8:	f043 0202 	orr.w	r2, r3, #2
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <HAL_UART_IRQHandler+0xd0>
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	f043 0204 	orr.w	r2, r3, #4
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f003 0308 	and.w	r3, r3, #8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <HAL_UART_IRQHandler+0xf0>
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff8:	f043 0208 	orr.w	r2, r3, #8
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d078      	beq.n	80080fa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_UART_IRQHandler+0x112>
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fa60 	bl	80084e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	bf14      	ite	ne
 8008030:	2301      	movne	r3, #1
 8008032:	2300      	moveq	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d102      	bne.n	800804a <HAL_UART_IRQHandler+0x13a>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d031      	beq.n	80080ae <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f9ab 	bl	80083a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d023      	beq.n	80080a6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	695a      	ldr	r2, [r3, #20]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800806c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008072:	2b00      	cmp	r3, #0
 8008074:	d013      	beq.n	800809e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807a:	4a22      	ldr	r2, [pc, #136]	; (8008104 <HAL_UART_IRQHandler+0x1f4>)
 800807c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008082:	4618      	mov	r0, r3
 8008084:	f7fb fe9a 	bl	8003dbc <HAL_DMA_Abort_IT>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d016      	beq.n	80080bc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008098:	4610      	mov	r0, r2
 800809a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809c:	e00e      	b.n	80080bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f856 	bl	8008150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a4:	e00a      	b.n	80080bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f852 	bl	8008150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ac:	e006      	b.n	80080bc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f84e 	bl	8008150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80080ba:	e01e      	b.n	80080fa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080bc:	bf00      	nop
    return;
 80080be:	e01c      	b.n	80080fa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d008      	beq.n	80080dc <HAL_UART_IRQHandler+0x1cc>
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f997 	bl	8008408 <UART_Transmit_IT>
    return;
 80080da:	e00f      	b.n	80080fc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <HAL_UART_IRQHandler+0x1ec>
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d005      	beq.n	80080fc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f9de 	bl	80084b2 <UART_EndTransmit_IT>
    return;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <HAL_UART_IRQHandler+0x1ec>
    return;
 80080fa:	bf00      	nop
  }
}
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	080083e1 	.word	0x080083e1

08008108 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	bc80      	pop	{r7}
 8008118:	4770      	bx	lr

0800811a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr

0800812c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr

0800813e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008146:	bf00      	nop
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	bc80      	pop	{r7}
 800814e:	4770      	bx	lr

08008150 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	bc80      	pop	{r7}
 8008160:	4770      	bx	lr

08008162 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	d113      	bne.n	80081a6 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	695a      	ldr	r2, [r3, #20]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008192:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a2:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081a4:	e002      	b.n	80081ac <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f7ff ffae 	bl	8008108 <HAL_UART_TxCpltCallback>
}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f7ff ffa9 	bl	800811a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0320 	and.w	r3, r3, #32
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d11e      	bne.n	800822a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008200:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	695a      	ldr	r2, [r3, #20]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0201 	bic.w	r2, r2, #1
 8008210:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	695a      	ldr	r2, [r3, #20]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008220:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7ff ff7e 	bl	800812c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f7ff ff79 	bl	800813e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008264:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008270:	2b00      	cmp	r3, #0
 8008272:	bf14      	ite	ne
 8008274:	2301      	movne	r3, #1
 8008276:	2300      	moveq	r3, #0
 8008278:	b2db      	uxtb	r3, r3
 800827a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b21      	cmp	r3, #33	; 0x21
 8008286:	d108      	bne.n	800829a <UART_DMAError+0x46>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008294:	68b8      	ldr	r0, [r7, #8]
 8008296:	f000 f871 	bl	800837c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bf14      	ite	ne
 80082a8:	2301      	movne	r3, #1
 80082aa:	2300      	moveq	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b22      	cmp	r3, #34	; 0x22
 80082ba:	d108      	bne.n	80082ce <UART_DMAError+0x7a>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d005      	beq.n	80082ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80082c8:	68b8      	ldr	r0, [r7, #8]
 80082ca:	f000 f86c 	bl	80083a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d2:	f043 0210 	orr.w	r2, r3, #16
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082da:	68b8      	ldr	r0, [r7, #8]
 80082dc:	f7ff ff38 	bl	8008150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	4613      	mov	r3, r2
 80082f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f8:	e02c      	b.n	8008354 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d028      	beq.n	8008354 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <UART_WaitOnFlagUntilTimeout+0x30>
 8008308:	f7fa f9ae 	bl	8002668 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	429a      	cmp	r2, r3
 8008316:	d21d      	bcs.n	8008354 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008326:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	695a      	ldr	r2, [r3, #20]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0201 	bic.w	r2, r2, #1
 8008336:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e00f      	b.n	8008374 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4013      	ands	r3, r2
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	429a      	cmp	r2, r3
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	429a      	cmp	r2, r3
 8008370:	d0c3      	beq.n	80082fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008392:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2220      	movs	r2, #32
 8008398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bc80      	pop	{r7}
 80083a4:	4770      	bx	lr

080083a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	695a      	ldr	r2, [r3, #20]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	bc80      	pop	{r7}
 80083de:	4770      	bx	lr

080083e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f7ff fea8 	bl	8008150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008400:	bf00      	nop
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b21      	cmp	r3, #33	; 0x21
 800841a:	d144      	bne.n	80084a6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008424:	d11a      	bne.n	800845c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800843a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d105      	bne.n	8008450 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	1c9a      	adds	r2, r3, #2
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	621a      	str	r2, [r3, #32]
 800844e:	e00e      	b.n	800846e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	621a      	str	r2, [r3, #32]
 800845a:	e008      	b.n	800846e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	1c59      	adds	r1, r3, #1
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	6211      	str	r1, [r2, #32]
 8008466:	781a      	ldrb	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008472:	b29b      	uxth	r3, r3
 8008474:	3b01      	subs	r3, #1
 8008476:	b29b      	uxth	r3, r3
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	4619      	mov	r1, r3
 800847c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10f      	bne.n	80084a2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008490:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	e000      	b.n	80084a8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80084a6:	2302      	movs	r3, #2
  }
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bc80      	pop	{r7}
 80084b0:	4770      	bx	lr

080084b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff fe18 	bl	8008108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b22      	cmp	r3, #34	; 0x22
 80084f4:	d171      	bne.n	80085da <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fe:	d123      	bne.n	8008548 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008504:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10e      	bne.n	800852c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	b29b      	uxth	r3, r3
 8008516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851a:	b29a      	uxth	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008524:	1c9a      	adds	r2, r3, #2
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	629a      	str	r2, [r3, #40]	; 0x28
 800852a:	e029      	b.n	8008580 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	b29b      	uxth	r3, r3
 8008534:	b2db      	uxtb	r3, r3
 8008536:	b29a      	uxth	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	629a      	str	r2, [r3, #40]	; 0x28
 8008546:	e01b      	b.n	8008580 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6858      	ldr	r0, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855a:	1c59      	adds	r1, r3, #1
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	6291      	str	r1, [r2, #40]	; 0x28
 8008560:	b2c2      	uxtb	r2, r0
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e00c      	b.n	8008580 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	b2da      	uxtb	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	1c58      	adds	r0, r3, #1
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	6288      	str	r0, [r1, #40]	; 0x28
 8008578:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008584:	b29b      	uxth	r3, r3
 8008586:	3b01      	subs	r3, #1
 8008588:	b29b      	uxth	r3, r3
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	4619      	mov	r1, r3
 800858e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008590:	2b00      	cmp	r3, #0
 8008592:	d120      	bne.n	80085d6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68da      	ldr	r2, [r3, #12]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0220 	bic.w	r2, r2, #32
 80085a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	695a      	ldr	r2, [r3, #20]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0201 	bic.w	r2, r2, #1
 80085c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff fdad 	bl	800812c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	e002      	b.n	80085dc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	e000      	b.n	80085dc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80085da:	2302      	movs	r3, #2
  }
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	689a      	ldr	r2, [r3, #8]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800861e:	f023 030c 	bic.w	r3, r3, #12
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	68f9      	ldr	r1, [r7, #12]
 8008628:	430b      	orrs	r3, r1
 800862a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a52      	ldr	r2, [pc, #328]	; (8008790 <UART_SetConfig+0x1ac>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d14e      	bne.n	80086ea <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800864c:	f7fd fc3a 	bl	8005ec4 <HAL_RCC_GetPCLK2Freq>
 8008650:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009a      	lsls	r2, r3, #2
 800865c:	441a      	add	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	fbb2 f3f3 	udiv	r3, r2, r3
 8008668:	4a4a      	ldr	r2, [pc, #296]	; (8008794 <UART_SetConfig+0x1b0>)
 800866a:	fba2 2303 	umull	r2, r3, r2, r3
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	0119      	lsls	r1, r3, #4
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	4613      	mov	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	009a      	lsls	r2, r3, #2
 800867c:	441a      	add	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	fbb2 f2f3 	udiv	r2, r2, r3
 8008688:	4b42      	ldr	r3, [pc, #264]	; (8008794 <UART_SetConfig+0x1b0>)
 800868a:	fba3 0302 	umull	r0, r3, r3, r2
 800868e:	095b      	lsrs	r3, r3, #5
 8008690:	2064      	movs	r0, #100	; 0x64
 8008692:	fb00 f303 	mul.w	r3, r0, r3
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	011b      	lsls	r3, r3, #4
 800869a:	3332      	adds	r3, #50	; 0x32
 800869c:	4a3d      	ldr	r2, [pc, #244]	; (8008794 <UART_SetConfig+0x1b0>)
 800869e:	fba2 2303 	umull	r2, r3, r2, r3
 80086a2:	095b      	lsrs	r3, r3, #5
 80086a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086a8:	4419      	add	r1, r3
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009a      	lsls	r2, r3, #2
 80086b4:	441a      	add	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80086c0:	4b34      	ldr	r3, [pc, #208]	; (8008794 <UART_SetConfig+0x1b0>)
 80086c2:	fba3 0302 	umull	r0, r3, r3, r2
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	2064      	movs	r0, #100	; 0x64
 80086ca:	fb00 f303 	mul.w	r3, r0, r3
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	3332      	adds	r3, #50	; 0x32
 80086d4:	4a2f      	ldr	r2, [pc, #188]	; (8008794 <UART_SetConfig+0x1b0>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	f003 020f 	and.w	r2, r3, #15
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	440a      	add	r2, r1
 80086e6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80086e8:	e04d      	b.n	8008786 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80086ea:	f7fd fbd7 	bl	8005e9c <HAL_RCC_GetPCLK1Freq>
 80086ee:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009a      	lsls	r2, r3, #2
 80086fa:	441a      	add	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	fbb2 f3f3 	udiv	r3, r2, r3
 8008706:	4a23      	ldr	r2, [pc, #140]	; (8008794 <UART_SetConfig+0x1b0>)
 8008708:	fba2 2303 	umull	r2, r3, r2, r3
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	0119      	lsls	r1, r3, #4
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009a      	lsls	r2, r3, #2
 800871a:	441a      	add	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	fbb2 f2f3 	udiv	r2, r2, r3
 8008726:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <UART_SetConfig+0x1b0>)
 8008728:	fba3 0302 	umull	r0, r3, r3, r2
 800872c:	095b      	lsrs	r3, r3, #5
 800872e:	2064      	movs	r0, #100	; 0x64
 8008730:	fb00 f303 	mul.w	r3, r0, r3
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	3332      	adds	r3, #50	; 0x32
 800873a:	4a16      	ldr	r2, [pc, #88]	; (8008794 <UART_SetConfig+0x1b0>)
 800873c:	fba2 2303 	umull	r2, r3, r2, r3
 8008740:	095b      	lsrs	r3, r3, #5
 8008742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008746:	4419      	add	r1, r3
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009a      	lsls	r2, r3, #2
 8008752:	441a      	add	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	fbb2 f2f3 	udiv	r2, r2, r3
 800875e:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <UART_SetConfig+0x1b0>)
 8008760:	fba3 0302 	umull	r0, r3, r3, r2
 8008764:	095b      	lsrs	r3, r3, #5
 8008766:	2064      	movs	r0, #100	; 0x64
 8008768:	fb00 f303 	mul.w	r3, r0, r3
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	3332      	adds	r3, #50	; 0x32
 8008772:	4a08      	ldr	r2, [pc, #32]	; (8008794 <UART_SetConfig+0x1b0>)
 8008774:	fba2 2303 	umull	r2, r3, r2, r3
 8008778:	095b      	lsrs	r3, r3, #5
 800877a:	f003 020f 	and.w	r2, r3, #15
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	440a      	add	r2, r1
 8008784:	609a      	str	r2, [r3, #8]
}
 8008786:	bf00      	nop
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	40013800 	.word	0x40013800
 8008794:	51eb851f 	.word	0x51eb851f

08008798 <ControlTask>:
uint16_t TimeTick=0;
uint16_t BreathLed=0,ButtomCD=0;
uint8_t  DirFlag=0,ButtomState=0;

void ControlTask(void)
{
 8008798:	b598      	push	{r3, r4, r7, lr}
 800879a:	af00      	add	r7, sp, #0

	IMU_TASK();
 800879c:	f000 fef8 	bl	8009590 <IMU_TASK>
	if(TimeTick %10==0)
 80087a0:	4b8d      	ldr	r3, [pc, #564]	; (80089d8 <ControlTask+0x240>)
 80087a2:	881a      	ldrh	r2, [r3, #0]
 80087a4:	4b8d      	ldr	r3, [pc, #564]	; (80089dc <ControlTask+0x244>)
 80087a6:	fba3 1302 	umull	r1, r3, r3, r2
 80087aa:	08d9      	lsrs	r1, r3, #3
 80087ac:	460b      	mov	r3, r1
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <ControlTask+0x28>
		ButtonSense();
 80087bc:	f000 f926 	bl	8008a0c <ButtonSense>
	if(TimeTick %100==3)
 80087c0:	4b85      	ldr	r3, [pc, #532]	; (80089d8 <ControlTask+0x240>)
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	4a86      	ldr	r2, [pc, #536]	; (80089e0 <ControlTask+0x248>)
 80087c6:	fba2 1203 	umull	r1, r2, r2, r3
 80087ca:	0952      	lsrs	r2, r2, #5
 80087cc:	2164      	movs	r1, #100	; 0x64
 80087ce:	fb01 f202 	mul.w	r2, r1, r2
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	2b03      	cmp	r3, #3
 80087d8:	d101      	bne.n	80087de <ControlTask+0x46>
		SCM_ControlLoop();
 80087da:	f000 f999 	bl	8008b10 <SCM_ControlLoop>

	if(TimeTick %50==25){
 80087de:	4b7e      	ldr	r3, [pc, #504]	; (80089d8 <ControlTask+0x240>)
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	4a7f      	ldr	r2, [pc, #508]	; (80089e0 <ControlTask+0x248>)
 80087e4:	fba2 1203 	umull	r1, r2, r2, r3
 80087e8:	0912      	lsrs	r2, r2, #4
 80087ea:	2132      	movs	r1, #50	; 0x32
 80087ec:	fb01 f202 	mul.w	r2, r1, r2
 80087f0:	1a9b      	subs	r3, r3, r2
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b19      	cmp	r3, #25
 80087f6:	d105      	bne.n	8008804 <ControlTask+0x6c>
		Ina226_Read();
 80087f8:	f000 fe30 	bl	800945c <Ina226_Read>
		SCM_MonitorUpdate();
 80087fc:	f000 fb46 	bl	8008e8c <SCM_MonitorUpdate>
		SCM_CAN_Transmit();
 8008800:	f7f8 fed4 	bl	80015ac <SCM_CAN_Transmit>
	}
	if(TimeTick %50==15){
 8008804:	4b74      	ldr	r3, [pc, #464]	; (80089d8 <ControlTask+0x240>)
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	4a75      	ldr	r2, [pc, #468]	; (80089e0 <ControlTask+0x248>)
 800880a:	fba2 1203 	umull	r1, r2, r2, r3
 800880e:	0912      	lsrs	r2, r2, #4
 8008810:	2132      	movs	r1, #50	; 0x32
 8008812:	fb01 f202 	mul.w	r2, r1, r2
 8008816:	1a9b      	subs	r3, r3, r2
 8008818:	b29b      	uxth	r3, r3
 800881a:	2b0f      	cmp	r3, #15
 800881c:	d105      	bne.n	800882a <ControlTask+0x92>
//		MPU9255_Print();
//		printf("SetPower=%d,RealPower=%d,CapVol=%d\r\n",(int)SCM.SetPow,(int)SCM.CapPow,(int)SCM.CapVol);
//		printf("SetCur=%d,CapCur=%d,CapVol=%d\r\n",(int)SCM.SetCur,(int)SCM.CapCur,(int)SCM.CapVol/10);
//		printf("ChasisPower=%f,CapPower=%f\r\n",((float)SCM.BatPow)/1000.0,(float)SCM.CapPow/1000.0);
		if(UartTransmitEnableTime>0)
 800881e:	4b71      	ldr	r3, [pc, #452]	; (80089e4 <ControlTask+0x24c>)
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <ControlTask+0x92>
			USER_UART1_DMA_Transmit2Upper();
 8008826:	f001 fe0d 	bl	800a444 <USER_UART1_DMA_Transmit2Upper>


	}
	if(TimeTick%100==35)
 800882a:	4b6b      	ldr	r3, [pc, #428]	; (80089d8 <ControlTask+0x240>)
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	4a6c      	ldr	r2, [pc, #432]	; (80089e0 <ControlTask+0x248>)
 8008830:	fba2 1203 	umull	r1, r2, r2, r3
 8008834:	0952      	lsrs	r2, r2, #5
 8008836:	2164      	movs	r1, #100	; 0x64
 8008838:	fb01 f202 	mul.w	r2, r1, r2
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	b29b      	uxth	r3, r3
 8008840:	2b23      	cmp	r3, #35	; 0x23
 8008842:	d166      	bne.n	8008912 <ControlTask+0x17a>
	{
		WS2812SetColor(0,20,20,20);
 8008844:	2314      	movs	r3, #20
 8008846:	2214      	movs	r2, #20
 8008848:	2114      	movs	r1, #20
 800884a:	2000      	movs	r0, #0
 800884c:	f000 fcb2 	bl	80091b4 <WS2812SetColor>
		if(SCM.CAN_ConnectWDT==0)
 8008850:	4b65      	ldr	r3, [pc, #404]	; (80089e8 <ControlTask+0x250>)
 8008852:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <ControlTask+0xce>
			WS2812SetColor(1,40,0,0);
 8008858:	2300      	movs	r3, #0
 800885a:	2200      	movs	r2, #0
 800885c:	2128      	movs	r1, #40	; 0x28
 800885e:	2001      	movs	r0, #1
 8008860:	f000 fca8 	bl	80091b4 <WS2812SetColor>
 8008864:	e005      	b.n	8008872 <ControlTask+0xda>
		else
			WS2812SetColor(1,0,60,0);
 8008866:	2300      	movs	r3, #0
 8008868:	223c      	movs	r2, #60	; 0x3c
 800886a:	2100      	movs	r1, #0
 800886c:	2001      	movs	r0, #1
 800886e:	f000 fca1 	bl	80091b4 <WS2812SetColor>
		if(SCM.CapVol<SCM_Settings.Cap_MinVol_L)
 8008872:	4b5d      	ldr	r3, [pc, #372]	; (80089e8 <ControlTask+0x250>)
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	4b5d      	ldr	r3, [pc, #372]	; (80089ec <ControlTask+0x254>)
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	429a      	cmp	r2, r3
 800887c:	da20      	bge.n	80088c0 <ControlTask+0x128>
			WS2812SetColor(2,(uint8_t)40.0*((float)SCM.CapVol/(float)SCM_Settings.Cap_MinVol_L),0,0);
 800887e:	4b5a      	ldr	r3, [pc, #360]	; (80089e8 <ControlTask+0x250>)
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	4618      	mov	r0, r3
 8008884:	f7f8 fa96 	bl	8000db4 <__aeabi_i2f>
 8008888:	4604      	mov	r4, r0
 800888a:	4b58      	ldr	r3, [pc, #352]	; (80089ec <ControlTask+0x254>)
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	4618      	mov	r0, r3
 8008890:	f7f8 fa90 	bl	8000db4 <__aeabi_i2f>
 8008894:	4603      	mov	r3, r0
 8008896:	4619      	mov	r1, r3
 8008898:	4620      	mov	r0, r4
 800889a:	f7f8 fb93 	bl	8000fc4 <__aeabi_fdiv>
 800889e:	4603      	mov	r3, r0
 80088a0:	4953      	ldr	r1, [pc, #332]	; (80089f0 <ControlTask+0x258>)
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7f8 fada 	bl	8000e5c <__aeabi_fmul>
 80088a8:	4603      	mov	r3, r0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7f8 fcc2 	bl	8001234 <__aeabi_f2uiz>
 80088b0:	4603      	mov	r3, r0
 80088b2:	b2d9      	uxtb	r1, r3
 80088b4:	2300      	movs	r3, #0
 80088b6:	2200      	movs	r2, #0
 80088b8:	2002      	movs	r0, #2
 80088ba:	f000 fc7b 	bl	80091b4 <WS2812SetColor>
 80088be:	e026      	b.n	800890e <ControlTask+0x176>
		else
			WS2812SetColor(2,0,0,(uint8_t)100.0*(float)(SCM.CapVol-SCM_Settings.Cap_MinVol_L)/(float)(SCM_Settings.Cap_MaxVol_H-SCM_Settings.Cap_MinVol_L));
 80088c0:	4b49      	ldr	r3, [pc, #292]	; (80089e8 <ControlTask+0x250>)
 80088c2:	68da      	ldr	r2, [r3, #12]
 80088c4:	4b49      	ldr	r3, [pc, #292]	; (80089ec <ControlTask+0x254>)
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f8 fa72 	bl	8000db4 <__aeabi_i2f>
 80088d0:	4603      	mov	r3, r0
 80088d2:	4948      	ldr	r1, [pc, #288]	; (80089f4 <ControlTask+0x25c>)
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7f8 fac1 	bl	8000e5c <__aeabi_fmul>
 80088da:	4603      	mov	r3, r0
 80088dc:	461c      	mov	r4, r3
 80088de:	4b43      	ldr	r3, [pc, #268]	; (80089ec <ControlTask+0x254>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b42      	ldr	r3, [pc, #264]	; (80089ec <ControlTask+0x254>)
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7f8 fa63 	bl	8000db4 <__aeabi_i2f>
 80088ee:	4603      	mov	r3, r0
 80088f0:	4619      	mov	r1, r3
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7f8 fb66 	bl	8000fc4 <__aeabi_fdiv>
 80088f8:	4603      	mov	r3, r0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7f8 fc9a 	bl	8001234 <__aeabi_f2uiz>
 8008900:	4603      	mov	r3, r0
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2200      	movs	r2, #0
 8008906:	2100      	movs	r1, #0
 8008908:	2002      	movs	r0, #2
 800890a:	f000 fc53 	bl	80091b4 <WS2812SetColor>
		RGB_LedsArrayTransmit();
 800890e:	f000 fcb7 	bl	8009280 <RGB_LedsArrayTransmit>
	}
	if(TimeTick %500==27)
 8008912:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <ControlTask+0x240>)
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	4a38      	ldr	r2, [pc, #224]	; (80089f8 <ControlTask+0x260>)
 8008918:	fba2 1203 	umull	r1, r2, r2, r3
 800891c:	0952      	lsrs	r2, r2, #5
 800891e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008922:	fb01 f202 	mul.w	r2, r1, r2
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	b29b      	uxth	r3, r3
 800892a:	2b1b      	cmp	r3, #27
 800892c:	d101      	bne.n	8008932 <ControlTask+0x19a>
		SCM_Display();
 800892e:	f000 fb3d 	bl	8008fac <SCM_Display>

	if(UartTransmitEnableTime>0)
 8008932:	4b2c      	ldr	r3, [pc, #176]	; (80089e4 <ControlTask+0x24c>)
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <ControlTask+0x1ae>
		UartTransmitEnableTime--;
 800893a:	4b2a      	ldr	r3, [pc, #168]	; (80089e4 <ControlTask+0x24c>)
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	3b01      	subs	r3, #1
 8008940:	b29a      	uxth	r2, r3
 8008942:	4b28      	ldr	r3, [pc, #160]	; (80089e4 <ControlTask+0x24c>)
 8008944:	801a      	strh	r2, [r3, #0]
	//TimeTick Update
	TimeTick++;
 8008946:	4b24      	ldr	r3, [pc, #144]	; (80089d8 <ControlTask+0x240>)
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	4b22      	ldr	r3, [pc, #136]	; (80089d8 <ControlTask+0x240>)
 8008950:	801a      	strh	r2, [r3, #0]
	if(TimeTick>=10000)	TimeTick=0;
 8008952:	4b21      	ldr	r3, [pc, #132]	; (80089d8 <ControlTask+0x240>)
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	f242 720f 	movw	r2, #9999	; 0x270f
 800895a:	4293      	cmp	r3, r2
 800895c:	d902      	bls.n	8008964 <ControlTask+0x1cc>
 800895e:	4b1e      	ldr	r3, [pc, #120]	; (80089d8 <ControlTask+0x240>)
 8008960:	2200      	movs	r2, #0
 8008962:	801a      	strh	r2, [r3, #0]
	if(ButtomCD>0) ButtomCD--;
 8008964:	4b25      	ldr	r3, [pc, #148]	; (80089fc <ControlTask+0x264>)
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <ControlTask+0x1e0>
 800896c:	4b23      	ldr	r3, [pc, #140]	; (80089fc <ControlTask+0x264>)
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	4b21      	ldr	r3, [pc, #132]	; (80089fc <ControlTask+0x264>)
 8008976:	801a      	strh	r2, [r3, #0]
	//BreathLed
	 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, BreathLed); //Set dutyCycle
 8008978:	4b21      	ldr	r3, [pc, #132]	; (8008a00 <ControlTask+0x268>)
 800897a:	881a      	ldrh	r2, [r3, #0]
 800897c:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <ControlTask+0x26c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	641a      	str	r2, [r3, #64]	; 0x40
	if(DirFlag==1)
 8008982:	4b21      	ldr	r3, [pc, #132]	; (8008a08 <ControlTask+0x270>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d106      	bne.n	8008998 <ControlTask+0x200>
		BreathLed--;
 800898a:	4b1d      	ldr	r3, [pc, #116]	; (8008a00 <ControlTask+0x268>)
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	3b01      	subs	r3, #1
 8008990:	b29a      	uxth	r2, r3
 8008992:	4b1b      	ldr	r3, [pc, #108]	; (8008a00 <ControlTask+0x268>)
 8008994:	801a      	strh	r2, [r3, #0]
 8008996:	e005      	b.n	80089a4 <ControlTask+0x20c>
	else
		BreathLed++;
 8008998:	4b19      	ldr	r3, [pc, #100]	; (8008a00 <ControlTask+0x268>)
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	3301      	adds	r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	4b17      	ldr	r3, [pc, #92]	; (8008a00 <ControlTask+0x268>)
 80089a2:	801a      	strh	r2, [r3, #0]
	if(BreathLed <=500)
 80089a4:	4b16      	ldr	r3, [pc, #88]	; (8008a00 <ControlTask+0x268>)
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80089ac:	d806      	bhi.n	80089bc <ControlTask+0x224>
		{DirFlag=0;BreathLed=500;}
 80089ae:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <ControlTask+0x270>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	4b12      	ldr	r3, [pc, #72]	; (8008a00 <ControlTask+0x268>)
 80089b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80089ba:	801a      	strh	r2, [r3, #0]
	if(BreathLed >=2000)
 80089bc:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <ControlTask+0x268>)
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80089c4:	d306      	bcc.n	80089d4 <ControlTask+0x23c>
		{DirFlag=1;BreathLed=2000;}
 80089c6:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <ControlTask+0x270>)
 80089c8:	2201      	movs	r2, #1
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <ControlTask+0x268>)
 80089ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80089d2:	801a      	strh	r2, [r3, #0]

}
 80089d4:	bf00      	nop
 80089d6:	bd98      	pop	{r3, r4, r7, pc}
 80089d8:	20000604 	.word	0x20000604
 80089dc:	cccccccd 	.word	0xcccccccd
 80089e0:	51eb851f 	.word	0x51eb851f
 80089e4:	20000a1a 	.word	0x20000a1a
 80089e8:	20000e00 	.word	0x20000e00
 80089ec:	20000dcc 	.word	0x20000dcc
 80089f0:	42200000 	.word	0x42200000
 80089f4:	42c80000 	.word	0x42c80000
 80089f8:	10624dd3 	.word	0x10624dd3
 80089fc:	20000608 	.word	0x20000608
 8008a00:	20000606 	.word	0x20000606
 8008a04:	20000cbc 	.word	0x20000cbc
 8008a08:	2000060a 	.word	0x2000060a

08008a0c <ButtonSense>:
void ButtonSense(void){
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)==GPIO_PIN_RESET && ButtomCD ==0){
 8008a10:	2101      	movs	r1, #1
 8008a12:	4810      	ldr	r0, [pc, #64]	; (8008a54 <ButtonSense+0x48>)
 8008a14:	f7fb feae 	bl	8004774 <HAL_GPIO_ReadPin>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10a      	bne.n	8008a34 <ButtonSense+0x28>
 8008a1e:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <ButtonSense+0x4c>)
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d106      	bne.n	8008a34 <ButtonSense+0x28>
		ButtomState=1;
 8008a26:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <ButtonSense+0x50>)
 8008a28:	2201      	movs	r2, #1
 8008a2a:	701a      	strb	r2, [r3, #0]
		ButtomCD=1000;
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <ButtonSense+0x4c>)
 8008a2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a32:	801a      	strh	r2, [r3, #0]
	}
	if(ButtomState==1){
 8008a34:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <ButtonSense+0x50>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d108      	bne.n	8008a4e <ButtonSense+0x42>
		SCM_Next.Buck=0;
 8008a3c:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <ButtonSense+0x54>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	701a      	strb	r2, [r3, #0]
		SCM_Next.SetPow=0;
 8008a42:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <ButtonSense+0x54>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	605a      	str	r2, [r3, #4]
		ButtomState=0;
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <ButtonSense+0x50>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
	}

}
 8008a4e:	bf00      	nop
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	40011000 	.word	0x40011000
 8008a58:	20000608 	.word	0x20000608
 8008a5c:	2000060b 	.word	0x2000060b
 8008a60:	20000ddc 	.word	0x20000ddc

08008a64 <SCM_Init>:
char str[6][9+DispLen];
int32_t DisplayVal[6];
uint32_t TestVal;


void SCM_Init(void){
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
	SCM.Buck=SCM_Buck_Off;
 8008a68:	4b25      	ldr	r3, [pc, #148]	; (8008b00 <SCM_Init+0x9c>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
	SCM.Mode=SCM_Mode_Bat;
 8008a6e:	4b24      	ldr	r3, [pc, #144]	; (8008b00 <SCM_Init+0x9c>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	705a      	strb	r2, [r3, #1]
	SCM.ForceUseCap=0;
 8008a74:	4b22      	ldr	r3, [pc, #136]	; (8008b00 <SCM_Init+0x9c>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	709a      	strb	r2, [r3, #2]
	SCM.SetPow=0;
 8008a7a:	4b21      	ldr	r3, [pc, #132]	; (8008b00 <SCM_Init+0x9c>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	605a      	str	r2, [r3, #4]
	SCM.SetCur=0;
 8008a80:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <SCM_Init+0x9c>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	609a      	str	r2, [r3, #8]

	SCM.CapVol=0;
 8008a86:	4b1e      	ldr	r3, [pc, #120]	; (8008b00 <SCM_Init+0x9c>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	60da      	str	r2, [r3, #12]
	SCM.CapCur=0;
 8008a8c:	4b1c      	ldr	r3, [pc, #112]	; (8008b00 <SCM_Init+0x9c>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	611a      	str	r2, [r3, #16]
	SCM.CapPow=0;
 8008a92:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <SCM_Init+0x9c>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	615a      	str	r2, [r3, #20]
	SCM.BatVol=0;
 8008a98:	4b19      	ldr	r3, [pc, #100]	; (8008b00 <SCM_Init+0x9c>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	619a      	str	r2, [r3, #24]
	SCM.BatCur=0;
 8008a9e:	4b18      	ldr	r3, [pc, #96]	; (8008b00 <SCM_Init+0x9c>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	61da      	str	r2, [r3, #28]
	SCM.BatPow=0;
 8008aa4:	4b16      	ldr	r3, [pc, #88]	; (8008b00 <SCM_Init+0x9c>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	621a      	str	r2, [r3, #32]
	SCM.CAN_ConnectWDT=0;
 8008aaa:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <SCM_Init+0x9c>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	849a      	strh	r2, [r3, #36]	; 0x24

	SCM_Settings.Cap_MaxVol_H=Cap_MaxVol;
 8008ab0:	4b14      	ldr	r3, [pc, #80]	; (8008b04 <SCM_Init+0xa0>)
 8008ab2:	f246 6258 	movw	r2, #26200	; 0x6658
 8008ab6:	601a      	str	r2, [r3, #0]
	SCM_Settings.Cap_MaxVol_L=Cap_MaxVolLow;
 8008ab8:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <SCM_Init+0xa0>)
 8008aba:	f246 329c 	movw	r2, #25500	; 0x639c
 8008abe:	605a      	str	r2, [r3, #4]
	SCM_Settings.Cap_MinVol_H=Cap_MinVolHigh;
 8008ac0:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <SCM_Init+0xa0>)
 8008ac2:	f245 2208 	movw	r2, #21000	; 0x5208
 8008ac6:	609a      	str	r2, [r3, #8]
	SCM_Settings.Cap_MinVol_L=Cap_MinVol;
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <SCM_Init+0xa0>)
 8008aca:	f244 6250 	movw	r2, #18000	; 0x4650
 8008ace:	60da      	str	r2, [r3, #12]

	SCM_SettingsNext.Cap_MaxVol_H=Cap_MaxVol;
 8008ad0:	4b0d      	ldr	r3, [pc, #52]	; (8008b08 <SCM_Init+0xa4>)
 8008ad2:	f246 6258 	movw	r2, #26200	; 0x6658
 8008ad6:	601a      	str	r2, [r3, #0]
	SCM_SettingsNext.Cap_MaxVol_L=Cap_MaxVolLow;
 8008ad8:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <SCM_Init+0xa4>)
 8008ada:	f246 329c 	movw	r2, #25500	; 0x639c
 8008ade:	605a      	str	r2, [r3, #4]
	SCM_SettingsNext.Cap_MinVol_H=Cap_MinVolHigh;
 8008ae0:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <SCM_Init+0xa4>)
 8008ae2:	f245 2208 	movw	r2, #21000	; 0x5208
 8008ae6:	609a      	str	r2, [r3, #8]
	SCM_SettingsNext.Cap_MinVol_L=Cap_MinVol;
 8008ae8:	4b07      	ldr	r3, [pc, #28]	; (8008b08 <SCM_Init+0xa4>)
 8008aea:	f244 6250 	movw	r2, #18000	; 0x4650
 8008aee:	60da      	str	r2, [r3, #12]
	//Disable LTC1473 diode mode
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,GPIO_PIN_SET);
 8008af0:	2201      	movs	r2, #1
 8008af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008af6:	4805      	ldr	r0, [pc, #20]	; (8008b0c <SCM_Init+0xa8>)
 8008af8:	f7fb fe53 	bl	80047a2 <HAL_GPIO_WritePin>
}
 8008afc:	bf00      	nop
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20000e00 	.word	0x20000e00
 8008b04:	20000dcc 	.word	0x20000dcc
 8008b08:	20000e84 	.word	0x20000e84
 8008b0c:	40011000 	.word	0x40011000

08008b10 <SCM_ControlLoop>:

void SCM_ControlLoop(void){
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
	//SCM data update by CAN Rx interrupt: HAL_CAN_RxFifo0MsgPendingCallback()
	//The 12bits DAC of stm32f103 can't turn off the module totally, so only open buck when SetPow>1000.

	//Status Control
	SCM.ForceUseCap=SCM_Next.ForceUseCap;
 8008b14:	4b6c      	ldr	r3, [pc, #432]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008b16:	789a      	ldrb	r2, [r3, #2]
 8008b18:	4b6c      	ldr	r3, [pc, #432]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008b1a:	709a      	strb	r2, [r3, #2]

	SCM_Settings.Cap_MaxVol_H=SCM_SettingsNext.Cap_MaxVol_H;
 8008b1c:	4b6c      	ldr	r3, [pc, #432]	; (8008cd0 <SCM_ControlLoop+0x1c0>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a6c      	ldr	r2, [pc, #432]	; (8008cd4 <SCM_ControlLoop+0x1c4>)
 8008b22:	6013      	str	r3, [r2, #0]
	SCM_Settings.Cap_MaxVol_L=SCM_SettingsNext.Cap_MaxVol_L;
 8008b24:	4b6a      	ldr	r3, [pc, #424]	; (8008cd0 <SCM_ControlLoop+0x1c0>)
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	4a6a      	ldr	r2, [pc, #424]	; (8008cd4 <SCM_ControlLoop+0x1c4>)
 8008b2a:	6053      	str	r3, [r2, #4]
	SCM_Settings.Cap_MinVol_H=SCM_SettingsNext.Cap_MinVol_H;
 8008b2c:	4b68      	ldr	r3, [pc, #416]	; (8008cd0 <SCM_ControlLoop+0x1c0>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	4a68      	ldr	r2, [pc, #416]	; (8008cd4 <SCM_ControlLoop+0x1c4>)
 8008b32:	6093      	str	r3, [r2, #8]
	SCM_Settings.Cap_MinVol_L=SCM_SettingsNext.Cap_MinVol_L;
 8008b34:	4b66      	ldr	r3, [pc, #408]	; (8008cd0 <SCM_ControlLoop+0x1c0>)
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	4a66      	ldr	r2, [pc, #408]	; (8008cd4 <SCM_ControlLoop+0x1c4>)
 8008b3a:	60d3      	str	r3, [r2, #12]

	//From buck off to buck run
	if(SCM.Buck==SCM_Buck_Off && SCM_Next.Buck==SCM_Buck_Run){
 8008b3c:	4b63      	ldr	r3, [pc, #396]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d13a      	bne.n	8008bba <SCM_ControlLoop+0xaa>
 8008b44:	4b60      	ldr	r3, [pc, #384]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d136      	bne.n	8008bba <SCM_ControlLoop+0xaa>
		if(SCM.CapVol<SCM_Settings.Cap_MaxVol_L-1000 && SCM_Next.SetPow>1000){
 8008b4c:	4b5f      	ldr	r3, [pc, #380]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	4b60      	ldr	r3, [pc, #384]	; (8008cd4 <SCM_ControlLoop+0x1c4>)
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	da11      	bge.n	8008b80 <SCM_ControlLoop+0x70>
 8008b5c:	4b5a      	ldr	r3, [pc, #360]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b64:	dd0c      	ble.n	8008b80 <SCM_ControlLoop+0x70>
			SCM.Buck=SCM_Buck_Run;
 8008b66:	4b59      	ldr	r3, [pc, #356]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008b68:	2201      	movs	r2, #1
 8008b6a:	701a      	strb	r2, [r3, #0]
			SCM.SetPow=SCM_Next.SetPow;
 8008b6c:	4b56      	ldr	r3, [pc, #344]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	4a56      	ldr	r2, [pc, #344]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008b72:	6053      	str	r3, [r2, #4]
			SCM_SetPower(SCM.SetPow);
 8008b74:	4b55      	ldr	r3, [pc, #340]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f8b5 	bl	8008ce8 <SCM_SetPower>
		if(SCM.CapVol<SCM_Settings.Cap_MaxVol_L-1000 && SCM_Next.SetPow>1000){
 8008b7e:	e02a      	b.n	8008bd6 <SCM_ControlLoop+0xc6>
		}else if(SCM.CapVol<SCM_Settings.Cap_MaxVol_L&& SCM_Next.SetPow>1000){
 8008b80:	4b52      	ldr	r3, [pc, #328]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	4b53      	ldr	r3, [pc, #332]	; (8008cd4 <SCM_ControlLoop+0x1c4>)
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	da24      	bge.n	8008bd6 <SCM_ControlLoop+0xc6>
 8008b8c:	4b4e      	ldr	r3, [pc, #312]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b94:	dd1f      	ble.n	8008bd6 <SCM_ControlLoop+0xc6>
			SCM.Buck=SCM_Buck_Run;
 8008b96:	4b4d      	ldr	r3, [pc, #308]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008b98:	2201      	movs	r2, #1
 8008b9a:	701a      	strb	r2, [r3, #0]
			SCM.SetPow=SCM_Next.SetPow;
 8008b9c:	4b4a      	ldr	r3, [pc, #296]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4a4a      	ldr	r2, [pc, #296]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008ba2:	6053      	str	r3, [r2, #4]
			SCM_SetPower(SCM.SetPow>25000?25000:SCM.SetPow);
 8008ba4:	4b49      	ldr	r3, [pc, #292]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8008bac:	4293      	cmp	r3, r2
 8008bae:	bfa8      	it	ge
 8008bb0:	4613      	movge	r3, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f898 	bl	8008ce8 <SCM_SetPower>
		if(SCM.CapVol<SCM_Settings.Cap_MaxVol_L-1000 && SCM_Next.SetPow>1000){
 8008bb8:	e00d      	b.n	8008bd6 <SCM_ControlLoop+0xc6>
		}
	}else{ //Other status
		SCM.Buck=SCM_Next.Buck;
 8008bba:	4b43      	ldr	r3, [pc, #268]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	4b43      	ldr	r3, [pc, #268]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008bc0:	701a      	strb	r2, [r3, #0]
		SCM.SetPow=SCM_Next.SetPow;
 8008bc2:	4b41      	ldr	r3, [pc, #260]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	4a41      	ldr	r2, [pc, #260]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008bc8:	6053      	str	r3, [r2, #4]
		SCM_SetPower(SCM.SetPow);
 8008bca:	4b40      	ldr	r3, [pc, #256]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f88a 	bl	8008ce8 <SCM_SetPower>
 8008bd4:	e000      	b.n	8008bd8 <SCM_ControlLoop+0xc8>
		if(SCM.CapVol<SCM_Settings.Cap_MaxVol_L-1000 && SCM_Next.SetPow>1000){
 8008bd6:	bf00      	nop
	}
	//Cap voltage limitation
	if(SCM.CapVol>SCM_Settings.Cap_MaxVol_H||SCM.SetPow<1000){
 8008bd8:	4b3c      	ldr	r3, [pc, #240]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	4b3d      	ldr	r3, [pc, #244]	; (8008cd4 <SCM_ControlLoop+0x1c4>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	dc04      	bgt.n	8008bee <SCM_ControlLoop+0xde>
 8008be4:	4b39      	ldr	r3, [pc, #228]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bec:	da0a      	bge.n	8008c04 <SCM_ControlLoop+0xf4>
		SCM.Buck=SCM_Buck_Off;
 8008bee:	4b37      	ldr	r3, [pc, #220]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	701a      	strb	r2, [r3, #0]
		SCM.SetPow=0;
 8008bf4:	4b35      	ldr	r3, [pc, #212]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	605a      	str	r2, [r3, #4]
		SCM_SetPower(SCM.SetPow);
 8008bfa:	4b34      	ldr	r3, [pc, #208]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 f872 	bl	8008ce8 <SCM_SetPower>
	}
	//From Battery mode to Cap Mode
	if(SCM.Mode==SCM_Mode_Bat && SCM_Next.Mode==SCM_Mode_Cap){
 8008c04:	4b31      	ldr	r3, [pc, #196]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c06:	785b      	ldrb	r3, [r3, #1]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10d      	bne.n	8008c28 <SCM_ControlLoop+0x118>
 8008c0c:	4b2e      	ldr	r3, [pc, #184]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008c0e:	785b      	ldrb	r3, [r3, #1]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d109      	bne.n	8008c28 <SCM_ControlLoop+0x118>
		if(SCM.CapVol > SCM_Settings.Cap_MinVol_H)
 8008c14:	4b2d      	ldr	r3, [pc, #180]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	4b2e      	ldr	r3, [pc, #184]	; (8008cd4 <SCM_ControlLoop+0x1c4>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	dd07      	ble.n	8008c30 <SCM_ControlLoop+0x120>
			SCM.Mode=SCM_Mode_Cap;
 8008c20:	4b2a      	ldr	r3, [pc, #168]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c22:	2201      	movs	r2, #1
 8008c24:	705a      	strb	r2, [r3, #1]
		if(SCM.CapVol > SCM_Settings.Cap_MinVol_H)
 8008c26:	e003      	b.n	8008c30 <SCM_ControlLoop+0x120>

	}else
		SCM.Mode=SCM_Next.Mode;
 8008c28:	4b27      	ldr	r3, [pc, #156]	; (8008cc8 <SCM_ControlLoop+0x1b8>)
 8008c2a:	785a      	ldrb	r2, [r3, #1]
 8008c2c:	4b27      	ldr	r3, [pc, #156]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c2e:	705a      	strb	r2, [r3, #1]
	//Cap Voltage Limitation
	if(SCM.CapVol<SCM_Settings.Cap_MinVol_L)
 8008c30:	4b26      	ldr	r3, [pc, #152]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	4b27      	ldr	r3, [pc, #156]	; (8008cd4 <SCM_ControlLoop+0x1c4>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	da02      	bge.n	8008c42 <SCM_ControlLoop+0x132>
		SCM.Mode=SCM_Mode_Bat;
 8008c3c:	4b23      	ldr	r3, [pc, #140]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	705a      	strb	r2, [r3, #1]

	//GPIO Control
	if(SCM.Buck==SCM_Buck_Run)
 8008c42:	4b22      	ldr	r3, [pc, #136]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d105      	bne.n	8008c56 <SCM_ControlLoop+0x146>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	2108      	movs	r1, #8
 8008c4e:	4822      	ldr	r0, [pc, #136]	; (8008cd8 <SCM_ControlLoop+0x1c8>)
 8008c50:	f7fb fda7 	bl	80047a2 <HAL_GPIO_WritePin>
 8008c54:	e004      	b.n	8008c60 <SCM_ControlLoop+0x150>
	else
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 8008c56:	2200      	movs	r2, #0
 8008c58:	2108      	movs	r1, #8
 8008c5a:	481f      	ldr	r0, [pc, #124]	; (8008cd8 <SCM_ControlLoop+0x1c8>)
 8008c5c:	f7fb fda1 	bl	80047a2 <HAL_GPIO_WritePin>

	if(SCM.Mode==SCM_Mode_Cap||SCM.ForceUseCap){
 8008c60:	4b1a      	ldr	r3, [pc, #104]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c62:	785b      	ldrb	r3, [r3, #1]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d003      	beq.n	8008c70 <SCM_ControlLoop+0x160>
 8008c68:	4b18      	ldr	r3, [pc, #96]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c6a:	789b      	ldrb	r3, [r3, #2]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00f      	beq.n	8008c90 <SCM_ControlLoop+0x180>
		SCM.Mode=SCM_Mode_Cap;//强制切换为电容供电
 8008c70:	4b16      	ldr	r3, [pc, #88]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008c72:	2201      	movs	r2, #1
 8008c74:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_RESET);
 8008c76:	2200      	movs	r2, #0
 8008c78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008c7c:	4817      	ldr	r0, [pc, #92]	; (8008cdc <SCM_ControlLoop+0x1cc>)
 8008c7e:	f7fb fd90 	bl	80047a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_SET);
 8008c82:	2201      	movs	r2, #1
 8008c84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c88:	4814      	ldr	r0, [pc, #80]	; (8008cdc <SCM_ControlLoop+0x1cc>)
 8008c8a:	f7fb fd8a 	bl	80047a2 <HAL_GPIO_WritePin>
 8008c8e:	e00b      	b.n	8008ca8 <SCM_ControlLoop+0x198>
	}else
	{
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_SET);
 8008c90:	2201      	movs	r2, #1
 8008c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008c96:	4811      	ldr	r0, [pc, #68]	; (8008cdc <SCM_ControlLoop+0x1cc>)
 8008c98:	f7fb fd83 	bl	80047a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_RESET);
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ca2:	480e      	ldr	r0, [pc, #56]	; (8008cdc <SCM_ControlLoop+0x1cc>)
 8008ca4:	f7fb fd7d 	bl	80047a2 <HAL_GPIO_WritePin>
	}

	SCM_CanReceiveFlag=SCM_CAN_Ready;
 8008ca8:	4b0d      	ldr	r3, [pc, #52]	; (8008ce0 <SCM_ControlLoop+0x1d0>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
	if(SCM.CAN_ConnectWDT>0)
 8008cae:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008cb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d005      	beq.n	8008cc2 <SCM_ControlLoop+0x1b2>
		SCM.CAN_ConnectWDT--;
 8008cb6:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008cb8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <SCM_ControlLoop+0x1bc>)
 8008cc0:	849a      	strh	r2, [r3, #36]	; 0x24
	//Power Voltage Current monitor status update
	//Location: ControlTask.c
}
 8008cc2:	bf00      	nop
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000ddc 	.word	0x20000ddc
 8008ccc:	20000e00 	.word	0x20000e00
 8008cd0:	20000e84 	.word	0x20000e84
 8008cd4:	20000dcc 	.word	0x20000dcc
 8008cd8:	40010800 	.word	0x40010800
 8008cdc:	40011000 	.word	0x40011000
 8008ce0:	2000060c 	.word	0x2000060c
 8008ce4:	00000000 	.word	0x00000000

08008ce8 <SCM_SetPower>:
	uint16_t modified_SetCur=(uint16_t)SetCur/1.19;
	uint16_t val=(modified_SetCur/9600.0)*1.2/3.3*4096;
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,val);
}
//Uint mW
void SCM_SetPower(int32_t SetPow){
 8008ce8:	b5b0      	push	{r4, r5, r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	//Set minimum number avoid number/zero, or it will cause hardware fault.
	//???? Observe From test
	SetPow+=7000.0*((float)SCM.CapVol/(float)26000);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7f7 fbf3 	bl	80004dc <__aeabi_i2d>
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	4b5b      	ldr	r3, [pc, #364]	; (8008e68 <SCM_SetPower+0x180>)
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7f8 f858 	bl	8000db4 <__aeabi_i2f>
 8008d04:	4603      	mov	r3, r0
 8008d06:	4959      	ldr	r1, [pc, #356]	; (8008e6c <SCM_SetPower+0x184>)
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7f8 f95b 	bl	8000fc4 <__aeabi_fdiv>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7f7 fbf5 	bl	8000500 <__aeabi_f2d>
 8008d16:	a34e      	add	r3, pc, #312	; (adr r3, 8008e50 <SCM_SetPower+0x168>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	f7f7 fc48 	bl	80005b0 <__aeabi_dmul>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	4620      	mov	r0, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7f7 fa8c 	bl	8000244 <__adddf3>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	4618      	mov	r0, r3
 8008d32:	4621      	mov	r1, r4
 8008d34:	f7f7 feec 	bl	8000b10 <__aeabi_d2iz>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	607b      	str	r3, [r7, #4]

	if(SCM.CapVol>18700)
 8008d3c:	4b4a      	ldr	r3, [pc, #296]	; (8008e68 <SCM_SetPower+0x180>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f644 120c 	movw	r2, #18700	; 0x490c
 8008d44:	4293      	cmp	r3, r2
 8008d46:	dd03      	ble.n	8008d50 <SCM_SetPower+0x68>
		SetPow+=2300;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8008d4e:	607b      	str	r3, [r7, #4]
	//????
	int32_t CapVol=SCM.CapVol>500?SCM.CapVol:500;
 8008d50:	4b45      	ldr	r3, [pc, #276]	; (8008e68 <SCM_SetPower+0x180>)
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008d58:	bfb8      	it	lt
 8008d5a:	f44f 73fa 	movlt.w	r3, #500	; 0x1f4
 8008d5e:	617b      	str	r3, [r7, #20]
	float factor=0.83f;
 8008d60:	4b43      	ldr	r3, [pc, #268]	; (8008e70 <SCM_SetPower+0x188>)
 8008d62:	613b      	str	r3, [r7, #16]
	int32_t SetCur=SetPow/(factor*CapVol/1000.0);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7f7 fbb9 	bl	80004dc <__aeabi_i2d>
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	6978      	ldr	r0, [r7, #20]
 8008d70:	f7f8 f820 	bl	8000db4 <__aeabi_i2f>
 8008d74:	4603      	mov	r3, r0
 8008d76:	6939      	ldr	r1, [r7, #16]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7f8 f86f 	bl	8000e5c <__aeabi_fmul>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7f7 fbbd 	bl	8000500 <__aeabi_f2d>
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	4b3a      	ldr	r3, [pc, #232]	; (8008e74 <SCM_SetPower+0x18c>)
 8008d8c:	f7f7 fd3a 	bl	8000804 <__aeabi_ddiv>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4620      	mov	r0, r4
 8008d96:	4629      	mov	r1, r5
 8008d98:	f7f7 fd34 	bl	8000804 <__aeabi_ddiv>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	4618      	mov	r0, r3
 8008da2:	4621      	mov	r1, r4
 8008da4:	f7f7 feb4 	bl	8000b10 <__aeabi_d2iz>
 8008da8:	4603      	mov	r3, r0
 8008daa:	60fb      	str	r3, [r7, #12]
	//9000mA is the maximum output current of this module
	SetCur=SetCur>9000?9000:SetCur;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f242 3228 	movw	r2, #9000	; 0x2328
 8008db2:	4293      	cmp	r3, r2
 8008db4:	bfa8      	it	ge
 8008db6:	4613      	movge	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]
	uint16_t modified_SetCur=(uint16_t)SetCur/1.19;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7f7 fb8c 	bl	80004dc <__aeabi_i2d>
 8008dc4:	a324      	add	r3, pc, #144	; (adr r3, 8008e58 <SCM_SetPower+0x170>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	f7f7 fd1b 	bl	8000804 <__aeabi_ddiv>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7f7 fec3 	bl	8000b60 <__aeabi_d2uiz>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	817b      	strh	r3, [r7, #10]
	TestVal=modified_SetCur;
 8008dde:	897b      	ldrh	r3, [r7, #10]
 8008de0:	4a25      	ldr	r2, [pc, #148]	; (8008e78 <SCM_SetPower+0x190>)
 8008de2:	6013      	str	r3, [r2, #0]
	uint16_t val=(modified_SetCur/9600.0)*1.2/3.3*4096;
 8008de4:	897b      	ldrh	r3, [r7, #10]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7f7 fb78 	bl	80004dc <__aeabi_i2d>
 8008dec:	f04f 0200 	mov.w	r2, #0
 8008df0:	4b22      	ldr	r3, [pc, #136]	; (8008e7c <SCM_SetPower+0x194>)
 8008df2:	f7f7 fd07 	bl	8000804 <__aeabi_ddiv>
 8008df6:	4603      	mov	r3, r0
 8008df8:	460c      	mov	r4, r1
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8008e02:	4b1f      	ldr	r3, [pc, #124]	; (8008e80 <SCM_SetPower+0x198>)
 8008e04:	f7f7 fbd4 	bl	80005b0 <__aeabi_dmul>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	4621      	mov	r1, r4
 8008e10:	a313      	add	r3, pc, #76	; (adr r3, 8008e60 <SCM_SetPower+0x178>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fcf5 	bl	8000804 <__aeabi_ddiv>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	4618      	mov	r0, r3
 8008e20:	4621      	mov	r1, r4
 8008e22:	f04f 0200 	mov.w	r2, #0
 8008e26:	4b17      	ldr	r3, [pc, #92]	; (8008e84 <SCM_SetPower+0x19c>)
 8008e28:	f7f7 fbc2 	bl	80005b0 <__aeabi_dmul>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	4618      	mov	r0, r3
 8008e32:	4621      	mov	r1, r4
 8008e34:	f7f7 fe94 	bl	8000b60 <__aeabi_d2uiz>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	813b      	strh	r3, [r7, #8]
	HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,val);
 8008e3c:	893b      	ldrh	r3, [r7, #8]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2100      	movs	r1, #0
 8008e42:	4811      	ldr	r0, [pc, #68]	; (8008e88 <SCM_SetPower+0x1a0>)
 8008e44:	f7fa fe2a 	bl	8003a9c <HAL_DAC_SetValue>
}
 8008e48:	bf00      	nop
 8008e4a:	3718      	adds	r7, #24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e50:	00000000 	.word	0x00000000
 8008e54:	40bb5800 	.word	0x40bb5800
 8008e58:	70a3d70a 	.word	0x70a3d70a
 8008e5c:	3ff30a3d 	.word	0x3ff30a3d
 8008e60:	66666666 	.word	0x66666666
 8008e64:	400a6666 	.word	0x400a6666
 8008e68:	20000e00 	.word	0x20000e00
 8008e6c:	46cb2000 	.word	0x46cb2000
 8008e70:	3f547ae1 	.word	0x3f547ae1
 8008e74:	408f4000 	.word	0x408f4000
 8008e78:	20000dc8 	.word	0x20000dc8
 8008e7c:	40c2c000 	.word	0x40c2c000
 8008e80:	3ff33333 	.word	0x3ff33333
 8008e84:	40b00000 	.word	0x40b00000
 8008e88:	20000ac8 	.word	0x20000ac8

08008e8c <SCM_MonitorUpdate>:
//Assuming a maximum expected current of 32.768A
//Uint micro_
void SCM_MonitorUpdate(void){
 8008e8c:	b598      	push	{r3, r4, r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
	SCM.CapVol=(int32_t)InaVol[1]*1.25;
 8008e90:	4b31      	ldr	r3, [pc, #196]	; (8008f58 <SCM_MonitorUpdate+0xcc>)
 8008e92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f7 fb20 	bl	80004dc <__aeabi_i2d>
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	4b2e      	ldr	r3, [pc, #184]	; (8008f5c <SCM_MonitorUpdate+0xd0>)
 8008ea2:	f7f7 fb85 	bl	80005b0 <__aeabi_dmul>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	4621      	mov	r1, r4
 8008eae:	f7f7 fe2f 	bl	8000b10 <__aeabi_d2iz>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b2a      	ldr	r3, [pc, #168]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008eb6:	60da      	str	r2, [r3, #12]
	SCM.CapCur=(int32_t)InaCur[1];
 8008eb8:	4b2a      	ldr	r3, [pc, #168]	; (8008f64 <SCM_MonitorUpdate+0xd8>)
 8008eba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	4b27      	ldr	r3, [pc, #156]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008ec2:	611a      	str	r2, [r3, #16]
	SCM.CapPow=(int32_t)InaPow[1]*25;
 8008ec4:	4b28      	ldr	r3, [pc, #160]	; (8008f68 <SCM_MonitorUpdate+0xdc>)
 8008ec6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009a      	lsls	r2, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	4a22      	ldr	r2, [pc, #136]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008ed8:	6153      	str	r3, [r2, #20]
	SCM.BatVol=(int32_t)InaVol[0]*1.25;
 8008eda:	4b1f      	ldr	r3, [pc, #124]	; (8008f58 <SCM_MonitorUpdate+0xcc>)
 8008edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7f7 fafb 	bl	80004dc <__aeabi_i2d>
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	4b1c      	ldr	r3, [pc, #112]	; (8008f5c <SCM_MonitorUpdate+0xd0>)
 8008eec:	f7f7 fb60 	bl	80005b0 <__aeabi_dmul>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	f7f7 fe0a 	bl	8000b10 <__aeabi_d2iz>
 8008efc:	4602      	mov	r2, r0
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008f00:	619a      	str	r2, [r3, #24]
	SCM.BatCur=(int32_t)InaCur[0];
 8008f02:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <SCM_MonitorUpdate+0xd8>)
 8008f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4b15      	ldr	r3, [pc, #84]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008f0c:	61da      	str	r2, [r3, #28]
	SCM.BatPow=(int32_t)InaPow[0]*25;
 8008f0e:	4b16      	ldr	r3, [pc, #88]	; (8008f68 <SCM_MonitorUpdate+0xdc>)
 8008f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f14:	461a      	mov	r2, r3
 8008f16:	4613      	mov	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009a      	lsls	r2, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	4a0f      	ldr	r2, [pc, #60]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008f22:	6213      	str	r3, [r2, #32]

	DisplayVal[0]=SCM.CapVol;
 8008f24:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	4a10      	ldr	r2, [pc, #64]	; (8008f6c <SCM_MonitorUpdate+0xe0>)
 8008f2a:	6013      	str	r3, [r2, #0]
	DisplayVal[1]=SCM.CapCur;
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	4a0e      	ldr	r2, [pc, #56]	; (8008f6c <SCM_MonitorUpdate+0xe0>)
 8008f32:	6053      	str	r3, [r2, #4]
	DisplayVal[2]=SCM.CapPow;
 8008f34:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	4a0c      	ldr	r2, [pc, #48]	; (8008f6c <SCM_MonitorUpdate+0xe0>)
 8008f3a:	6093      	str	r3, [r2, #8]
	DisplayVal[3]=SCM.BatVol;
 8008f3c:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	4a0a      	ldr	r2, [pc, #40]	; (8008f6c <SCM_MonitorUpdate+0xe0>)
 8008f42:	60d3      	str	r3, [r2, #12]
	DisplayVal[4]=SCM.BatCur;
 8008f44:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	4a08      	ldr	r2, [pc, #32]	; (8008f6c <SCM_MonitorUpdate+0xe0>)
 8008f4a:	6113      	str	r3, [r2, #16]
	DisplayVal[5]=SCM.BatPow;
 8008f4c:	4b04      	ldr	r3, [pc, #16]	; (8008f60 <SCM_MonitorUpdate+0xd4>)
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	4a06      	ldr	r2, [pc, #24]	; (8008f6c <SCM_MonitorUpdate+0xe0>)
 8008f52:	6153      	str	r3, [r2, #20]

//	if(SCM.CapVol<Cap_MinVol)
//		SCM.EnergyPercent=0;
//	else
//		SCM.EnergyPercent=(uint16_t)1000*(SCM.CapVol*SCM.CapVol-Cap_MinVol*Cap_MinVol)/(Cap_MaxVol*Cap_MaxVol-Cap_MinVol*Cap_MinVol);
}
 8008f54:	bf00      	nop
 8008f56:	bd98      	pop	{r3, r4, r7, pc}
 8008f58:	20000f78 	.word	0x20000f78
 8008f5c:	3ff40000 	.word	0x3ff40000
 8008f60:	20000e00 	.word	0x20000e00
 8008f64:	20000f80 	.word	0x20000f80
 8008f68:	20000f74 	.word	0x20000f74
 8008f6c:	20000de8 	.word	0x20000de8

08008f70 <PowerOf10>:
uint32_t PowerOf10(uint8_t m){
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	71fb      	strb	r3, [r7, #7]
	uint32_t ret=1;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	60fb      	str	r3, [r7, #12]
	if(m==0) return ret;
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <PowerOf10+0x24>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	e00b      	b.n	8008fa0 <PowerOf10+0x30>
	while(m--) ret*=10;
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	1e5a      	subs	r2, r3, #1
 8008f98:	71fa      	strb	r2, [r7, #7]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f4      	bne.n	8008f88 <PowerOf10+0x18>
	return ret;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bc80      	pop	{r7}
 8008fa8:	4770      	bx	lr
	...

08008fac <SCM_Display>:
void SCM_Display(void){
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b089      	sub	sp, #36	; 0x24
 8008fb0:	af00      	add	r7, sp, #0
	strcpy(str[0],"CapVol=");
 8008fb2:	4a71      	ldr	r2, [pc, #452]	; (8009178 <SCM_Display+0x1cc>)
 8008fb4:	4b71      	ldr	r3, [pc, #452]	; (800917c <SCM_Display+0x1d0>)
 8008fb6:	cb03      	ldmia	r3!, {r0, r1}
 8008fb8:	6010      	str	r0, [r2, #0]
 8008fba:	6051      	str	r1, [r2, #4]
	strcpy(str[1],"CapCur=");
 8008fbc:	4a70      	ldr	r2, [pc, #448]	; (8009180 <SCM_Display+0x1d4>)
 8008fbe:	4b71      	ldr	r3, [pc, #452]	; (8009184 <SCM_Display+0x1d8>)
 8008fc0:	cb03      	ldmia	r3!, {r0, r1}
 8008fc2:	6010      	str	r0, [r2, #0]
 8008fc4:	6051      	str	r1, [r2, #4]
	strcpy(str[2],"CapPow=");
 8008fc6:	4a70      	ldr	r2, [pc, #448]	; (8009188 <SCM_Display+0x1dc>)
 8008fc8:	4b70      	ldr	r3, [pc, #448]	; (800918c <SCM_Display+0x1e0>)
 8008fca:	cb03      	ldmia	r3!, {r0, r1}
 8008fcc:	6010      	str	r0, [r2, #0]
 8008fce:	6051      	str	r1, [r2, #4]
	strcpy(str[3],"BatVol=");
 8008fd0:	4a6f      	ldr	r2, [pc, #444]	; (8009190 <SCM_Display+0x1e4>)
 8008fd2:	4b70      	ldr	r3, [pc, #448]	; (8009194 <SCM_Display+0x1e8>)
 8008fd4:	cb03      	ldmia	r3!, {r0, r1}
 8008fd6:	6010      	str	r0, [r2, #0]
 8008fd8:	6051      	str	r1, [r2, #4]
	strcpy(str[4],"BatCur=");
 8008fda:	4a6f      	ldr	r2, [pc, #444]	; (8009198 <SCM_Display+0x1ec>)
 8008fdc:	4b6f      	ldr	r3, [pc, #444]	; (800919c <SCM_Display+0x1f0>)
 8008fde:	cb03      	ldmia	r3!, {r0, r1}
 8008fe0:	6010      	str	r0, [r2, #0]
 8008fe2:	6051      	str	r1, [r2, #4]
	strcpy(str[5],"BatPow=");
 8008fe4:	4a6e      	ldr	r2, [pc, #440]	; (80091a0 <SCM_Display+0x1f4>)
 8008fe6:	4b6f      	ldr	r3, [pc, #444]	; (80091a4 <SCM_Display+0x1f8>)
 8008fe8:	cb03      	ldmia	r3!, {r0, r1}
 8008fea:	6010      	str	r0, [r2, #0]
 8008fec:	6051      	str	r1, [r2, #4]

	for(int i=0;i<6;i++)
 8008fee:	2300      	movs	r3, #0
 8008ff0:	61fb      	str	r3, [r7, #28]
 8008ff2:	e024      	b.n	800903e <SCM_Display+0x92>
		if(DisplayVal[i]>=0)
 8008ff4:	4a6c      	ldr	r2, [pc, #432]	; (80091a8 <SCM_Display+0x1fc>)
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	db09      	blt.n	8009014 <SCM_Display+0x68>
			str[i][7]=' ';
 8009000:	495d      	ldr	r1, [pc, #372]	; (8009178 <SCM_Display+0x1cc>)
 8009002:	69fa      	ldr	r2, [r7, #28]
 8009004:	4613      	mov	r3, r2
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	1a9b      	subs	r3, r3, r2
 800900a:	440b      	add	r3, r1
 800900c:	3307      	adds	r3, #7
 800900e:	2220      	movs	r2, #32
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	e011      	b.n	8009038 <SCM_Display+0x8c>
		else{
			str[i][7]='-';
 8009014:	4958      	ldr	r1, [pc, #352]	; (8009178 <SCM_Display+0x1cc>)
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	4613      	mov	r3, r2
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	1a9b      	subs	r3, r3, r2
 800901e:	440b      	add	r3, r1
 8009020:	3307      	adds	r3, #7
 8009022:	222d      	movs	r2, #45	; 0x2d
 8009024:	701a      	strb	r2, [r3, #0]
			DisplayVal[i]=-DisplayVal[i];
 8009026:	4a60      	ldr	r2, [pc, #384]	; (80091a8 <SCM_Display+0x1fc>)
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800902e:	425a      	negs	r2, r3
 8009030:	495d      	ldr	r1, [pc, #372]	; (80091a8 <SCM_Display+0x1fc>)
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<6;i++)
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	3301      	adds	r3, #1
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b05      	cmp	r3, #5
 8009042:	ddd7      	ble.n	8008ff4 <SCM_Display+0x48>
		}

	for(int i=0;i<6;i++)
 8009044:	2300      	movs	r3, #0
 8009046:	61bb      	str	r3, [r7, #24]
 8009048:	e030      	b.n	80090ac <SCM_Display+0x100>
		for(int j=0;j<DispLen;j++)
 800904a:	2300      	movs	r3, #0
 800904c:	617b      	str	r3, [r7, #20]
 800904e:	e027      	b.n	80090a0 <SCM_Display+0xf4>
			str[i][7+DispLen-j]=(char)(DisplayVal[i]/PowerOf10(j)%10+'0');
 8009050:	4a55      	ldr	r2, [pc, #340]	; (80091a8 <SCM_Display+0x1fc>)
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009058:	461c      	mov	r4, r3
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	4618      	mov	r0, r3
 8009060:	f7ff ff86 	bl	8008f70 <PowerOf10>
 8009064:	4603      	mov	r3, r0
 8009066:	fbb4 f1f3 	udiv	r1, r4, r3
 800906a:	4b50      	ldr	r3, [pc, #320]	; (80091ac <SCM_Display+0x200>)
 800906c:	fba3 2301 	umull	r2, r3, r3, r1
 8009070:	08da      	lsrs	r2, r3, #3
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	1aca      	subs	r2, r1, r3
 800907c:	b2d3      	uxtb	r3, r2
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	f1c2 010d 	rsb	r1, r2, #13
 8009084:	3330      	adds	r3, #48	; 0x30
 8009086:	b2dc      	uxtb	r4, r3
 8009088:	483b      	ldr	r0, [pc, #236]	; (8009178 <SCM_Display+0x1cc>)
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	4613      	mov	r3, r2
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	4403      	add	r3, r0
 8009094:	440b      	add	r3, r1
 8009096:	4622      	mov	r2, r4
 8009098:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<DispLen;j++)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	3301      	adds	r3, #1
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	2b05      	cmp	r3, #5
 80090a4:	ddd4      	ble.n	8009050 <SCM_Display+0xa4>
	for(int i=0;i<6;i++)
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	3301      	adds	r3, #1
 80090aa:	61bb      	str	r3, [r7, #24]
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	ddcb      	ble.n	800904a <SCM_Display+0x9e>

	for(int i=0;i<6;i++)
 80090b2:	2300      	movs	r3, #0
 80090b4:	613b      	str	r3, [r7, #16]
 80090b6:	e022      	b.n	80090fe <SCM_Display+0x152>
		for(int j=8;j<8+DispLen-1;j++)
 80090b8:	2308      	movs	r3, #8
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	e017      	b.n	80090ee <SCM_Display+0x142>
			if(str[i][j]=='0')
 80090be:	492e      	ldr	r1, [pc, #184]	; (8009178 <SCM_Display+0x1cc>)
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	4613      	mov	r3, r2
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	18ca      	adds	r2, r1, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	4413      	add	r3, r2
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b30      	cmp	r3, #48	; 0x30
 80090d2:	d110      	bne.n	80090f6 <SCM_Display+0x14a>
				str[i][j]=' ';
 80090d4:	4928      	ldr	r1, [pc, #160]	; (8009178 <SCM_Display+0x1cc>)
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4613      	mov	r3, r2
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	1a9b      	subs	r3, r3, r2
 80090de:	18ca      	adds	r2, r1, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	2220      	movs	r2, #32
 80090e6:	701a      	strb	r2, [r3, #0]
		for(int j=8;j<8+DispLen-1;j++)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3301      	adds	r3, #1
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b0c      	cmp	r3, #12
 80090f2:	dde4      	ble.n	80090be <SCM_Display+0x112>
 80090f4:	e000      	b.n	80090f8 <SCM_Display+0x14c>
			else
				break;
 80090f6:	bf00      	nop
	for(int i=0;i<6;i++)
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	3301      	adds	r3, #1
 80090fc:	613b      	str	r3, [r7, #16]
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b05      	cmp	r3, #5
 8009102:	ddd9      	ble.n	80090b8 <SCM_Display+0x10c>

	for(int i=0;i<6;i++)
 8009104:	2300      	movs	r3, #0
 8009106:	60bb      	str	r3, [r7, #8]
 8009108:	e00b      	b.n	8009122 <SCM_Display+0x176>
		str[i][8+DispLen]='\0';
 800910a:	491b      	ldr	r1, [pc, #108]	; (8009178 <SCM_Display+0x1cc>)
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	1a9b      	subs	r3, r3, r2
 8009114:	440b      	add	r3, r1
 8009116:	330e      	adds	r3, #14
 8009118:	2200      	movs	r2, #0
 800911a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	3301      	adds	r3, #1
 8009120:	60bb      	str	r3, [r7, #8]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2b05      	cmp	r3, #5
 8009126:	ddf0      	ble.n	800910a <SCM_Display+0x15e>
	//Display
	ssd1306_Fill(Black);
 8009128:	2000      	movs	r0, #0
 800912a:	f000 fe8f 	bl	8009e4c <ssd1306_Fill>
	for(int i=0;i<6;i++){
 800912e:	2300      	movs	r3, #0
 8009130:	607b      	str	r3, [r7, #4]
 8009132:	e018      	b.n	8009166 <SCM_Display+0x1ba>
		 ssd1306_SetCursor(3, 10*i);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	b2db      	uxtb	r3, r3
 8009138:	461a      	mov	r2, r3
 800913a:	0092      	lsls	r2, r2, #2
 800913c:	4413      	add	r3, r2
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	b2db      	uxtb	r3, r3
 8009142:	4619      	mov	r1, r3
 8009144:	2003      	movs	r0, #3
 8009146:	f000 ffcf 	bl	800a0e8 <ssd1306_SetCursor>
		 ssd1306_WriteString(str[i], Font_7x10, White);
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	4613      	mov	r3, r2
 800914e:	011b      	lsls	r3, r3, #4
 8009150:	1a9b      	subs	r3, r3, r2
 8009152:	4a09      	ldr	r2, [pc, #36]	; (8009178 <SCM_Display+0x1cc>)
 8009154:	1898      	adds	r0, r3, r2
 8009156:	4a16      	ldr	r2, [pc, #88]	; (80091b0 <SCM_Display+0x204>)
 8009158:	2301      	movs	r3, #1
 800915a:	ca06      	ldmia	r2, {r1, r2}
 800915c:	f000 ff9e 	bl	800a09c <ssd1306_WriteString>
	for(int i=0;i<6;i++){
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3301      	adds	r3, #1
 8009164:	607b      	str	r3, [r7, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b05      	cmp	r3, #5
 800916a:	dde3      	ble.n	8009134 <SCM_Display+0x188>
	}
	ssd1306_UpdateScreen();
 800916c:	f000 fe90 	bl	8009e90 <ssd1306_UpdateScreen>
}
 8009170:	bf00      	nop
 8009172:	3724      	adds	r7, #36	; 0x24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd90      	pop	{r4, r7, pc}
 8009178:	20000e28 	.word	0x20000e28
 800917c:	0800f73c 	.word	0x0800f73c
 8009180:	20000e37 	.word	0x20000e37
 8009184:	0800f744 	.word	0x0800f744
 8009188:	20000e46 	.word	0x20000e46
 800918c:	0800f74c 	.word	0x0800f74c
 8009190:	20000e55 	.word	0x20000e55
 8009194:	0800f754 	.word	0x0800f754
 8009198:	20000e64 	.word	0x20000e64
 800919c:	0800f75c 	.word	0x0800f75c
 80091a0:	20000e73 	.word	0x20000e73
 80091a4:	0800f764 	.word	0x0800f764
 80091a8:	20000de8 	.word	0x20000de8
 80091ac:	cccccccd 	.word	0xcccccccd
 80091b0:	2000040c 	.word	0x2000040c

080091b4 <WS2812SetColor>:
uint8_t LedsArray [(LED_COUNT_NUM+LED_COUNT_SET) * 24];\
int16_t LedsDataCount = 0;
WS2812CtlType WS2812ColorCtlValue[LED_COUNT_NUM+LED_COUNT_SET];

uint8_t WS2812SetColor(uint8_t index,uint8_t r,uint8_t g,uint8_t b)
{
 80091b4:	b490      	push	{r4, r7}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	4611      	mov	r1, r2
 80091c0:	461a      	mov	r2, r3
 80091c2:	4623      	mov	r3, r4
 80091c4:	71fb      	strb	r3, [r7, #7]
 80091c6:	4603      	mov	r3, r0
 80091c8:	71bb      	strb	r3, [r7, #6]
 80091ca:	460b      	mov	r3, r1
 80091cc:	717b      	strb	r3, [r7, #5]
 80091ce:	4613      	mov	r3, r2
 80091d0:	713b      	strb	r3, [r7, #4]
	if(index>=LED_COUNT_NUM)
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d901      	bls.n	80091dc <WS2812SetColor+0x28>
		return 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	e011      	b.n	8009200 <WS2812SetColor+0x4c>
	r= r>=0xFF ? 0xFF:r;
	g= g>=0xFF ? 0xFF:g;
	b= b>=0xFF ? 0xFF:b;

	WS2812ColorCtlValue[index].channel[0]=b;
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	490b      	ldr	r1, [pc, #44]	; (800920c <WS2812SetColor+0x58>)
 80091e0:	793a      	ldrb	r2, [r7, #4]
 80091e2:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	WS2812ColorCtlValue[index].channel[1]=r;
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	4a08      	ldr	r2, [pc, #32]	; (800920c <WS2812SetColor+0x58>)
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	79ba      	ldrb	r2, [r7, #6]
 80091f0:	705a      	strb	r2, [r3, #1]
	WS2812ColorCtlValue[index].channel[2]=g;
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	4a05      	ldr	r2, [pc, #20]	; (800920c <WS2812SetColor+0x58>)
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	797a      	ldrb	r2, [r7, #5]
 80091fc:	709a      	strb	r2, [r3, #2]
	return 1;
 80091fe:	2301      	movs	r3, #1
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bc90      	pop	{r4, r7}
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	20000f54 	.word	0x20000f54

08009210 <RGB_LED_Write_Byte>:
void RGB_LED_Write_Byte(uint32_t byte)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<24;i++)
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
 800921c:	e023      	b.n	8009266 <RGB_LED_Write_Byte+0x56>
		{
			if(byte&0x1000000)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00c      	beq.n	8009242 <RGB_LED_Write_Byte+0x32>
				{
				LedsArray[LedsDataCount++] = CODE1;
 8009228:	4b13      	ldr	r3, [pc, #76]	; (8009278 <RGB_LED_Write_Byte+0x68>)
 800922a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800922e:	b293      	uxth	r3, r2
 8009230:	3301      	adds	r3, #1
 8009232:	b29b      	uxth	r3, r3
 8009234:	b219      	sxth	r1, r3
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <RGB_LED_Write_Byte+0x68>)
 8009238:	8019      	strh	r1, [r3, #0]
 800923a:	4b10      	ldr	r3, [pc, #64]	; (800927c <RGB_LED_Write_Byte+0x6c>)
 800923c:	21f8      	movs	r1, #248	; 0xf8
 800923e:	5499      	strb	r1, [r3, r2]
 8009240:	e00b      	b.n	800925a <RGB_LED_Write_Byte+0x4a>
			}
			else
				{
				LedsArray[LedsDataCount++] = CODE0;
 8009242:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <RGB_LED_Write_Byte+0x68>)
 8009244:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009248:	b293      	uxth	r3, r2
 800924a:	3301      	adds	r3, #1
 800924c:	b29b      	uxth	r3, r3
 800924e:	b219      	sxth	r1, r3
 8009250:	4b09      	ldr	r3, [pc, #36]	; (8009278 <RGB_LED_Write_Byte+0x68>)
 8009252:	8019      	strh	r1, [r3, #0]
 8009254:	4b09      	ldr	r3, [pc, #36]	; (800927c <RGB_LED_Write_Byte+0x6c>)
 8009256:	21c0      	movs	r1, #192	; 0xc0
 8009258:	5499      	strb	r1, [r3, r2]
			}
		byte <<= 1;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	005b      	lsls	r3, r3, #1
 800925e:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0;i<24;i++)
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	3301      	adds	r3, #1
 8009264:	73fb      	strb	r3, [r7, #15]
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2b17      	cmp	r3, #23
 800926a:	d9d8      	bls.n	800921e <RGB_LED_Write_Byte+0xe>
	}
}
 800926c:	bf00      	nop
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	bc80      	pop	{r7}
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	2000060e 	.word	0x2000060e
 800927c:	20000e94 	.word	0x20000e94

08009280 <RGB_LedsArrayTransmit>:


void RGB_LedsArrayTransmit()
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i=0;i<LED_COUNT_NUM;i++)
 8009286:	2300      	movs	r3, #0
 8009288:	71fb      	strb	r3, [r7, #7]
 800928a:	e009      	b.n	80092a0 <RGB_LedsArrayTransmit+0x20>
		RGB_LED_Write_Byte(WS2812ColorCtlValue[i].raw_value);
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	4a1b      	ldr	r2, [pc, #108]	; (80092fc <RGB_LedsArrayTransmit+0x7c>)
 8009290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009294:	4618      	mov	r0, r3
 8009296:	f7ff ffbb 	bl	8009210 <RGB_LED_Write_Byte>
	for(i=0;i<LED_COUNT_NUM;i++)
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	3301      	adds	r3, #1
 800929e:	71fb      	strb	r3, [r7, #7]
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d9f2      	bls.n	800928c <RGB_LedsArrayTransmit+0xc>

	for(i=LedsDataCount;i<LedsDataCount+LED_COUNT_SET*24;i++)
 80092a6:	4b16      	ldr	r3, [pc, #88]	; (8009300 <RGB_LedsArrayTransmit+0x80>)
 80092a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092ac:	71fb      	strb	r3, [r7, #7]
 80092ae:	e006      	b.n	80092be <RGB_LedsArrayTransmit+0x3e>
		LedsArray[i] = 0;
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	4a14      	ldr	r2, [pc, #80]	; (8009304 <RGB_LedsArrayTransmit+0x84>)
 80092b4:	2100      	movs	r1, #0
 80092b6:	54d1      	strb	r1, [r2, r3]
	for(i=LedsDataCount;i<LedsDataCount+LED_COUNT_SET*24;i++)
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	3301      	adds	r3, #1
 80092bc:	71fb      	strb	r3, [r7, #7]
 80092be:	79fa      	ldrb	r2, [r7, #7]
 80092c0:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <RGB_LedsArrayTransmit+0x80>)
 80092c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092c6:	3378      	adds	r3, #120	; 0x78
 80092c8:	429a      	cmp	r2, r3
 80092ca:	dbf1      	blt.n	80092b0 <RGB_LedsArrayTransmit+0x30>

	if(HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_READY)
 80092cc:	480e      	ldr	r0, [pc, #56]	; (8009308 <RGB_LedsArrayTransmit+0x88>)
 80092ce:	f7fd fbea 	bl	8006aa6 <HAL_SPI_GetState>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d10a      	bne.n	80092ee <RGB_LedsArrayTransmit+0x6e>
		HAL_SPI_Transmit_DMA(&hspi3, LedsArray, LedsDataCount+LED_COUNT_SET*24);
 80092d8:	4b09      	ldr	r3, [pc, #36]	; (8009300 <RGB_LedsArrayTransmit+0x80>)
 80092da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	3378      	adds	r3, #120	; 0x78
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	4907      	ldr	r1, [pc, #28]	; (8009304 <RGB_LedsArrayTransmit+0x84>)
 80092e8:	4807      	ldr	r0, [pc, #28]	; (8009308 <RGB_LedsArrayTransmit+0x88>)
 80092ea:	f7fd fb13 	bl	8006914 <HAL_SPI_Transmit_DMA>
	LedsDataCount = 0;
 80092ee:	4b04      	ldr	r3, [pc, #16]	; (8009300 <RGB_LedsArrayTransmit+0x80>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	801a      	strh	r2, [r3, #0]

}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20000f54 	.word	0x20000f54
 8009300:	2000060e 	.word	0x2000060e
 8009304:	20000e94 	.word	0x20000e94
 8009308:	20000b88 	.word	0x20000b88

0800930c <crc32>:
    0x2d02ef8dL
};

/* crc32 hash */
uint32_t crc32(unsigned char* s, int len)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t crc32val = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	60bb      	str	r3, [r7, #8]
    crc32val ^= 0xFFFFFFFF;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	43db      	mvns	r3, r3
 800931e:	60bb      	str	r3, [r7, #8]

    for (i = 0;  i < len;  i++) {
 8009320:	2300      	movs	r3, #0
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	e011      	b.n	800934a <crc32+0x3e>
        crc32val = crc32_tab[(crc32val ^ s[i]) & 0xFF] ^ ((crc32val >> 8) & 0x00FFFFFF);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	4413      	add	r3, r2
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4053      	eors	r3, r2
 8009334:	b2db      	uxtb	r3, r3
 8009336:	4a0a      	ldr	r2, [pc, #40]	; (8009360 <crc32+0x54>)
 8009338:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	0a1b      	lsrs	r3, r3, #8
 8009340:	4053      	eors	r3, r2
 8009342:	60bb      	str	r3, [r7, #8]
    for (i = 0;  i < len;  i++) {
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	dbe9      	blt.n	8009326 <crc32+0x1a>
    }

    return crc32val ^ 0xFFFFFFFF;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	43db      	mvns	r3, r3
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	bc80      	pop	{r7}
 800935e:	4770      	bx	lr
 8009360:	2000000c 	.word	0x2000000c

08009364 <Ina226_Init>:

uint8_t Buffer[2];
//Storage the value read from ina226
int16_t InaVol[2],InaPow[2],InaCur[2];

void Ina226_Init(void){
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af04      	add	r7, sp, #16
	//Set averages number: 512 times
	Buffer[0]|=1<<11; //AVG2
 800936a:	4b3a      	ldr	r3, [pc, #232]	; (8009454 <Ina226_Init+0xf0>)
 800936c:	781a      	ldrb	r2, [r3, #0]
 800936e:	4b39      	ldr	r3, [pc, #228]	; (8009454 <Ina226_Init+0xf0>)
 8009370:	701a      	strb	r2, [r3, #0]
	Buffer[0]|=1<<10; //AVG2
 8009372:	4b38      	ldr	r3, [pc, #224]	; (8009454 <Ina226_Init+0xf0>)
 8009374:	781a      	ldrb	r2, [r3, #0]
 8009376:	4b37      	ldr	r3, [pc, #220]	; (8009454 <Ina226_Init+0xf0>)
 8009378:	701a      	strb	r2, [r3, #0]
	Buffer[0]|=1<<9;  //AVG2
 800937a:	4b36      	ldr	r3, [pc, #216]	; (8009454 <Ina226_Init+0xf0>)
 800937c:	781a      	ldrb	r2, [r3, #0]
 800937e:	4b35      	ldr	r3, [pc, #212]	; (8009454 <Ina226_Init+0xf0>)
 8009380:	701a      	strb	r2, [r3, #0]
	//Set Bus Voltage Conversion Time: 1.1ms
	Buffer[0]|=1<<8; //AVG2
 8009382:	4b34      	ldr	r3, [pc, #208]	; (8009454 <Ina226_Init+0xf0>)
 8009384:	781a      	ldrb	r2, [r3, #0]
 8009386:	4b33      	ldr	r3, [pc, #204]	; (8009454 <Ina226_Init+0xf0>)
 8009388:	701a      	strb	r2, [r3, #0]
	Buffer[1]|=0<<7; //AVG2
 800938a:	4b32      	ldr	r3, [pc, #200]	; (8009454 <Ina226_Init+0xf0>)
 800938c:	785a      	ldrb	r2, [r3, #1]
 800938e:	4b31      	ldr	r3, [pc, #196]	; (8009454 <Ina226_Init+0xf0>)
 8009390:	705a      	strb	r2, [r3, #1]
	Buffer[1]|=0<<6; //AVG2
 8009392:	4b30      	ldr	r3, [pc, #192]	; (8009454 <Ina226_Init+0xf0>)
 8009394:	785a      	ldrb	r2, [r3, #1]
 8009396:	4b2f      	ldr	r3, [pc, #188]	; (8009454 <Ina226_Init+0xf0>)
 8009398:	705a      	strb	r2, [r3, #1]
	//Set Shunt Voltage Conversion Time: 1.1ms
	Buffer[1]|=1<<5; //AVG2
 800939a:	4b2e      	ldr	r3, [pc, #184]	; (8009454 <Ina226_Init+0xf0>)
 800939c:	785b      	ldrb	r3, [r3, #1]
 800939e:	f043 0320 	orr.w	r3, r3, #32
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	4b2b      	ldr	r3, [pc, #172]	; (8009454 <Ina226_Init+0xf0>)
 80093a6:	705a      	strb	r2, [r3, #1]
	Buffer[1]|=0<<4; //AVG2
 80093a8:	4b2a      	ldr	r3, [pc, #168]	; (8009454 <Ina226_Init+0xf0>)
 80093aa:	785a      	ldrb	r2, [r3, #1]
 80093ac:	4b29      	ldr	r3, [pc, #164]	; (8009454 <Ina226_Init+0xf0>)
 80093ae:	705a      	strb	r2, [r3, #1]
	Buffer[1]|=0<<3; //AVG2
 80093b0:	4b28      	ldr	r3, [pc, #160]	; (8009454 <Ina226_Init+0xf0>)
 80093b2:	785a      	ldrb	r2, [r3, #1]
 80093b4:	4b27      	ldr	r3, [pc, #156]	; (8009454 <Ina226_Init+0xf0>)
 80093b6:	705a      	strb	r2, [r3, #1]
	//Set Operation Mode
	Buffer[1]|=1<<2; //AVG2
 80093b8:	4b26      	ldr	r3, [pc, #152]	; (8009454 <Ina226_Init+0xf0>)
 80093ba:	785b      	ldrb	r3, [r3, #1]
 80093bc:	f043 0304 	orr.w	r3, r3, #4
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <Ina226_Init+0xf0>)
 80093c4:	705a      	strb	r2, [r3, #1]
	Buffer[1]|=1<<1; //AVG2
 80093c6:	4b23      	ldr	r3, [pc, #140]	; (8009454 <Ina226_Init+0xf0>)
 80093c8:	785b      	ldrb	r3, [r3, #1]
 80093ca:	f043 0302 	orr.w	r3, r3, #2
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	4b20      	ldr	r3, [pc, #128]	; (8009454 <Ina226_Init+0xf0>)
 80093d2:	705a      	strb	r2, [r3, #1]
	Buffer[1]|=1;    //AVG2
 80093d4:	4b1f      	ldr	r3, [pc, #124]	; (8009454 <Ina226_Init+0xf0>)
 80093d6:	785b      	ldrb	r3, [r3, #1]
 80093d8:	f043 0301 	orr.w	r3, r3, #1
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <Ina226_Init+0xf0>)
 80093e0:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Mem_Write(&hi2c1,InaAdd1,ConfigReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 80093e2:	2364      	movs	r3, #100	; 0x64
 80093e4:	9302      	str	r3, [sp, #8]
 80093e6:	2302      	movs	r3, #2
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	4b1a      	ldr	r3, [pc, #104]	; (8009454 <Ina226_Init+0xf0>)
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	2301      	movs	r3, #1
 80093f0:	2200      	movs	r2, #0
 80093f2:	2182      	movs	r1, #130	; 0x82
 80093f4:	4818      	ldr	r0, [pc, #96]	; (8009458 <Ina226_Init+0xf4>)
 80093f6:	f7fb fb15 	bl	8004a24 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1,InaAdd2,ConfigReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 80093fa:	2364      	movs	r3, #100	; 0x64
 80093fc:	9302      	str	r3, [sp, #8]
 80093fe:	2302      	movs	r3, #2
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	4b14      	ldr	r3, [pc, #80]	; (8009454 <Ina226_Init+0xf0>)
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	2301      	movs	r3, #1
 8009408:	2200      	movs	r2, #0
 800940a:	2180      	movs	r1, #128	; 0x80
 800940c:	4812      	ldr	r0, [pc, #72]	; (8009458 <Ina226_Init+0xf4>)
 800940e:	f7fb fb09 	bl	8004a24 <HAL_I2C_Mem_Write>

	//Set Calibration Register 1mA/bit
	Buffer[0]=0x0A;
 8009412:	4b10      	ldr	r3, [pc, #64]	; (8009454 <Ina226_Init+0xf0>)
 8009414:	220a      	movs	r2, #10
 8009416:	701a      	strb	r2, [r3, #0]
	Buffer[1]=0x00;
 8009418:	4b0e      	ldr	r3, [pc, #56]	; (8009454 <Ina226_Init+0xf0>)
 800941a:	2200      	movs	r2, #0
 800941c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Mem_Write(&hi2c1,InaAdd1,CalibrationReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 800941e:	2364      	movs	r3, #100	; 0x64
 8009420:	9302      	str	r3, [sp, #8]
 8009422:	2302      	movs	r3, #2
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <Ina226_Init+0xf0>)
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	2301      	movs	r3, #1
 800942c:	2205      	movs	r2, #5
 800942e:	2182      	movs	r1, #130	; 0x82
 8009430:	4809      	ldr	r0, [pc, #36]	; (8009458 <Ina226_Init+0xf4>)
 8009432:	f7fb faf7 	bl	8004a24 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1,InaAdd2,CalibrationReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 8009436:	2364      	movs	r3, #100	; 0x64
 8009438:	9302      	str	r3, [sp, #8]
 800943a:	2302      	movs	r3, #2
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	4b05      	ldr	r3, [pc, #20]	; (8009454 <Ina226_Init+0xf0>)
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	2301      	movs	r3, #1
 8009444:	2205      	movs	r2, #5
 8009446:	2180      	movs	r1, #128	; 0x80
 8009448:	4803      	ldr	r0, [pc, #12]	; (8009458 <Ina226_Init+0xf4>)
 800944a:	f7fb faeb 	bl	8004a24 <HAL_I2C_Mem_Write>

}
 800944e:	bf00      	nop
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20000f7c 	.word	0x20000f7c
 8009458:	20000adc 	.word	0x20000adc

0800945c <Ina226_Read>:
void Ina226_Read(void){
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af04      	add	r7, sp, #16
	//Read bus voltage
	HAL_I2C_Mem_Read(&hi2c1,InaAdd1,VoltageReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 8009462:	2364      	movs	r3, #100	; 0x64
 8009464:	9302      	str	r3, [sp, #8]
 8009466:	2302      	movs	r3, #2
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	4b44      	ldr	r3, [pc, #272]	; (800957c <Ina226_Read+0x120>)
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2301      	movs	r3, #1
 8009470:	2202      	movs	r2, #2
 8009472:	2182      	movs	r1, #130	; 0x82
 8009474:	4842      	ldr	r0, [pc, #264]	; (8009580 <Ina226_Read+0x124>)
 8009476:	f7fb fbcf 	bl	8004c18 <HAL_I2C_Mem_Read>
	InaVol[0]=Buffer[0]<<8|Buffer[1];
 800947a:	4b40      	ldr	r3, [pc, #256]	; (800957c <Ina226_Read+0x120>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	021b      	lsls	r3, r3, #8
 8009480:	b21a      	sxth	r2, r3
 8009482:	4b3e      	ldr	r3, [pc, #248]	; (800957c <Ina226_Read+0x120>)
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	b21b      	sxth	r3, r3
 8009488:	4313      	orrs	r3, r2
 800948a:	b21a      	sxth	r2, r3
 800948c:	4b3d      	ldr	r3, [pc, #244]	; (8009584 <Ina226_Read+0x128>)
 800948e:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1,InaAdd2,VoltageReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 8009490:	2364      	movs	r3, #100	; 0x64
 8009492:	9302      	str	r3, [sp, #8]
 8009494:	2302      	movs	r3, #2
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	4b38      	ldr	r3, [pc, #224]	; (800957c <Ina226_Read+0x120>)
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	2301      	movs	r3, #1
 800949e:	2202      	movs	r2, #2
 80094a0:	2180      	movs	r1, #128	; 0x80
 80094a2:	4837      	ldr	r0, [pc, #220]	; (8009580 <Ina226_Read+0x124>)
 80094a4:	f7fb fbb8 	bl	8004c18 <HAL_I2C_Mem_Read>
	InaVol[1]=Buffer[0]<<8|Buffer[1];
 80094a8:	4b34      	ldr	r3, [pc, #208]	; (800957c <Ina226_Read+0x120>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	021b      	lsls	r3, r3, #8
 80094ae:	b21a      	sxth	r2, r3
 80094b0:	4b32      	ldr	r3, [pc, #200]	; (800957c <Ina226_Read+0x120>)
 80094b2:	785b      	ldrb	r3, [r3, #1]
 80094b4:	b21b      	sxth	r3, r3
 80094b6:	4313      	orrs	r3, r2
 80094b8:	b21a      	sxth	r2, r3
 80094ba:	4b32      	ldr	r3, [pc, #200]	; (8009584 <Ina226_Read+0x128>)
 80094bc:	805a      	strh	r2, [r3, #2]

	//Read power
	HAL_I2C_Mem_Read(&hi2c1,InaAdd1,PowerReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 80094be:	2364      	movs	r3, #100	; 0x64
 80094c0:	9302      	str	r3, [sp, #8]
 80094c2:	2302      	movs	r3, #2
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	4b2d      	ldr	r3, [pc, #180]	; (800957c <Ina226_Read+0x120>)
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	2301      	movs	r3, #1
 80094cc:	2203      	movs	r2, #3
 80094ce:	2182      	movs	r1, #130	; 0x82
 80094d0:	482b      	ldr	r0, [pc, #172]	; (8009580 <Ina226_Read+0x124>)
 80094d2:	f7fb fba1 	bl	8004c18 <HAL_I2C_Mem_Read>
	InaPow[0]=Buffer[0]<<8|Buffer[1];
 80094d6:	4b29      	ldr	r3, [pc, #164]	; (800957c <Ina226_Read+0x120>)
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	021b      	lsls	r3, r3, #8
 80094dc:	b21a      	sxth	r2, r3
 80094de:	4b27      	ldr	r3, [pc, #156]	; (800957c <Ina226_Read+0x120>)
 80094e0:	785b      	ldrb	r3, [r3, #1]
 80094e2:	b21b      	sxth	r3, r3
 80094e4:	4313      	orrs	r3, r2
 80094e6:	b21a      	sxth	r2, r3
 80094e8:	4b27      	ldr	r3, [pc, #156]	; (8009588 <Ina226_Read+0x12c>)
 80094ea:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1,InaAdd2,PowerReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 80094ec:	2364      	movs	r3, #100	; 0x64
 80094ee:	9302      	str	r3, [sp, #8]
 80094f0:	2302      	movs	r3, #2
 80094f2:	9301      	str	r3, [sp, #4]
 80094f4:	4b21      	ldr	r3, [pc, #132]	; (800957c <Ina226_Read+0x120>)
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	2301      	movs	r3, #1
 80094fa:	2203      	movs	r2, #3
 80094fc:	2180      	movs	r1, #128	; 0x80
 80094fe:	4820      	ldr	r0, [pc, #128]	; (8009580 <Ina226_Read+0x124>)
 8009500:	f7fb fb8a 	bl	8004c18 <HAL_I2C_Mem_Read>
	InaPow[1]=Buffer[0]<<8|Buffer[1];
 8009504:	4b1d      	ldr	r3, [pc, #116]	; (800957c <Ina226_Read+0x120>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	b21a      	sxth	r2, r3
 800950c:	4b1b      	ldr	r3, [pc, #108]	; (800957c <Ina226_Read+0x120>)
 800950e:	785b      	ldrb	r3, [r3, #1]
 8009510:	b21b      	sxth	r3, r3
 8009512:	4313      	orrs	r3, r2
 8009514:	b21a      	sxth	r2, r3
 8009516:	4b1c      	ldr	r3, [pc, #112]	; (8009588 <Ina226_Read+0x12c>)
 8009518:	805a      	strh	r2, [r3, #2]

	//Read current
	HAL_I2C_Mem_Read(&hi2c1,InaAdd1,CurrentReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 800951a:	2364      	movs	r3, #100	; 0x64
 800951c:	9302      	str	r3, [sp, #8]
 800951e:	2302      	movs	r3, #2
 8009520:	9301      	str	r3, [sp, #4]
 8009522:	4b16      	ldr	r3, [pc, #88]	; (800957c <Ina226_Read+0x120>)
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	2301      	movs	r3, #1
 8009528:	2204      	movs	r2, #4
 800952a:	2182      	movs	r1, #130	; 0x82
 800952c:	4814      	ldr	r0, [pc, #80]	; (8009580 <Ina226_Read+0x124>)
 800952e:	f7fb fb73 	bl	8004c18 <HAL_I2C_Mem_Read>
	InaCur[0]=Buffer[0]<<8|Buffer[1];
 8009532:	4b12      	ldr	r3, [pc, #72]	; (800957c <Ina226_Read+0x120>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	021b      	lsls	r3, r3, #8
 8009538:	b21a      	sxth	r2, r3
 800953a:	4b10      	ldr	r3, [pc, #64]	; (800957c <Ina226_Read+0x120>)
 800953c:	785b      	ldrb	r3, [r3, #1]
 800953e:	b21b      	sxth	r3, r3
 8009540:	4313      	orrs	r3, r2
 8009542:	b21a      	sxth	r2, r3
 8009544:	4b11      	ldr	r3, [pc, #68]	; (800958c <Ina226_Read+0x130>)
 8009546:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1,InaAdd2,CurrentReg,I2C_MEMADD_SIZE_8BIT,Buffer,2,100);
 8009548:	2364      	movs	r3, #100	; 0x64
 800954a:	9302      	str	r3, [sp, #8]
 800954c:	2302      	movs	r3, #2
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <Ina226_Read+0x120>)
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	2301      	movs	r3, #1
 8009556:	2204      	movs	r2, #4
 8009558:	2180      	movs	r1, #128	; 0x80
 800955a:	4809      	ldr	r0, [pc, #36]	; (8009580 <Ina226_Read+0x124>)
 800955c:	f7fb fb5c 	bl	8004c18 <HAL_I2C_Mem_Read>
	InaCur[1]=Buffer[0]<<8|Buffer[1];
 8009560:	4b06      	ldr	r3, [pc, #24]	; (800957c <Ina226_Read+0x120>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	b21a      	sxth	r2, r3
 8009568:	4b04      	ldr	r3, [pc, #16]	; (800957c <Ina226_Read+0x120>)
 800956a:	785b      	ldrb	r3, [r3, #1]
 800956c:	b21b      	sxth	r3, r3
 800956e:	4313      	orrs	r3, r2
 8009570:	b21a      	sxth	r2, r3
 8009572:	4b06      	ldr	r3, [pc, #24]	; (800958c <Ina226_Read+0x130>)
 8009574:	805a      	strh	r2, [r3, #2]

}
 8009576:	bf00      	nop
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000f7c 	.word	0x20000f7c
 8009580:	20000adc 	.word	0x20000adc
 8009584:	20000f78 	.word	0x20000f78
 8009588:	20000f74 	.word	0x20000f74
 800958c:	20000f80 	.word	0x20000f80

08009590 <IMU_TASK>:

float data1,data2,data3;
float accel1;

void IMU_TASK(void)
{
 8009590:	b5b0      	push	{r4, r5, r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af02      	add	r7, sp, #8
	MPU9255_Read(&MPU9255_raw_data_t);
 8009596:	480c      	ldr	r0, [pc, #48]	; (80095c8 <IMU_TASK+0x38>)
 8009598:	f000 fad0 	bl	8009b3c <MPU9255_Read>
	MPU9255_ConvertData( MPU9255_raw_data_t, &MPU9255_real_data_t);
 800959c:	4b0a      	ldr	r3, [pc, #40]	; (80095c8 <IMU_TASK+0x38>)
 800959e:	4a0b      	ldr	r2, [pc, #44]	; (80095cc <IMU_TASK+0x3c>)
 80095a0:	9200      	str	r2, [sp, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	2000      	movs	r0, #0
 80095a6:	4610      	mov	r0, r2
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	2100      	movs	r1, #0
 80095ac:	4611      	mov	r1, r2
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	2500      	movs	r5, #0
 80095b2:	4615      	mov	r5, r2
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	2400      	movs	r4, #0
 80095b8:	461c      	mov	r4, r3
 80095ba:	462a      	mov	r2, r5
 80095bc:	4623      	mov	r3, r4
 80095be:	f000 f807 	bl	80095d0 <MPU9255_ConvertData>

}
 80095c2:	bf00      	nop
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bdb0      	pop	{r4, r5, r7, pc}
 80095c8:	20001004 	.word	0x20001004
 80095cc:	20000fc0 	.word	0x20000fc0

080095d0 <MPU9255_ConvertData>:

uint16_t BUF_cnt=0;
uint16_t speed_cnt=0;

void MPU9255_ConvertData(struct MPU9255_RAW_DATA raw_data, struct MPU9255_REAL_DATA *real_data)
{
 80095d0:	b5b0      	push	{r4, r5, r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	463c      	mov	r4, r7
 80095d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	accel1=convert(raw_data.accel[0])/16384;
 80095dc:	883b      	ldrh	r3, [r7, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fa44 	bl	8009a6c <convert>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7f7 fcea 	bl	8000fc4 <__aeabi_fdiv>
 80095f0:	4603      	mov	r3, r0
 80095f2:	461a      	mov	r2, r3
 80095f4:	4bbe      	ldr	r3, [pc, #760]	; (80098f0 <MPU9255_ConvertData+0x320>)
 80095f6:	601a      	str	r2, [r3, #0]
	real_data->accel[0]=(((convert(raw_data.accel[0]))/16384)+1*sinf(real_data->angle[1]*3.14/180))*cosf(real_data->angle[1]*3.14/180);//单位g +0.95*sinf(real_data->angle[1]*3.14/180)
 80095f8:	883b      	ldrh	r3, [r7, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fa36 	bl	8009a6c <convert>
 8009600:	4603      	mov	r3, r0
 8009602:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8009606:	4618      	mov	r0, r3
 8009608:	f7f7 fcdc 	bl	8000fc4 <__aeabi_fdiv>
 800960c:	4603      	mov	r3, r0
 800960e:	461d      	mov	r5, r3
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	4618      	mov	r0, r3
 8009616:	f7f6 ff73 	bl	8000500 <__aeabi_f2d>
 800961a:	a3af      	add	r3, pc, #700	; (adr r3, 80098d8 <MPU9255_ConvertData+0x308>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f7f6 ffc6 	bl	80005b0 <__aeabi_dmul>
 8009624:	4603      	mov	r3, r0
 8009626:	460c      	mov	r4, r1
 8009628:	4618      	mov	r0, r3
 800962a:	4621      	mov	r1, r4
 800962c:	f04f 0200 	mov.w	r2, #0
 8009630:	4bb0      	ldr	r3, [pc, #704]	; (80098f4 <MPU9255_ConvertData+0x324>)
 8009632:	f7f7 f8e7 	bl	8000804 <__aeabi_ddiv>
 8009636:	4603      	mov	r3, r0
 8009638:	460c      	mov	r4, r1
 800963a:	4618      	mov	r0, r3
 800963c:	4621      	mov	r1, r4
 800963e:	f7f7 faaf 	bl	8000ba0 <__aeabi_d2f>
 8009642:	4603      	mov	r3, r0
 8009644:	4618      	mov	r0, r3
 8009646:	f005 faa9 	bl	800eb9c <sinf>
 800964a:	4603      	mov	r3, r0
 800964c:	4619      	mov	r1, r3
 800964e:	4628      	mov	r0, r5
 8009650:	f7f7 fafc 	bl	8000c4c <__addsf3>
 8009654:	4603      	mov	r3, r0
 8009656:	461d      	mov	r5, r3
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	4618      	mov	r0, r3
 800965e:	f7f6 ff4f 	bl	8000500 <__aeabi_f2d>
 8009662:	a39d      	add	r3, pc, #628	; (adr r3, 80098d8 <MPU9255_ConvertData+0x308>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f6 ffa2 	bl	80005b0 <__aeabi_dmul>
 800966c:	4603      	mov	r3, r0
 800966e:	460c      	mov	r4, r1
 8009670:	4618      	mov	r0, r3
 8009672:	4621      	mov	r1, r4
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	4b9e      	ldr	r3, [pc, #632]	; (80098f4 <MPU9255_ConvertData+0x324>)
 800967a:	f7f7 f8c3 	bl	8000804 <__aeabi_ddiv>
 800967e:	4603      	mov	r3, r0
 8009680:	460c      	mov	r4, r1
 8009682:	4618      	mov	r0, r3
 8009684:	4621      	mov	r1, r4
 8009686:	f7f7 fa8b 	bl	8000ba0 <__aeabi_d2f>
 800968a:	4603      	mov	r3, r0
 800968c:	4618      	mov	r0, r3
 800968e:	f005 fa51 	bl	800eb34 <cosf>
 8009692:	4603      	mov	r3, r0
 8009694:	4619      	mov	r1, r3
 8009696:	4628      	mov	r0, r5
 8009698:	f7f7 fbe0 	bl	8000e5c <__aeabi_fmul>
 800969c:	4603      	mov	r3, r0
 800969e:	461a      	mov	r2, r3
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	601a      	str	r2, [r3, #0]
//	real_data->accel[1]=(convert(raw_data.accel[1]))/16384-BUF[1];
//	real_data->accel[2]=(convert(raw_data.accel[2]))/16384-BUF[2]*cosf(real_data->angle[1]*3.14/180)-BUF[6];
//	real_data->gyro[0]=(convert(raw_data.gyro[0]))/131.2-BUF[3];//65.6
//	real_data->gyro[1]=(convert(raw_data.gyro[1]))/131.2-BUF[4];
//	real_data->gyro[2]=(convert(raw_data.gyro[2]))/131.2-BUF[5];
	if(fabs(real_data->gyro[0])>=0.5)
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096ac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7f7 fd85 	bl	80011c0 <__aeabi_fcmpge>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d01f      	beq.n	80096fc <MPU9255_ConvertData+0x12c>
		real_data->angle[0]+=real_data->gyro[0]*UpdataCycle;
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7f6 ff1d 	bl	8000500 <__aeabi_f2d>
 80096c6:	4604      	mov	r4, r0
 80096c8:	460d      	mov	r5, r1
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7f6 ff16 	bl	8000500 <__aeabi_f2d>
 80096d4:	a382      	add	r3, pc, #520	; (adr r3, 80098e0 <MPU9255_ConvertData+0x310>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	f7f6 ff69 	bl	80005b0 <__aeabi_dmul>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 fdad 	bl	8000244 <__adddf3>
 80096ea:	4603      	mov	r3, r0
 80096ec:	460c      	mov	r4, r1
 80096ee:	4618      	mov	r0, r3
 80096f0:	4621      	mov	r1, r4
 80096f2:	f7f7 fa55 	bl	8000ba0 <__aeabi_d2f>
 80096f6:	4602      	mov	r2, r0
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	629a      	str	r2, [r3, #40]	; 0x28
	if(fabs(real_data->gyro[1])>=0.5)
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009704:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009708:	4618      	mov	r0, r3
 800970a:	f7f7 fd59 	bl	80011c0 <__aeabi_fcmpge>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01f      	beq.n	8009754 <MPU9255_ConvertData+0x184>
		real_data->angle[1]+=real_data->gyro[1]*UpdataCycle;
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	4618      	mov	r0, r3
 800971a:	f7f6 fef1 	bl	8000500 <__aeabi_f2d>
 800971e:	4604      	mov	r4, r0
 8009720:	460d      	mov	r5, r1
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	4618      	mov	r0, r3
 8009728:	f7f6 feea 	bl	8000500 <__aeabi_f2d>
 800972c:	a36c      	add	r3, pc, #432	; (adr r3, 80098e0 <MPU9255_ConvertData+0x310>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7f6 ff3d 	bl	80005b0 <__aeabi_dmul>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	4620      	mov	r0, r4
 800973c:	4629      	mov	r1, r5
 800973e:	f7f6 fd81 	bl	8000244 <__adddf3>
 8009742:	4603      	mov	r3, r0
 8009744:	460c      	mov	r4, r1
 8009746:	4618      	mov	r0, r3
 8009748:	4621      	mov	r1, r4
 800974a:	f7f7 fa29 	bl	8000ba0 <__aeabi_d2f>
 800974e:	4602      	mov	r2, r0
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	62da      	str	r2, [r3, #44]	; 0x2c
	if(fabs(real_data->gyro[2])>=0.5)
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800975c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009760:	4618      	mov	r0, r3
 8009762:	f7f7 fd2d 	bl	80011c0 <__aeabi_fcmpge>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01f      	beq.n	80097ac <MPU9255_ConvertData+0x1dc>
		real_data->angle[2]+=real_data->gyro[2]*UpdataCycle;
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009770:	4618      	mov	r0, r3
 8009772:	f7f6 fec5 	bl	8000500 <__aeabi_f2d>
 8009776:	4604      	mov	r4, r0
 8009778:	460d      	mov	r5, r1
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	4618      	mov	r0, r3
 8009780:	f7f6 febe 	bl	8000500 <__aeabi_f2d>
 8009784:	a356      	add	r3, pc, #344	; (adr r3, 80098e0 <MPU9255_ConvertData+0x310>)
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f7f6 ff11 	bl	80005b0 <__aeabi_dmul>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4620      	mov	r0, r4
 8009794:	4629      	mov	r1, r5
 8009796:	f7f6 fd55 	bl	8000244 <__adddf3>
 800979a:	4603      	mov	r3, r0
 800979c:	460c      	mov	r4, r1
 800979e:	4618      	mov	r0, r3
 80097a0:	4621      	mov	r1, r4
 80097a2:	f7f7 f9fd 	bl	8000ba0 <__aeabi_d2f>
 80097a6:	4602      	mov	r2, r0
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	631a      	str	r2, [r3, #48]	; 0x30
	if(fabs(real_data->accel[0])>=0.03)
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7f6 fea3 	bl	8000500 <__aeabi_f2d>
 80097ba:	a34b      	add	r3, pc, #300	; (adr r3, 80098e8 <MPU9255_ConvertData+0x318>)
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	f7f7 f97c 	bl	8000abc <__aeabi_dcmpge>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d024      	beq.n	8009814 <MPU9255_ConvertData+0x244>
		real_data->speed[0]+=real_data->accel[0]*11*UpdataCycle;
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7f6 fe96 	bl	8000500 <__aeabi_f2d>
 80097d4:	4604      	mov	r4, r0
 80097d6:	460d      	mov	r5, r1
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4946      	ldr	r1, [pc, #280]	; (80098f8 <MPU9255_ConvertData+0x328>)
 80097de:	4618      	mov	r0, r3
 80097e0:	f7f7 fb3c 	bl	8000e5c <__aeabi_fmul>
 80097e4:	4603      	mov	r3, r0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7f6 fe8a 	bl	8000500 <__aeabi_f2d>
 80097ec:	a33c      	add	r3, pc, #240	; (adr r3, 80098e0 <MPU9255_ConvertData+0x310>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f7f6 fedd 	bl	80005b0 <__aeabi_dmul>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4620      	mov	r0, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	f7f6 fd21 	bl	8000244 <__adddf3>
 8009802:	4603      	mov	r3, r0
 8009804:	460c      	mov	r4, r1
 8009806:	4618      	mov	r0, r3
 8009808:	4621      	mov	r1, r4
 800980a:	f7f7 f9c9 	bl	8000ba0 <__aeabi_d2f>
 800980e:	4602      	mov	r2, r0
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	61da      	str	r2, [r3, #28]
	if(fabs(real_data->accel[1])>=0.03)
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800981c:	4618      	mov	r0, r3
 800981e:	f7f6 fe6f 	bl	8000500 <__aeabi_f2d>
 8009822:	a331      	add	r3, pc, #196	; (adr r3, 80098e8 <MPU9255_ConvertData+0x318>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f7 f948 	bl	8000abc <__aeabi_dcmpge>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d024      	beq.n	800987c <MPU9255_ConvertData+0x2ac>
		real_data->speed[1]+=real_data->accel[1]*11*UpdataCycle;
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	4618      	mov	r0, r3
 8009838:	f7f6 fe62 	bl	8000500 <__aeabi_f2d>
 800983c:	4604      	mov	r4, r0
 800983e:	460d      	mov	r5, r1
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	492c      	ldr	r1, [pc, #176]	; (80098f8 <MPU9255_ConvertData+0x328>)
 8009846:	4618      	mov	r0, r3
 8009848:	f7f7 fb08 	bl	8000e5c <__aeabi_fmul>
 800984c:	4603      	mov	r3, r0
 800984e:	4618      	mov	r0, r3
 8009850:	f7f6 fe56 	bl	8000500 <__aeabi_f2d>
 8009854:	a322      	add	r3, pc, #136	; (adr r3, 80098e0 <MPU9255_ConvertData+0x310>)
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f6 fea9 	bl	80005b0 <__aeabi_dmul>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4620      	mov	r0, r4
 8009864:	4629      	mov	r1, r5
 8009866:	f7f6 fced 	bl	8000244 <__adddf3>
 800986a:	4603      	mov	r3, r0
 800986c:	460c      	mov	r4, r1
 800986e:	4618      	mov	r0, r3
 8009870:	4621      	mov	r1, r4
 8009872:	f7f7 f995 	bl	8000ba0 <__aeabi_d2f>
 8009876:	4602      	mov	r2, r0
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	621a      	str	r2, [r3, #32]
	if(fabs(real_data->accel[2])>=0.03)
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009884:	4618      	mov	r0, r3
 8009886:	f7f6 fe3b 	bl	8000500 <__aeabi_f2d>
 800988a:	a317      	add	r3, pc, #92	; (adr r3, 80098e8 <MPU9255_ConvertData+0x318>)
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f7f7 f914 	bl	8000abc <__aeabi_dcmpge>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d038      	beq.n	800990c <MPU9255_ConvertData+0x33c>
		real_data->speed[2]+=real_data->accel[2]*11*UpdataCycle;
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989e:	4618      	mov	r0, r3
 80098a0:	f7f6 fe2e 	bl	8000500 <__aeabi_f2d>
 80098a4:	4604      	mov	r4, r0
 80098a6:	460d      	mov	r5, r1
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	4912      	ldr	r1, [pc, #72]	; (80098f8 <MPU9255_ConvertData+0x328>)
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7f7 fad4 	bl	8000e5c <__aeabi_fmul>
 80098b4:	4603      	mov	r3, r0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7f6 fe22 	bl	8000500 <__aeabi_f2d>
 80098bc:	a308      	add	r3, pc, #32	; (adr r3, 80098e0 <MPU9255_ConvertData+0x310>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fe75 	bl	80005b0 <__aeabi_dmul>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4620      	mov	r0, r4
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7f6 fcb9 	bl	8000244 <__adddf3>
 80098d2:	4603      	mov	r3, r0
 80098d4:	e012      	b.n	80098fc <MPU9255_ConvertData+0x32c>
 80098d6:	bf00      	nop
 80098d8:	51eb851f 	.word	0x51eb851f
 80098dc:	40091eb8 	.word	0x40091eb8
 80098e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80098e4:	3f50624d 	.word	0x3f50624d
 80098e8:	eb851eb8 	.word	0xeb851eb8
 80098ec:	3f9eb851 	.word	0x3f9eb851
 80098f0:	20001030 	.word	0x20001030
 80098f4:	40668000 	.word	0x40668000
 80098f8:	41300000 	.word	0x41300000
 80098fc:	460c      	mov	r4, r1
 80098fe:	4618      	mov	r0, r3
 8009900:	4621      	mov	r1, r4
 8009902:	f7f7 f94d 	bl	8000ba0 <__aeabi_d2f>
 8009906:	4602      	mov	r2, r0
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	625a      	str	r2, [r3, #36]	; 0x24

	if(fabs(accel1-BUF[0])<=0.02)
 800990c:	4b2e      	ldr	r3, [pc, #184]	; (80099c8 <MPU9255_ConvertData+0x3f8>)
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	4b2e      	ldr	r3, [pc, #184]	; (80099cc <MPU9255_ConvertData+0x3fc>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4619      	mov	r1, r3
 8009916:	4610      	mov	r0, r2
 8009918:	f7f7 f996 	bl	8000c48 <__aeabi_fsub>
 800991c:	4603      	mov	r3, r0
 800991e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009922:	4618      	mov	r0, r3
 8009924:	f7f6 fdec 	bl	8000500 <__aeabi_f2d>
 8009928:	a323      	add	r3, pc, #140	; (adr r3, 80099b8 <MPU9255_ConvertData+0x3e8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f7 f8bb 	bl	8000aa8 <__aeabi_dcmple>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d006      	beq.n	8009946 <MPU9255_ConvertData+0x376>
		BUF_cnt++;
 8009938:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <MPU9255_ConvertData+0x400>)
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	3301      	adds	r3, #1
 800993e:	b29a      	uxth	r2, r3
 8009940:	4b23      	ldr	r3, [pc, #140]	; (80099d0 <MPU9255_ConvertData+0x400>)
 8009942:	801a      	strh	r2, [r3, #0]
 8009944:	e002      	b.n	800994c <MPU9255_ConvertData+0x37c>
	else BUF_cnt=0;
 8009946:	4b22      	ldr	r3, [pc, #136]	; (80099d0 <MPU9255_ConvertData+0x400>)
 8009948:	2200      	movs	r2, #0
 800994a:	801a      	strh	r2, [r3, #0]
	if(BUF_cnt>=100)
 800994c:	4b20      	ldr	r3, [pc, #128]	; (80099d0 <MPU9255_ConvertData+0x400>)
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	2b63      	cmp	r3, #99	; 0x63
 8009952:	d906      	bls.n	8009962 <MPU9255_ConvertData+0x392>
	{
		real_data->angle[1]=0;
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	f04f 0200 	mov.w	r2, #0
 800995a:	62da      	str	r2, [r3, #44]	; 0x2c
		BUF_cnt=0;
 800995c:	4b1c      	ldr	r3, [pc, #112]	; (80099d0 <MPU9255_ConvertData+0x400>)
 800995e:	2200      	movs	r2, #0
 8009960:	801a      	strh	r2, [r3, #0]
	}

	if(fabs(real_data->accel[0])<=0.1)
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800996a:	4618      	mov	r0, r3
 800996c:	f7f6 fdc8 	bl	8000500 <__aeabi_f2d>
 8009970:	a313      	add	r3, pc, #76	; (adr r3, 80099c0 <MPU9255_ConvertData+0x3f0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f7 f897 	bl	8000aa8 <__aeabi_dcmple>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <MPU9255_ConvertData+0x3be>
		speed_cnt++;
 8009980:	4b14      	ldr	r3, [pc, #80]	; (80099d4 <MPU9255_ConvertData+0x404>)
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	3301      	adds	r3, #1
 8009986:	b29a      	uxth	r2, r3
 8009988:	4b12      	ldr	r3, [pc, #72]	; (80099d4 <MPU9255_ConvertData+0x404>)
 800998a:	801a      	strh	r2, [r3, #0]
 800998c:	e002      	b.n	8009994 <MPU9255_ConvertData+0x3c4>
	else speed_cnt=0;
 800998e:	4b11      	ldr	r3, [pc, #68]	; (80099d4 <MPU9255_ConvertData+0x404>)
 8009990:	2200      	movs	r2, #0
 8009992:	801a      	strh	r2, [r3, #0]
	if(speed_cnt>=100)
 8009994:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <MPU9255_ConvertData+0x404>)
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	2b63      	cmp	r3, #99	; 0x63
 800999a:	d906      	bls.n	80099aa <MPU9255_ConvertData+0x3da>
	{
		real_data->speed[0]=0;
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	f04f 0200 	mov.w	r2, #0
 80099a2:	61da      	str	r2, [r3, #28]
		speed_cnt=0;
 80099a4:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <MPU9255_ConvertData+0x404>)
 80099a6:	2200      	movs	r2, #0
 80099a8:	801a      	strh	r2, [r3, #0]
	}

}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bdb0      	pop	{r4, r5, r7, pc}
 80099b2:	bf00      	nop
 80099b4:	f3af 8000 	nop.w
 80099b8:	47ae147b 	.word	0x47ae147b
 80099bc:	3f947ae1 	.word	0x3f947ae1
 80099c0:	9999999a 	.word	0x9999999a
 80099c4:	3fb99999 	.word	0x3fb99999
 80099c8:	20001030 	.word	0x20001030
 80099cc:	20001014 	.word	0x20001014
 80099d0:	20000610 	.word	0x20000610
 80099d4:	20000612 	.word	0x20000612

080099d8 <MPU9255_Write_Reg>:
}


uint8_t MPU9255_Write_Reg(uint8_t reg,uint8_t value)

{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	460a      	mov	r2, r1
 80099e2:	71fb      	strb	r3, [r7, #7]
 80099e4:	4613      	mov	r3, r2
 80099e6:	71bb      	strb	r3, [r7, #6]

	uint8_t status;

	mpuCsEnable();											  //使能SPI传输
 80099e8:	f000 f93c 	bl	8009c64 <mpuCsEnable>

	status = HAL_SPI_Transmit(&hspi1, &reg, 1, 0xFFFF);
 80099ec:	1df9      	adds	r1, r7, #7
 80099ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099f2:	2201      	movs	r2, #1
 80099f4:	480a      	ldr	r0, [pc, #40]	; (8009a20 <MPU9255_Write_Reg+0x48>)
 80099f6:	f7fc fbae 	bl	8006156 <HAL_SPI_Transmit>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73fb      	strb	r3, [r7, #15]

	status = HAL_SPI_Transmit(&hspi1, &value, 1, 0xFFFF);
 80099fe:	1db9      	adds	r1, r7, #6
 8009a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a04:	2201      	movs	r2, #1
 8009a06:	4806      	ldr	r0, [pc, #24]	; (8009a20 <MPU9255_Write_Reg+0x48>)
 8009a08:	f7fc fba5 	bl	8006156 <HAL_SPI_Transmit>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]

	mpuCsDisable();										  	//禁止MPU9255
 8009a10:	f000 f934 	bl	8009c7c <mpuCsDisable>


	return(status);													//返回状态值
 8009a14:	7bfb      	ldrb	r3, [r7, #15]

}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20000c24 	.word	0x20000c24

08009a24 <MPU9255_Read_Reg>:


uint8_t MPU9255_Read_Reg(uint8_t reg)

{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	71fb      	strb	r3, [r7, #7]

	uint8_t reg_val;

	mpuCsEnable();
 8009a2e:	f000 f919 	bl	8009c64 <mpuCsEnable>

	reg = reg|0x80;
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1, &reg, 1, 0xFFFF);	 	//发送读命令+寄存器号
 8009a3c:	1df9      	adds	r1, r7, #7
 8009a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a42:	2201      	movs	r2, #1
 8009a44:	4808      	ldr	r0, [pc, #32]	; (8009a68 <MPU9255_Read_Reg+0x44>)
 8009a46:	f7fc fb86 	bl	8006156 <HAL_SPI_Transmit>

 	HAL_SPI_Receive(&hspi1, &reg_val, 1, 0xFFFF);				//读取寄存器值
 8009a4a:	f107 010f 	add.w	r1, r7, #15
 8009a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a52:	2201      	movs	r2, #1
 8009a54:	4804      	ldr	r0, [pc, #16]	; (8009a68 <MPU9255_Read_Reg+0x44>)
 8009a56:	f7fc fcb2 	bl	80063be <HAL_SPI_Receive>

 	mpuCsDisable();																//禁止SPI传输
 8009a5a:	f000 f90f 	bl	8009c7c <mpuCsDisable>


	return(reg_val);
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]

}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20000c24 	.word	0x20000c24

08009a6c <convert>:


float convert(uint16_t data)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	80fb      	strh	r3, [r7, #6]
	float data_out=0;
 8009a76:	f04f 0300 	mov.w	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]
	if(data>=0x8000)
 8009a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da0f      	bge.n	8009aa4 <convert+0x38>
		data_out=-(float)((data-0x8001)^0x7fff);
 8009a84:	88fb      	ldrh	r3, [r7, #6]
 8009a86:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8009a90:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7f7 f98d 	bl	8000db4 <__aeabi_i2f>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	e005      	b.n	8009ab0 <convert+0x44>
	else
		data_out=(float)data;
 8009aa4:	88fb      	ldrh	r3, [r7, #6]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7f7 f980 	bl	8000dac <__aeabi_ui2f>
 8009aac:	4603      	mov	r3, r0
 8009aae:	60fb      	str	r3, [r7, #12]
	return data_out;
 8009ab0:	68fb      	ldr	r3, [r7, #12]


}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <MPU9255_Init>:

uint8_t MPU9255_Init(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8009ac2:	20c8      	movs	r0, #200	; 0xc8
 8009ac4:	f7f8 fdda 	bl	800267c <HAL_Delay>
	uint8_t ack=MPU9255_Read_Reg(WHO_AM_I);
 8009ac8:	2075      	movs	r0, #117	; 0x75
 8009aca:	f7ff ffab 	bl	8009a24 <MPU9255_Read_Reg>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	71fb      	strb	r3, [r7, #7]
	if(ack==112)
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	2b70      	cmp	r3, #112	; 0x70
 8009ad6:	d124      	bne.n	8009b22 <MPU9255_Init+0x66>
	{
		MPU9255_Write_Reg(PWR_MGMT_1,0x80);  //解除休眠模式
 8009ad8:	2180      	movs	r1, #128	; 0x80
 8009ada:	206b      	movs	r0, #107	; 0x6b
 8009adc:	f7ff ff7c 	bl	80099d8 <MPU9255_Write_Reg>
//		HAL_Delay(200);
		MPU9255_Write_Reg(PWR_MGMT_1,0x00);
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	206b      	movs	r0, #107	; 0x6b
 8009ae4:	f7ff ff78 	bl	80099d8 <MPU9255_Write_Reg>
		MPU9255_Write_Reg(USER_CTRL,0x10 );
 8009ae8:	2110      	movs	r1, #16
 8009aea:	206a      	movs	r0, #106	; 0x6a
 8009aec:	f7ff ff74 	bl	80099d8 <MPU9255_Write_Reg>
		MPU9255_Write_Reg(CONFIG, 0x07);
 8009af0:	2107      	movs	r1, #7
 8009af2:	201a      	movs	r0, #26
 8009af4:	f7ff ff70 	bl	80099d8 <MPU9255_Write_Reg>

/*******************Init GYRO and ACCEL******************************/
		MPU9255_Write_Reg(SMPLRT_DIV, 0x00);      //1kHz
 8009af8:	2100      	movs	r1, #0
 8009afa:	2019      	movs	r0, #25
 8009afc:	f7ff ff6c 	bl	80099d8 <MPU9255_Write_Reg>
		MPU9255_Write_Reg(GYRO_CONFIG, 0x01);     //500deg/s
 8009b00:	2101      	movs	r1, #1
 8009b02:	201b      	movs	r0, #27
 8009b04:	f7ff ff68 	bl	80099d8 <MPU9255_Write_Reg>
		MPU9255_Write_Reg(ACCEL_CONFIG, 0x10);    //8g
 8009b08:	2110      	movs	r1, #16
 8009b0a:	201c      	movs	r0, #28
 8009b0c:	f7ff ff64 	bl	80099d8 <MPU9255_Write_Reg>
		MPU9255_Write_Reg(ACCEL_CONFIG_2, 0x08);  //高通滤波频率 0x08(1.13kHz)
 8009b10:	2108      	movs	r1, #8
 8009b12:	201d      	movs	r0, #29
 8009b14:	f7ff ff60 	bl	80099d8 <MPU9255_Write_Reg>

		printf("Initialize completed\n");
 8009b18:	4806      	ldr	r0, [pc, #24]	; (8009b34 <MPU9255_Init+0x78>)
 8009b1a:	f001 fdc7 	bl	800b6ac <puts>
		return true;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e003      	b.n	8009b2a <MPU9255_Init+0x6e>
	}
	else
	{
		printf("Initialize failed\n");
 8009b22:	4805      	ldr	r0, [pc, #20]	; (8009b38 <MPU9255_Init+0x7c>)
 8009b24:	f001 fdc2 	bl	800b6ac <puts>
		return false;
 8009b28:	2300      	movs	r3, #0
	}

}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	0800f76c 	.word	0x0800f76c
 8009b38:	0800f784 	.word	0x0800f784

08009b3c <MPU9255_Read>:


void MPU9255_Read(struct MPU9255_RAW_DATA *MPU9255_raw_data)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	uint8_t BUF[2];
	BUF[1]=MPU9255_Read_Reg(ACCEL_XOUT_H);
 8009b44:	203b      	movs	r0, #59	; 0x3b
 8009b46:	f7ff ff6d 	bl	8009a24 <MPU9255_Read_Reg>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	737b      	strb	r3, [r7, #13]
	BUF[0]=MPU9255_Read_Reg(ACCEL_XOUT_L);
 8009b4e:	203c      	movs	r0, #60	; 0x3c
 8009b50:	f7ff ff68 	bl	8009a24 <MPU9255_Read_Reg>
 8009b54:	4603      	mov	r3, r0
 8009b56:	733b      	strb	r3, [r7, #12]
	MPU9255_raw_data->accel[0]=(((uint16_t)BUF[1])<<8)|BUF[0];
 8009b58:	7b7b      	ldrb	r3, [r7, #13]
 8009b5a:	021b      	lsls	r3, r3, #8
 8009b5c:	b21a      	sxth	r2, r3
 8009b5e:	7b3b      	ldrb	r3, [r7, #12]
 8009b60:	b21b      	sxth	r3, r3
 8009b62:	4313      	orrs	r3, r2
 8009b64:	b21b      	sxth	r3, r3
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	801a      	strh	r2, [r3, #0]
	BUF[1]=MPU9255_Read_Reg(ACCEL_YOUT_H);
 8009b6c:	203d      	movs	r0, #61	; 0x3d
 8009b6e:	f7ff ff59 	bl	8009a24 <MPU9255_Read_Reg>
 8009b72:	4603      	mov	r3, r0
 8009b74:	737b      	strb	r3, [r7, #13]
	BUF[0]=MPU9255_Read_Reg(ACCEL_YOUT_L);
 8009b76:	203e      	movs	r0, #62	; 0x3e
 8009b78:	f7ff ff54 	bl	8009a24 <MPU9255_Read_Reg>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	733b      	strb	r3, [r7, #12]
	MPU9255_raw_data->accel[1]=(((uint16_t)BUF[1])<<8)|BUF[0];
 8009b80:	7b7b      	ldrb	r3, [r7, #13]
 8009b82:	021b      	lsls	r3, r3, #8
 8009b84:	b21a      	sxth	r2, r3
 8009b86:	7b3b      	ldrb	r3, [r7, #12]
 8009b88:	b21b      	sxth	r3, r3
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	b21b      	sxth	r3, r3
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	805a      	strh	r2, [r3, #2]
	BUF[1]=MPU9255_Read_Reg(ACCEL_ZOUT_H);
 8009b94:	203f      	movs	r0, #63	; 0x3f
 8009b96:	f7ff ff45 	bl	8009a24 <MPU9255_Read_Reg>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	737b      	strb	r3, [r7, #13]
	BUF[0]=MPU9255_Read_Reg(ACCEL_ZOUT_L);
 8009b9e:	2040      	movs	r0, #64	; 0x40
 8009ba0:	f7ff ff40 	bl	8009a24 <MPU9255_Read_Reg>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	733b      	strb	r3, [r7, #12]
	MPU9255_raw_data->accel[2]=(((uint16_t)BUF[1])<<8)|BUF[0];
 8009ba8:	7b7b      	ldrb	r3, [r7, #13]
 8009baa:	021b      	lsls	r3, r3, #8
 8009bac:	b21a      	sxth	r2, r3
 8009bae:	7b3b      	ldrb	r3, [r7, #12]
 8009bb0:	b21b      	sxth	r3, r3
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	b21b      	sxth	r3, r3
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	809a      	strh	r2, [r3, #4]
	BUF[1]=MPU9255_Read_Reg(GYRO_XOUT_H);
 8009bbc:	2043      	movs	r0, #67	; 0x43
 8009bbe:	f7ff ff31 	bl	8009a24 <MPU9255_Read_Reg>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	737b      	strb	r3, [r7, #13]
	BUF[0]=MPU9255_Read_Reg(GYRO_XOUT_L);
 8009bc6:	2044      	movs	r0, #68	; 0x44
 8009bc8:	f7ff ff2c 	bl	8009a24 <MPU9255_Read_Reg>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	733b      	strb	r3, [r7, #12]
	MPU9255_raw_data->gyro[0]=(((uint16_t)BUF[1])<<8)|BUF[0];
 8009bd0:	7b7b      	ldrb	r3, [r7, #13]
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	b21a      	sxth	r2, r3
 8009bd6:	7b3b      	ldrb	r3, [r7, #12]
 8009bd8:	b21b      	sxth	r3, r3
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	b21b      	sxth	r3, r3
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	811a      	strh	r2, [r3, #8]
	BUF[1]=MPU9255_Read_Reg(GYRO_YOUT_H);
 8009be4:	2045      	movs	r0, #69	; 0x45
 8009be6:	f7ff ff1d 	bl	8009a24 <MPU9255_Read_Reg>
 8009bea:	4603      	mov	r3, r0
 8009bec:	737b      	strb	r3, [r7, #13]
	BUF[0]=MPU9255_Read_Reg(GYRO_YOUT_L);
 8009bee:	2046      	movs	r0, #70	; 0x46
 8009bf0:	f7ff ff18 	bl	8009a24 <MPU9255_Read_Reg>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	733b      	strb	r3, [r7, #12]
	MPU9255_raw_data->gyro[1]=(((uint16_t)BUF[1])<<8)|BUF[0];
 8009bf8:	7b7b      	ldrb	r3, [r7, #13]
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	b21a      	sxth	r2, r3
 8009bfe:	7b3b      	ldrb	r3, [r7, #12]
 8009c00:	b21b      	sxth	r3, r3
 8009c02:	4313      	orrs	r3, r2
 8009c04:	b21b      	sxth	r3, r3
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	815a      	strh	r2, [r3, #10]
	BUF[1]=MPU9255_Read_Reg(GYRO_ZOUT_H);
 8009c0c:	2047      	movs	r0, #71	; 0x47
 8009c0e:	f7ff ff09 	bl	8009a24 <MPU9255_Read_Reg>
 8009c12:	4603      	mov	r3, r0
 8009c14:	737b      	strb	r3, [r7, #13]
	BUF[0]=MPU9255_Read_Reg(GYRO_ZOUT_L);
 8009c16:	2048      	movs	r0, #72	; 0x48
 8009c18:	f7ff ff04 	bl	8009a24 <MPU9255_Read_Reg>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	733b      	strb	r3, [r7, #12]
	MPU9255_raw_data->gyro[2]=(((uint16_t)BUF[1])<<8)|BUF[0];
 8009c20:	7b7b      	ldrb	r3, [r7, #13]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	b21a      	sxth	r2, r3
 8009c26:	7b3b      	ldrb	r3, [r7, #12]
 8009c28:	b21b      	sxth	r3, r3
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	b21b      	sxth	r3, r3
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	819a      	strh	r2, [r3, #12]
	BUF[1]=MPU9255_Read_Reg(TEMP_OUT_H);
 8009c34:	2041      	movs	r0, #65	; 0x41
 8009c36:	f7ff fef5 	bl	8009a24 <MPU9255_Read_Reg>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	737b      	strb	r3, [r7, #13]
	BUF[0]=MPU9255_Read_Reg(TEMP_OUT_L);
 8009c3e:	2042      	movs	r0, #66	; 0x42
 8009c40:	f7ff fef0 	bl	8009a24 <MPU9255_Read_Reg>
 8009c44:	4603      	mov	r3, r0
 8009c46:	733b      	strb	r3, [r7, #12]
	MPU9255_raw_data->temp=(((uint16_t)BUF[1])<<8)|BUF[0];
 8009c48:	7b7b      	ldrb	r3, [r7, #13]
 8009c4a:	021b      	lsls	r3, r3, #8
 8009c4c:	b21a      	sxth	r2, r3
 8009c4e:	7b3b      	ldrb	r3, [r7, #12]
 8009c50:	b21b      	sxth	r3, r3
 8009c52:	4313      	orrs	r3, r2
 8009c54:	b21b      	sxth	r3, r3
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	80da      	strh	r2, [r3, #6]
}
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <mpuCsEnable>:



void mpuCsEnable()
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9255_Port_CS, MPU9255_Pin_CS, GPIO_PIN_RESET);
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2110      	movs	r1, #16
 8009c6c:	4802      	ldr	r0, [pc, #8]	; (8009c78 <mpuCsEnable+0x14>)
 8009c6e:	f7fa fd98 	bl	80047a2 <HAL_GPIO_WritePin>
}
 8009c72:	bf00      	nop
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	40011000 	.word	0x40011000

08009c7c <mpuCsDisable>:
void mpuCsDisable()
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9255_Port_CS, MPU9255_Pin_CS, GPIO_PIN_SET);
 8009c80:	2201      	movs	r2, #1
 8009c82:	2110      	movs	r1, #16
 8009c84:	4802      	ldr	r0, [pc, #8]	; (8009c90 <mpuCsDisable+0x14>)
 8009c86:	f7fa fd8c 	bl	80047a2 <HAL_GPIO_WritePin>
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	40011000 	.word	0x40011000

08009c94 <ssd1306_Reset>:
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
	// CS = High (not selected)
	HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009c9e:	480b      	ldr	r0, [pc, #44]	; (8009ccc <ssd1306_Reset+0x38>)
 8009ca0:	f7fa fd7f 	bl	80047a2 <HAL_GPIO_WritePin>

	// Reset the OLED
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009caa:	4808      	ldr	r0, [pc, #32]	; (8009ccc <ssd1306_Reset+0x38>)
 8009cac:	f7fa fd79 	bl	80047a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009cb0:	200a      	movs	r0, #10
 8009cb2:	f7f8 fce3 	bl	800267c <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009cbc:	4803      	ldr	r0, [pc, #12]	; (8009ccc <ssd1306_Reset+0x38>)
 8009cbe:	f7fa fd70 	bl	80047a2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009cc2:	200a      	movs	r0, #10
 8009cc4:	f7f8 fcda 	bl	800267c <HAL_Delay>
}
 8009cc8:	bf00      	nop
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	40010c00 	.word	0x40010c00

08009cd0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ce0:	480c      	ldr	r0, [pc, #48]	; (8009d14 <ssd1306_WriteCommand+0x44>)
 8009ce2:	f7fa fd5e 	bl	80047a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2140      	movs	r1, #64	; 0x40
 8009cea:	480b      	ldr	r0, [pc, #44]	; (8009d18 <ssd1306_WriteCommand+0x48>)
 8009cec:	f7fa fd59 	bl	80047a2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8009cf0:	1df9      	adds	r1, r7, #7
 8009cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4808      	ldr	r0, [pc, #32]	; (8009d1c <ssd1306_WriteCommand+0x4c>)
 8009cfa:	f7fc fa2c 	bl	8006156 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d04:	4803      	ldr	r0, [pc, #12]	; (8009d14 <ssd1306_WriteCommand+0x44>)
 8009d06:	f7fa fd4c 	bl	80047a2 <HAL_GPIO_WritePin>
}
 8009d0a:	bf00      	nop
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	40010c00 	.word	0x40010c00
 8009d18:	40011000 	.word	0x40011000
 8009d1c:	20000b30 	.word	0x20000b30

08009d20 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d30:	480c      	ldr	r0, [pc, #48]	; (8009d64 <ssd1306_WriteData+0x44>)
 8009d32:	f7fa fd36 	bl	80047a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8009d36:	2201      	movs	r2, #1
 8009d38:	2140      	movs	r1, #64	; 0x40
 8009d3a:	480b      	ldr	r0, [pc, #44]	; (8009d68 <ssd1306_WriteData+0x48>)
 8009d3c:	f7fa fd31 	bl	80047a2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	f04f 33ff 	mov.w	r3, #4294967295
 8009d48:	6879      	ldr	r1, [r7, #4]
 8009d4a:	4808      	ldr	r0, [pc, #32]	; (8009d6c <ssd1306_WriteData+0x4c>)
 8009d4c:	f7fc fa03 	bl	8006156 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8009d50:	2201      	movs	r2, #1
 8009d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d56:	4803      	ldr	r0, [pc, #12]	; (8009d64 <ssd1306_WriteData+0x44>)
 8009d58:	f7fa fd23 	bl	80047a2 <HAL_GPIO_WritePin>
}
 8009d5c:	bf00      	nop
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	40010c00 	.word	0x40010c00
 8009d68:	40011000 	.word	0x40011000
 8009d6c:	20000b30 	.word	0x20000b30

08009d70 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8009d70:	b580      	push	{r7, lr}
 8009d72:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8009d74:	f7ff ff8e 	bl	8009c94 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8009d78:	2064      	movs	r0, #100	; 0x64
 8009d7a:	f7f8 fc7f 	bl	800267c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8009d7e:	20ae      	movs	r0, #174	; 0xae
 8009d80:	f7ff ffa6 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8009d84:	2020      	movs	r0, #32
 8009d86:	f7ff ffa3 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); // 00,Horizontal Addressing Mode; 01,Vertical Addressing Mode;
 8009d8a:	2010      	movs	r0, #16
 8009d8c:	f7ff ffa0 	bl	8009cd0 <ssd1306_WriteCommand>
                                // 10,Page Addressing Mode (RESET); 11,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8009d90:	20b0      	movs	r0, #176	; 0xb0
 8009d92:	f7ff ff9d 	bl	8009cd0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8009d96:	20c8      	movs	r0, #200	; 0xc8
 8009d98:	f7ff ff9a 	bl	8009cd0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	f7ff ff97 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8009da2:	2010      	movs	r0, #16
 8009da4:	f7ff ff94 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8009da8:	2040      	movs	r0, #64	; 0x40
 8009daa:	f7ff ff91 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8009dae:	2081      	movs	r0, #129	; 0x81
 8009db0:	f7ff ff8e 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8009db4:	20ff      	movs	r0, #255	; 0xff
 8009db6:	f7ff ff8b 	bl	8009cd0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8009dba:	20a1      	movs	r0, #161	; 0xa1
 8009dbc:	f7ff ff88 	bl	8009cd0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8009dc0:	20a6      	movs	r0, #166	; 0xa6
 8009dc2:	f7ff ff85 	bl	8009cd0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8009dc6:	20a8      	movs	r0, #168	; 0xa8
 8009dc8:	f7ff ff82 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8009dcc:	203f      	movs	r0, #63	; 0x3f
 8009dce:	f7ff ff7f 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8009dd2:	20a4      	movs	r0, #164	; 0xa4
 8009dd4:	f7ff ff7c 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8009dd8:	20d3      	movs	r0, #211	; 0xd3
 8009dda:	f7ff ff79 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8009dde:	2000      	movs	r0, #0
 8009de0:	f7ff ff76 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8009de4:	20d5      	movs	r0, #213	; 0xd5
 8009de6:	f7ff ff73 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8009dea:	20f0      	movs	r0, #240	; 0xf0
 8009dec:	f7ff ff70 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8009df0:	20d9      	movs	r0, #217	; 0xd9
 8009df2:	f7ff ff6d 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8009df6:	2022      	movs	r0, #34	; 0x22
 8009df8:	f7ff ff6a 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8009dfc:	20da      	movs	r0, #218	; 0xda
 8009dfe:	f7ff ff67 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8009e02:	2012      	movs	r0, #18
 8009e04:	f7ff ff64 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8009e08:	20db      	movs	r0, #219	; 0xdb
 8009e0a:	f7ff ff61 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8009e0e:	2020      	movs	r0, #32
 8009e10:	f7ff ff5e 	bl	8009cd0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8009e14:	208d      	movs	r0, #141	; 0x8d
 8009e16:	f7ff ff5b 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8009e1a:	2014      	movs	r0, #20
 8009e1c:	f7ff ff58 	bl	8009cd0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8009e20:	20af      	movs	r0, #175	; 0xaf
 8009e22:	f7ff ff55 	bl	8009cd0 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8009e26:	2000      	movs	r0, #0
 8009e28:	f000 f810 	bl	8009e4c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8009e2c:	f000 f830 	bl	8009e90 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8009e30:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <ssd1306_Init+0xd8>)
 8009e32:	2200      	movs	r2, #0
 8009e34:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8009e36:	4b04      	ldr	r3, [pc, #16]	; (8009e48 <ssd1306_Init+0xd8>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8009e3c:	4b02      	ldr	r3, [pc, #8]	; (8009e48 <ssd1306_Init+0xd8>)
 8009e3e:	2201      	movs	r2, #1
 8009e40:	715a      	strb	r2, [r3, #5]
}
 8009e42:	bf00      	nop
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000a14 	.word	0x20000a14

08009e4c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	e00d      	b.n	8009e78 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <ssd1306_Fill+0x1a>
 8009e62:	2100      	movs	r1, #0
 8009e64:	e000      	b.n	8009e68 <ssd1306_Fill+0x1c>
 8009e66:	21ff      	movs	r1, #255	; 0xff
 8009e68:	4a08      	ldr	r2, [pc, #32]	; (8009e8c <ssd1306_Fill+0x40>)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	460a      	mov	r2, r1
 8009e70:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3301      	adds	r3, #1
 8009e76:	60fb      	str	r3, [r7, #12]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e7e:	d3ed      	bcc.n	8009e5c <ssd1306_Fill+0x10>
    }
}
 8009e80:	bf00      	nop
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bc80      	pop	{r7}
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	20000614 	.word	0x20000614

08009e90 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8009e96:	2300      	movs	r3, #0
 8009e98:	71fb      	strb	r3, [r7, #7]
 8009e9a:	e016      	b.n	8009eca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8009e9c:	79fb      	ldrb	r3, [r7, #7]
 8009e9e:	3b50      	subs	r3, #80	; 0x50
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7ff ff14 	bl	8009cd0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f7ff ff11 	bl	8009cd0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8009eae:	2010      	movs	r0, #16
 8009eb0:	f7ff ff0e 	bl	8009cd0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	01db      	lsls	r3, r3, #7
 8009eb8:	4a07      	ldr	r2, [pc, #28]	; (8009ed8 <ssd1306_UpdateScreen+0x48>)
 8009eba:	4413      	add	r3, r2
 8009ebc:	2180      	movs	r1, #128	; 0x80
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7ff ff2e 	bl	8009d20 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8009ec4:	79fb      	ldrb	r3, [r7, #7]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	71fb      	strb	r3, [r7, #7]
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	2b07      	cmp	r3, #7
 8009ece:	d9e5      	bls.n	8009e9c <ssd1306_UpdateScreen+0xc>
    }
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20000614 	.word	0x20000614

08009edc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	71fb      	strb	r3, [r7, #7]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	71bb      	strb	r3, [r7, #6]
 8009eea:	4613      	mov	r3, r2
 8009eec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8009eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	db48      	blt.n	8009f88 <ssd1306_DrawPixel+0xac>
 8009ef6:	79bb      	ldrb	r3, [r7, #6]
 8009ef8:	2b3f      	cmp	r3, #63	; 0x3f
 8009efa:	d845      	bhi.n	8009f88 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8009efc:	4b25      	ldr	r3, [pc, #148]	; (8009f94 <ssd1306_DrawPixel+0xb8>)
 8009efe:	791b      	ldrb	r3, [r3, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d006      	beq.n	8009f12 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8009f04:	797b      	ldrb	r3, [r7, #5]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bf0c      	ite	eq
 8009f0a:	2301      	moveq	r3, #1
 8009f0c:	2300      	movne	r3, #0
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8009f12:	797b      	ldrb	r3, [r7, #5]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d11a      	bne.n	8009f4e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8009f18:	79fa      	ldrb	r2, [r7, #7]
 8009f1a:	79bb      	ldrb	r3, [r7, #6]
 8009f1c:	08db      	lsrs	r3, r3, #3
 8009f1e:	b2d8      	uxtb	r0, r3
 8009f20:	4603      	mov	r3, r0
 8009f22:	01db      	lsls	r3, r3, #7
 8009f24:	4413      	add	r3, r2
 8009f26:	4a1c      	ldr	r2, [pc, #112]	; (8009f98 <ssd1306_DrawPixel+0xbc>)
 8009f28:	5cd3      	ldrb	r3, [r2, r3]
 8009f2a:	b25a      	sxtb	r2, r3
 8009f2c:	79bb      	ldrb	r3, [r7, #6]
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	2101      	movs	r1, #1
 8009f34:	fa01 f303 	lsl.w	r3, r1, r3
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	b259      	sxtb	r1, r3
 8009f3e:	79fa      	ldrb	r2, [r7, #7]
 8009f40:	4603      	mov	r3, r0
 8009f42:	01db      	lsls	r3, r3, #7
 8009f44:	4413      	add	r3, r2
 8009f46:	b2c9      	uxtb	r1, r1
 8009f48:	4a13      	ldr	r2, [pc, #76]	; (8009f98 <ssd1306_DrawPixel+0xbc>)
 8009f4a:	54d1      	strb	r1, [r2, r3]
 8009f4c:	e01d      	b.n	8009f8a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8009f4e:	79fa      	ldrb	r2, [r7, #7]
 8009f50:	79bb      	ldrb	r3, [r7, #6]
 8009f52:	08db      	lsrs	r3, r3, #3
 8009f54:	b2d8      	uxtb	r0, r3
 8009f56:	4603      	mov	r3, r0
 8009f58:	01db      	lsls	r3, r3, #7
 8009f5a:	4413      	add	r3, r2
 8009f5c:	4a0e      	ldr	r2, [pc, #56]	; (8009f98 <ssd1306_DrawPixel+0xbc>)
 8009f5e:	5cd3      	ldrb	r3, [r2, r3]
 8009f60:	b25a      	sxtb	r2, r3
 8009f62:	79bb      	ldrb	r3, [r7, #6]
 8009f64:	f003 0307 	and.w	r3, r3, #7
 8009f68:	2101      	movs	r1, #1
 8009f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6e:	b25b      	sxtb	r3, r3
 8009f70:	43db      	mvns	r3, r3
 8009f72:	b25b      	sxtb	r3, r3
 8009f74:	4013      	ands	r3, r2
 8009f76:	b259      	sxtb	r1, r3
 8009f78:	79fa      	ldrb	r2, [r7, #7]
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	01db      	lsls	r3, r3, #7
 8009f7e:	4413      	add	r3, r2
 8009f80:	b2c9      	uxtb	r1, r1
 8009f82:	4a05      	ldr	r2, [pc, #20]	; (8009f98 <ssd1306_DrawPixel+0xbc>)
 8009f84:	54d1      	strb	r1, [r2, r3]
 8009f86:	e000      	b.n	8009f8a <ssd1306_DrawPixel+0xae>
        return;
 8009f88:	bf00      	nop
    }
}
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bc80      	pop	{r7}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	20000a14 	.word	0x20000a14
 8009f98:	20000614 	.word	0x20000614

08009f9c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch         => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color     => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8009f9c:	b590      	push	{r4, r7, lr}
 8009f9e:	b089      	sub	sp, #36	; 0x24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	1d38      	adds	r0, r7, #4
 8009fa6:	e880 0006 	stmia.w	r0, {r1, r2}
 8009faa:	461a      	mov	r2, r3
 8009fac:	4623      	mov	r3, r4
 8009fae:	73fb      	strb	r3, [r7, #15]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8009fb4:	4b38      	ldr	r3, [pc, #224]	; (800a098 <ssd1306_WriteChar+0xfc>)
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	793b      	ldrb	r3, [r7, #4]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8009fc0:	dc06      	bgt.n	8009fd0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8009fc2:	4b35      	ldr	r3, [pc, #212]	; (800a098 <ssd1306_WriteChar+0xfc>)
 8009fc4:	885b      	ldrh	r3, [r3, #2]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	797b      	ldrb	r3, [r7, #5]
 8009fca:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8009fcc:	2b3f      	cmp	r3, #63	; 0x3f
 8009fce:	dd01      	ble.n	8009fd4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e05d      	b.n	800a090 <ssd1306_WriteChar+0xf4>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	61fb      	str	r3, [r7, #28]
 8009fd8:	e04c      	b.n	800a074 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	3b20      	subs	r3, #32
 8009fe0:	7979      	ldrb	r1, [r7, #5]
 8009fe2:	fb01 f303 	mul.w	r3, r1, r3
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	440b      	add	r3, r1
 8009fec:	005b      	lsls	r3, r3, #1
 8009fee:	4413      	add	r3, r2
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	61bb      	str	r3, [r7, #24]
 8009ff8:	e034      	b.n	800a064 <ssd1306_WriteChar+0xc8>
            if((b << j) & 0x8000)  {
 8009ffa:	697a      	ldr	r2, [r7, #20]
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d012      	beq.n	800a030 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800a00a:	4b23      	ldr	r3, [pc, #140]	; (800a098 <ssd1306_WriteChar+0xfc>)
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	4413      	add	r3, r2
 800a016:	b2d8      	uxtb	r0, r3
 800a018:	4b1f      	ldr	r3, [pc, #124]	; (800a098 <ssd1306_WriteChar+0xfc>)
 800a01a:	885b      	ldrh	r3, [r3, #2]
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	b2db      	uxtb	r3, r3
 800a022:	4413      	add	r3, r2
 800a024:	b2db      	uxtb	r3, r3
 800a026:	7bba      	ldrb	r2, [r7, #14]
 800a028:	4619      	mov	r1, r3
 800a02a:	f7ff ff57 	bl	8009edc <ssd1306_DrawPixel>
 800a02e:	e016      	b.n	800a05e <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800a030:	4b19      	ldr	r3, [pc, #100]	; (800a098 <ssd1306_WriteChar+0xfc>)
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	b2da      	uxtb	r2, r3
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	4413      	add	r3, r2
 800a03c:	b2d8      	uxtb	r0, r3
 800a03e:	4b16      	ldr	r3, [pc, #88]	; (800a098 <ssd1306_WriteChar+0xfc>)
 800a040:	885b      	ldrh	r3, [r3, #2]
 800a042:	b2da      	uxtb	r2, r3
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	4413      	add	r3, r2
 800a04a:	b2d9      	uxtb	r1, r3
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	bf0c      	ite	eq
 800a052:	2301      	moveq	r3, #1
 800a054:	2300      	movne	r3, #0
 800a056:	b2db      	uxtb	r3, r3
 800a058:	461a      	mov	r2, r3
 800a05a:	f7ff ff3f 	bl	8009edc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	3301      	adds	r3, #1
 800a062:	61bb      	str	r3, [r7, #24]
 800a064:	793b      	ldrb	r3, [r7, #4]
 800a066:	461a      	mov	r2, r3
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d3c5      	bcc.n	8009ffa <ssd1306_WriteChar+0x5e>
    for(i = 0; i < Font.FontHeight; i++) {
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	3301      	adds	r3, #1
 800a072:	61fb      	str	r3, [r7, #28]
 800a074:	797b      	ldrb	r3, [r7, #5]
 800a076:	461a      	mov	r2, r3
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d3ad      	bcc.n	8009fda <ssd1306_WriteChar+0x3e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800a07e:	4b06      	ldr	r3, [pc, #24]	; (800a098 <ssd1306_WriteChar+0xfc>)
 800a080:	881a      	ldrh	r2, [r3, #0]
 800a082:	793b      	ldrb	r3, [r7, #4]
 800a084:	b29b      	uxth	r3, r3
 800a086:	4413      	add	r3, r2
 800a088:	b29a      	uxth	r2, r3
 800a08a:	4b03      	ldr	r3, [pc, #12]	; (800a098 <ssd1306_WriteChar+0xfc>)
 800a08c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3724      	adds	r7, #36	; 0x24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd90      	pop	{r4, r7, pc}
 800a098:	20000a14 	.word	0x20000a14

0800a09c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	1d38      	adds	r0, r7, #4
 800a0a6:	e880 0006 	stmia.w	r0, {r1, r2}
 800a0aa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800a0ac:	e012      	b.n	800a0d4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	7818      	ldrb	r0, [r3, #0]
 800a0b2:	78fb      	ldrb	r3, [r7, #3]
 800a0b4:	1d3a      	adds	r2, r7, #4
 800a0b6:	ca06      	ldmia	r2, {r1, r2}
 800a0b8:	f7ff ff70 	bl	8009f9c <ssd1306_WriteChar>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	461a      	mov	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d002      	beq.n	800a0ce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	e008      	b.n	800a0e0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e8      	bne.n	800a0ae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	781b      	ldrb	r3, [r3, #0]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	460a      	mov	r2, r1
 800a0f2:	71fb      	strb	r3, [r7, #7]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	4b05      	ldr	r3, [pc, #20]	; (800a114 <ssd1306_SetCursor+0x2c>)
 800a0fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800a100:	79bb      	ldrb	r3, [r7, #6]
 800a102:	b29a      	uxth	r2, r3
 800a104:	4b03      	ldr	r3, [pc, #12]	; (800a114 <ssd1306_SetCursor+0x2c>)
 800a106:	805a      	strh	r2, [r3, #2]
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20000a14 	.word	0x20000a14

0800a118 <UART_InitForUpper>:
};

//UART DMA Receive Reference：https://blog.csdn.net/qq_17351161/article/details/90415407
//该部分代码应当分别置于xxxit.c 以及 usart.c中更为合适 ，但是为了方便还是放在这里了
void UART_InitForUpper(UART_HandleTypeDef *huart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f042 0210 	orr.w	r2, r2, #16
 800a12e:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(huart, (uint8_t*)uart_receive_buff, UART_RxBUFFER_SIZE);     //设置DMA传输，将串口1的数据存到recvive_buff中，
 800a130:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a134:	4903      	ldr	r1, [pc, #12]	; (800a144 <UART_InitForUpper+0x2c>)
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7fd fe0e 	bl	8007d58 <HAL_UART_Receive_DMA>

}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20001fd8 	.word	0x20001fd8

0800a148 <USER_UART_IRQHandler>:
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
    if(USART1 == huart1.Instance)                                   //判断是否是串口1
 800a150:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <USER_UART_IRQHandler+0x44>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a0e      	ldr	r2, [pc, #56]	; (800a190 <USER_UART_IRQHandler+0x48>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d114      	bne.n	800a184 <USER_UART_IRQHandler+0x3c>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))   //判断是否是空闲中断
 800a15a:	4b0c      	ldr	r3, [pc, #48]	; (800a18c <USER_UART_IRQHandler+0x44>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 0310 	and.w	r3, r3, #16
 800a164:	2b10      	cmp	r3, #16
 800a166:	d10d      	bne.n	800a184 <USER_UART_IRQHandler+0x3c>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart1);                     //清除空闲中断标志（否则会一直不断进入中断）
 800a168:	2300      	movs	r3, #0
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	4b07      	ldr	r3, [pc, #28]	; (800a18c <USER_UART_IRQHandler+0x44>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	4b05      	ldr	r3, [pc, #20]	; (800a18c <USER_UART_IRQHandler+0x44>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	68fb      	ldr	r3, [r7, #12]
            //printf("\r\nUART1 Idle IQR Detected\n");
            USER_UART_IDLECallback(huart);                          //调用中断处理函数
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f808 	bl	800a194 <USER_UART_IDLECallback>
        }
    }
}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000d84 	.word	0x20000d84
 800a190:	40013800 	.word	0x40013800

0800a194 <USER_UART_IDLECallback>:

void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 800a194:	b590      	push	{r4, r7, lr}
 800a196:	b08b      	sub	sp, #44	; 0x2c
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
	UartTransmitEnableTime=180;
 800a19c:	4ba1      	ldr	r3, [pc, #644]	; (800a424 <USER_UART_IDLECallback+0x290>)
 800a19e:	22b4      	movs	r2, #180	; 0xb4
 800a1a0:	801a      	strh	r2, [r3, #0]
    HAL_UART_DMAStop(&huart1);                                                    		 //停止本次DMA传输
 800a1a2:	48a1      	ldr	r0, [pc, #644]	; (800a428 <USER_UART_IDLECallback+0x294>)
 800a1a4:	f7fd fe58 	bl	8007e58 <HAL_UART_DMAStop>
    uint16_t data_length = (uint16_t)UART_RxBUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);   //计算接收到的数据长度
 800a1a8:	4ba0      	ldr	r3, [pc, #640]	; (800a42c <USER_UART_IDLECallback+0x298>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 800a1b4:	843b      	strh	r3, [r7, #32]
//    printf("Receive Data(length = %d): \n",data_length);
//    HAL_UART_Transmit(&huart1,uart_receive_buff,data_length,0x200);
//    printf("\r\n");

    //Process Data Frame from upper PC
    for(int i=0;i<data_length;i++)
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ba:	e01a      	b.n	800a1f2 <USER_UART_IDLECallback+0x5e>
    	RxData[i/4].data[i%4]=uart_receive_buff[i];
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	da00      	bge.n	800a1c4 <USER_UART_IDLECallback+0x30>
 800a1c2:	3303      	adds	r3, #3
 800a1c4:	109b      	asrs	r3, r3, #2
 800a1c6:	461c      	mov	r4, r3
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	425a      	negs	r2, r3
 800a1cc:	f003 0303 	and.w	r3, r3, #3
 800a1d0:	f002 0203 	and.w	r2, r2, #3
 800a1d4:	bf58      	it	pl
 800a1d6:	4253      	negpl	r3, r2
 800a1d8:	4995      	ldr	r1, [pc, #596]	; (800a430 <USER_UART_IDLECallback+0x29c>)
 800a1da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1dc:	440a      	add	r2, r1
 800a1de:	7810      	ldrb	r0, [r2, #0]
 800a1e0:	4994      	ldr	r1, [pc, #592]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a1e2:	00a2      	lsls	r2, r4, #2
 800a1e4:	440a      	add	r2, r1
 800a1e6:	4413      	add	r3, r2
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<data_length;i++)
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1f2:	8c3b      	ldrh	r3, [r7, #32]
 800a1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	dbe0      	blt.n	800a1bc <USER_UART_IDLECallback+0x28>

    uint16_t index = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	847b      	strh	r3, [r7, #34]	; 0x22
    while (index  < data_length/4)
 800a1fe:	e0fe      	b.n	800a3fe <USER_UART_IDLECallback+0x26a>
    {
	   if (RxData[index].data[0] == 'S' &&
 800a200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a202:	4a8c      	ldr	r2, [pc, #560]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a204:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800a208:	2b53      	cmp	r3, #83	; 0x53
 800a20a:	f040 80f5 	bne.w	800a3f8 <USER_UART_IDLECallback+0x264>
		   RxData[index].data[1] == 'P' &&
 800a20e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a210:	4a88      	ldr	r2, [pc, #544]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	785b      	ldrb	r3, [r3, #1]
	   if (RxData[index].data[0] == 'S' &&
 800a218:	2b50      	cmp	r3, #80	; 0x50
 800a21a:	f040 80ed 	bne.w	800a3f8 <USER_UART_IDLECallback+0x264>
		   RxData[index].data[2] == '0'
 800a21e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a220:	4a84      	ldr	r2, [pc, #528]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	789b      	ldrb	r3, [r3, #2]
		   RxData[index].data[1] == 'P' &&
 800a228:	2b30      	cmp	r3, #48	; 0x30
 800a22a:	f040 80e5 	bne.w	800a3f8 <USER_UART_IDLECallback+0x264>
		   )
	   {
		   //SP00
		   if (RxData[index].data[3] == '0')
 800a22e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a230:	4a80      	ldr	r2, [pc, #512]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	78db      	ldrb	r3, [r3, #3]
 800a238:	2b30      	cmp	r3, #48	; 0x30
 800a23a:	d111      	bne.n	800a260 <USER_UART_IDLECallback+0xcc>
		   {
			   int crcIndex=index;
 800a23c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a23e:	60bb      	str	r3, [r7, #8]
//			   int index_temp = index + 1;
			   index += SerialFrameLenRx[0];
 800a240:	2203      	movs	r2, #3
 800a242:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a244:	4413      	add	r3, r2
 800a246:	847b      	strh	r3, [r7, #34]	; 0x22
			   if(crc_check(&RxData[crcIndex],SerialFrameLenRx[0])==0)
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4a79      	ldr	r2, [pc, #484]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a24e:	4413      	add	r3, r2
 800a250:	2203      	movs	r2, #3
 800a252:	4611      	mov	r1, r2
 800a254:	4618      	mov	r0, r3
 800a256:	f000 fb2f 	bl	800a8b8 <crc_check>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	e0ce      	b.n	800a3fe <USER_UART_IDLECallback+0x26a>
				   continue;
			   continue;
		   }
		   //SP01
		   if (RxData[index].data[3] == '1')
 800a260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a262:	4a74      	ldr	r2, [pc, #464]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	78db      	ldrb	r3, [r3, #3]
 800a26a:	2b31      	cmp	r3, #49	; 0x31
 800a26c:	d111      	bne.n	800a292 <USER_UART_IDLECallback+0xfe>
		   {
			   int crcIndex=index;
 800a26e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a270:	60fb      	str	r3, [r7, #12]
//			   int index_temp = index + 1;
			   index += SerialFrameLenRx[1];
 800a272:	2209      	movs	r2, #9
 800a274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a276:	4413      	add	r3, r2
 800a278:	847b      	strh	r3, [r7, #34]	; 0x22

			   if(crc_check(&RxData[crcIndex],SerialFrameLenRx[1])==0)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4a6d      	ldr	r2, [pc, #436]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a280:	4413      	add	r3, r2
 800a282:	2209      	movs	r2, #9
 800a284:	4611      	mov	r1, r2
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fb16 	bl	800a8b8 <crc_check>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	e0b5      	b.n	800a3fe <USER_UART_IDLECallback+0x26a>
				   continue;
			   continue;
		   }
		   //SP02
		   if (RxData[index].data[3] == '2')
 800a292:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a294:	4a67      	ldr	r2, [pc, #412]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	78db      	ldrb	r3, [r3, #3]
 800a29c:	2b32      	cmp	r3, #50	; 0x32
 800a29e:	d149      	bne.n	800a334 <USER_UART_IDLECallback+0x1a0>
		   {
			   int crcIndex=index;
 800a2a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2a2:	617b      	str	r3, [r7, #20]
			   int index_temp = index + 1;
 800a2a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	613b      	str	r3, [r7, #16]
			   index += SerialFrameLenRx[2];
 800a2aa:	2204      	movs	r2, #4
 800a2ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2ae:	4413      	add	r3, r2
 800a2b0:	847b      	strh	r3, [r7, #34]	; 0x22
			   if(crc_check(&RxData[crcIndex],SerialFrameLenRx[2])==0)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4a5f      	ldr	r2, [pc, #380]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a2b8:	4413      	add	r3, r2
 800a2ba:	2204      	movs	r2, #4
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 fafa 	bl	800a8b8 <crc_check>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d100      	bne.n	800a2cc <USER_UART_IDLECallback+0x138>
				   continue;
 800a2ca:	e098      	b.n	800a3fe <USER_UART_IDLECallback+0x26a>

			   SCM_Next.Buck 	     =  RxData[index_temp].data[0] & 1;
 800a2cc:	4a59      	ldr	r2, [pc, #356]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	4b57      	ldr	r3, [pc, #348]	; (800a438 <USER_UART_IDLECallback+0x2a4>)
 800a2dc:	701a      	strb	r2, [r3, #0]
			   SCM_Next.Mode 		 = (RxData[index_temp].data[0] & (1<<1))>>1;
 800a2de:	4a55      	ldr	r2, [pc, #340]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800a2e6:	105b      	asrs	r3, r3, #1
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	4b51      	ldr	r3, [pc, #324]	; (800a438 <USER_UART_IDLECallback+0x2a4>)
 800a2f2:	705a      	strb	r2, [r3, #1]
			   SCM_Next.ForceUseCap  = (RxData[index_temp].data[0] & (1<<2))>>2;
 800a2f4:	4a4f      	ldr	r2, [pc, #316]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800a2fc:	109b      	asrs	r3, r3, #2
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	b2da      	uxtb	r2, r3
 800a306:	4b4c      	ldr	r3, [pc, #304]	; (800a438 <USER_UART_IDLECallback+0x2a4>)
 800a308:	709a      	strb	r2, [r3, #2]
			   index_temp++;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3301      	adds	r3, #1
 800a30e:	613b      	str	r3, [r7, #16]
			   SCM_Next.SetPow  = RxData[index_temp++].value*1000;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	613a      	str	r2, [r7, #16]
 800a316:	4a47      	ldr	r2, [pc, #284]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a31c:	4947      	ldr	r1, [pc, #284]	; (800a43c <USER_UART_IDLECallback+0x2a8>)
 800a31e:	4618      	mov	r0, r3
 800a320:	f7f6 fd9c 	bl	8000e5c <__aeabi_fmul>
 800a324:	4603      	mov	r3, r0
 800a326:	4618      	mov	r0, r3
 800a328:	f7f6 ff5e 	bl	80011e8 <__aeabi_f2iz>
 800a32c:	4602      	mov	r2, r0
 800a32e:	4b42      	ldr	r3, [pc, #264]	; (800a438 <USER_UART_IDLECallback+0x2a4>)
 800a330:	605a      	str	r2, [r3, #4]

			   continue;
 800a332:	e064      	b.n	800a3fe <USER_UART_IDLECallback+0x26a>
		   }
		   //SP03
		   if (RxData[index].data[3] == '3')
 800a334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a336:	4a3f      	ldr	r2, [pc, #252]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	78db      	ldrb	r3, [r3, #3]
 800a33e:	2b33      	cmp	r3, #51	; 0x33
 800a340:	d15d      	bne.n	800a3fe <USER_UART_IDLECallback+0x26a>
		   {
			   int crcIndex=index;
 800a342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a344:	61fb      	str	r3, [r7, #28]
			   int index_temp = index + 1;
 800a346:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a348:	3301      	adds	r3, #1
 800a34a:	61bb      	str	r3, [r7, #24]
			   index += SerialFrameLenRx[3];
 800a34c:	2206      	movs	r2, #6
 800a34e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a350:	4413      	add	r3, r2
 800a352:	847b      	strh	r3, [r7, #34]	; 0x22

			   if(crc_check(&RxData[crcIndex],SerialFrameLenRx[3])==0)
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4a36      	ldr	r2, [pc, #216]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a35a:	4413      	add	r3, r2
 800a35c:	2206      	movs	r2, #6
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f000 faa9 	bl	800a8b8 <crc_check>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d100      	bne.n	800a36e <USER_UART_IDLECallback+0x1da>
				   continue;
 800a36c:	e047      	b.n	800a3fe <USER_UART_IDLECallback+0x26a>

			   SCM_SettingsNext.Cap_MaxVol_H = RxData[index_temp++].value*1000;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	61ba      	str	r2, [r7, #24]
 800a374:	4a2f      	ldr	r2, [pc, #188]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a37a:	4930      	ldr	r1, [pc, #192]	; (800a43c <USER_UART_IDLECallback+0x2a8>)
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7f6 fd6d 	bl	8000e5c <__aeabi_fmul>
 800a382:	4603      	mov	r3, r0
 800a384:	4618      	mov	r0, r3
 800a386:	f7f6 ff2f 	bl	80011e8 <__aeabi_f2iz>
 800a38a:	4602      	mov	r2, r0
 800a38c:	4b2c      	ldr	r3, [pc, #176]	; (800a440 <USER_UART_IDLECallback+0x2ac>)
 800a38e:	601a      	str	r2, [r3, #0]
			   SCM_SettingsNext.Cap_MaxVol_L = RxData[index_temp++].value*1000;
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	61ba      	str	r2, [r7, #24]
 800a396:	4a27      	ldr	r2, [pc, #156]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a39c:	4927      	ldr	r1, [pc, #156]	; (800a43c <USER_UART_IDLECallback+0x2a8>)
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f6 fd5c 	bl	8000e5c <__aeabi_fmul>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7f6 ff1e 	bl	80011e8 <__aeabi_f2iz>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	4b24      	ldr	r3, [pc, #144]	; (800a440 <USER_UART_IDLECallback+0x2ac>)
 800a3b0:	605a      	str	r2, [r3, #4]
			   SCM_SettingsNext.Cap_MinVol_H = RxData[index_temp++].value*1000;
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	1c5a      	adds	r2, r3, #1
 800a3b6:	61ba      	str	r2, [r7, #24]
 800a3b8:	4a1e      	ldr	r2, [pc, #120]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3be:	491f      	ldr	r1, [pc, #124]	; (800a43c <USER_UART_IDLECallback+0x2a8>)
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7f6 fd4b 	bl	8000e5c <__aeabi_fmul>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7f6 ff0d 	bl	80011e8 <__aeabi_f2iz>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	4b1b      	ldr	r3, [pc, #108]	; (800a440 <USER_UART_IDLECallback+0x2ac>)
 800a3d2:	609a      	str	r2, [r3, #8]
			   SCM_SettingsNext.Cap_MinVol_L = RxData[index_temp++].value*1000;
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	1c5a      	adds	r2, r3, #1
 800a3d8:	61ba      	str	r2, [r7, #24]
 800a3da:	4a16      	ldr	r2, [pc, #88]	; (800a434 <USER_UART_IDLECallback+0x2a0>)
 800a3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3e0:	4916      	ldr	r1, [pc, #88]	; (800a43c <USER_UART_IDLECallback+0x2a8>)
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7f6 fd3a 	bl	8000e5c <__aeabi_fmul>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f6 fefc 	bl	80011e8 <__aeabi_f2iz>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	4b13      	ldr	r3, [pc, #76]	; (800a440 <USER_UART_IDLECallback+0x2ac>)
 800a3f4:	60da      	str	r2, [r3, #12]


			   continue;
 800a3f6:	e002      	b.n	800a3fe <USER_UART_IDLECallback+0x26a>
		   }
	   }
	   else
		   index++;
 800a3f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	847b      	strh	r3, [r7, #34]	; 0x22
    while (index  < data_length/4)
 800a3fe:	8c3b      	ldrh	r3, [r7, #32]
 800a400:	089b      	lsrs	r3, r3, #2
 800a402:	b29b      	uxth	r3, r3
 800a404:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a406:	429a      	cmp	r2, r3
 800a408:	f4ff aefa 	bcc.w	800a200 <USER_UART_IDLECallback+0x6c>
    }

//    memset(RxData,0,UART_SerialData_SIZE);                                     //清零接收缓冲区
    data_length = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	843b      	strh	r3, [r7, #32]
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)uart_receive_buff, UART_RxBUFFER_SIZE);     //重启开始DMA传输 每次255字节数据
 800a410:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a414:	4906      	ldr	r1, [pc, #24]	; (800a430 <USER_UART_IDLECallback+0x29c>)
 800a416:	4804      	ldr	r0, [pc, #16]	; (800a428 <USER_UART_IDLECallback+0x294>)
 800a418:	f7fd fc9e 	bl	8007d58 <HAL_UART_Receive_DMA>
    //TODO:如果单次传输大小超限怎么办,会从头开始覆盖吗？
}
 800a41c:	bf00      	nop
 800a41e:	372c      	adds	r7, #44	; 0x2c
 800a420:	46bd      	mov	sp, r7
 800a422:	bd90      	pop	{r4, r7, pc}
 800a424:	20000a1a 	.word	0x20000a1a
 800a428:	20000d84 	.word	0x20000d84
 800a42c:	20000d40 	.word	0x20000d40
 800a430:	20001fd8 	.word	0x20001fd8
 800a434:	20001998 	.word	0x20001998
 800a438:	20000ddc 	.word	0x20000ddc
 800a43c:	447a0000 	.word	0x447a0000
 800a440:	20000e84 	.word	0x20000e84

0800a444 <USER_UART1_DMA_Transmit2Upper>:

//UART DMA Transmit
void USER_UART1_DMA_Transmit2Upper()
{
 800a444:	b590      	push	{r4, r7, lr}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
	uint16_t index=0,data_size=0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	80fb      	strh	r3, [r7, #6]
 800a44e:	2300      	movs	r3, #0
 800a450:	81fb      	strh	r3, [r7, #14]
	//SP02 SCM_Status Data Frame
	TxData[index].data[0]='S';
 800a452:	88fb      	ldrh	r3, [r7, #6]
 800a454:	4aa8      	ldr	r2, [pc, #672]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a456:	2153      	movs	r1, #83	; 0x53
 800a458:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	TxData[index].data[1]='P';
 800a45c:	88fb      	ldrh	r3, [r7, #6]
 800a45e:	4aa6      	ldr	r2, [pc, #664]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	2250      	movs	r2, #80	; 0x50
 800a466:	705a      	strb	r2, [r3, #1]
	TxData[index].data[2]='0';
 800a468:	88fb      	ldrh	r3, [r7, #6]
 800a46a:	4aa3      	ldr	r2, [pc, #652]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	2230      	movs	r2, #48	; 0x30
 800a472:	709a      	strb	r2, [r3, #2]
	TxData[index].data[3]='2';
 800a474:	88fb      	ldrh	r3, [r7, #6]
 800a476:	4aa0      	ldr	r2, [pc, #640]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	2232      	movs	r2, #50	; 0x32
 800a47e:	70da      	strb	r2, [r3, #3]
	index++;
 800a480:	88fb      	ldrh	r3, [r7, #6]
 800a482:	3301      	adds	r3, #1
 800a484:	80fb      	strh	r3, [r7, #6]
	TxData[index].data[0]=0x00;
 800a486:	88fb      	ldrh	r3, [r7, #6]
 800a488:	4a9b      	ldr	r2, [pc, #620]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a48a:	2100      	movs	r1, #0
 800a48c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	TxData[index].data[0]|=SCM.Buck;
 800a490:	88fb      	ldrh	r3, [r7, #6]
 800a492:	4a99      	ldr	r2, [pc, #612]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a494:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 800a498:	4b98      	ldr	r3, [pc, #608]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a49a:	781a      	ldrb	r2, [r3, #0]
 800a49c:	88fb      	ldrh	r3, [r7, #6]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	b2d1      	uxtb	r1, r2
 800a4a2:	4a95      	ldr	r2, [pc, #596]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a4a4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	TxData[index].data[0]|=(SCM.Mode<<1);
 800a4a8:	88fb      	ldrh	r3, [r7, #6]
 800a4aa:	4a93      	ldr	r2, [pc, #588]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a4ac:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800a4b0:	b25a      	sxtb	r2, r3
 800a4b2:	4b92      	ldr	r3, [pc, #584]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a4b4:	785b      	ldrb	r3, [r3, #1]
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	b25b      	sxtb	r3, r3
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	b25a      	sxtb	r2, r3
 800a4be:	88fb      	ldrh	r3, [r7, #6]
 800a4c0:	b2d1      	uxtb	r1, r2
 800a4c2:	4a8d      	ldr	r2, [pc, #564]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a4c4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	TxData[index].data[0]|=(SCM.ForceUseCap<<2);
 800a4c8:	88fb      	ldrh	r3, [r7, #6]
 800a4ca:	4a8b      	ldr	r2, [pc, #556]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a4cc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800a4d0:	b25a      	sxtb	r2, r3
 800a4d2:	4b8a      	ldr	r3, [pc, #552]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a4d4:	789b      	ldrb	r3, [r3, #2]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	b25b      	sxtb	r3, r3
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	b25a      	sxtb	r2, r3
 800a4de:	88fb      	ldrh	r3, [r7, #6]
 800a4e0:	b2d1      	uxtb	r1, r2
 800a4e2:	4a85      	ldr	r2, [pc, #532]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a4e4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	index++;
 800a4e8:	88fb      	ldrh	r3, [r7, #6]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	80fb      	strh	r3, [r7, #6]

	TxData[index++].value=(float)SCM.SetPow/1000.0;
 800a4ee:	4b83      	ldr	r3, [pc, #524]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7f6 fc5e 	bl	8000db4 <__aeabi_i2f>
 800a4f8:	88fb      	ldrh	r3, [r7, #6]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	80fa      	strh	r2, [r7, #6]
 800a4fe:	461c      	mov	r4, r3
 800a500:	497f      	ldr	r1, [pc, #508]	; (800a700 <USER_UART1_DMA_Transmit2Upper+0x2bc>)
 800a502:	f7f6 fd5f 	bl	8000fc4 <__aeabi_fdiv>
 800a506:	4603      	mov	r3, r0
 800a508:	461a      	mov	r2, r3
 800a50a:	4b7b      	ldr	r3, [pc, #492]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a50c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	TxData[index++].value=(float)SCM.CapPow/1000.0;
 800a510:	4b7a      	ldr	r3, [pc, #488]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	4618      	mov	r0, r3
 800a516:	f7f6 fc4d 	bl	8000db4 <__aeabi_i2f>
 800a51a:	88fb      	ldrh	r3, [r7, #6]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	80fa      	strh	r2, [r7, #6]
 800a520:	461c      	mov	r4, r3
 800a522:	4977      	ldr	r1, [pc, #476]	; (800a700 <USER_UART1_DMA_Transmit2Upper+0x2bc>)
 800a524:	f7f6 fd4e 	bl	8000fc4 <__aeabi_fdiv>
 800a528:	4603      	mov	r3, r0
 800a52a:	461a      	mov	r2, r3
 800a52c:	4b72      	ldr	r3, [pc, #456]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a52e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	TxData[index++].value=(float)SCM.CapCur/1000.0;
 800a532:	4b72      	ldr	r3, [pc, #456]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	4618      	mov	r0, r3
 800a538:	f7f6 fc3c 	bl	8000db4 <__aeabi_i2f>
 800a53c:	88fb      	ldrh	r3, [r7, #6]
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	80fa      	strh	r2, [r7, #6]
 800a542:	461c      	mov	r4, r3
 800a544:	496e      	ldr	r1, [pc, #440]	; (800a700 <USER_UART1_DMA_Transmit2Upper+0x2bc>)
 800a546:	f7f6 fd3d 	bl	8000fc4 <__aeabi_fdiv>
 800a54a:	4603      	mov	r3, r0
 800a54c:	461a      	mov	r2, r3
 800a54e:	4b6a      	ldr	r3, [pc, #424]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a550:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	TxData[index++].value=(float)SCM.CapVol/1000.0;
 800a554:	4b69      	ldr	r3, [pc, #420]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	4618      	mov	r0, r3
 800a55a:	f7f6 fc2b 	bl	8000db4 <__aeabi_i2f>
 800a55e:	88fb      	ldrh	r3, [r7, #6]
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	80fa      	strh	r2, [r7, #6]
 800a564:	461c      	mov	r4, r3
 800a566:	4966      	ldr	r1, [pc, #408]	; (800a700 <USER_UART1_DMA_Transmit2Upper+0x2bc>)
 800a568:	f7f6 fd2c 	bl	8000fc4 <__aeabi_fdiv>
 800a56c:	4603      	mov	r3, r0
 800a56e:	461a      	mov	r2, r3
 800a570:	4b61      	ldr	r3, [pc, #388]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a572:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	TxData[index++].value=(float)SCM.BatPow/1000.0;
 800a576:	4b61      	ldr	r3, [pc, #388]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7f6 fc1a 	bl	8000db4 <__aeabi_i2f>
 800a580:	88fb      	ldrh	r3, [r7, #6]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	80fa      	strh	r2, [r7, #6]
 800a586:	461c      	mov	r4, r3
 800a588:	495d      	ldr	r1, [pc, #372]	; (800a700 <USER_UART1_DMA_Transmit2Upper+0x2bc>)
 800a58a:	f7f6 fd1b 	bl	8000fc4 <__aeabi_fdiv>
 800a58e:	4603      	mov	r3, r0
 800a590:	461a      	mov	r2, r3
 800a592:	4b59      	ldr	r3, [pc, #356]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a594:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	TxData[index++].value=(float)SCM.BatCur/1000.0;
 800a598:	4b58      	ldr	r3, [pc, #352]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7f6 fc09 	bl	8000db4 <__aeabi_i2f>
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	80fa      	strh	r2, [r7, #6]
 800a5a8:	461c      	mov	r4, r3
 800a5aa:	4955      	ldr	r1, [pc, #340]	; (800a700 <USER_UART1_DMA_Transmit2Upper+0x2bc>)
 800a5ac:	f7f6 fd0a 	bl	8000fc4 <__aeabi_fdiv>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4b50      	ldr	r3, [pc, #320]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a5b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	TxData[index++].value=(float)SCM.BatVol/1000.0;
 800a5ba:	4b50      	ldr	r3, [pc, #320]	; (800a6fc <USER_UART1_DMA_Transmit2Upper+0x2b8>)
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f6 fbf8 	bl	8000db4 <__aeabi_i2f>
 800a5c4:	88fb      	ldrh	r3, [r7, #6]
 800a5c6:	1c5a      	adds	r2, r3, #1
 800a5c8:	80fa      	strh	r2, [r7, #6]
 800a5ca:	461c      	mov	r4, r3
 800a5cc:	494c      	ldr	r1, [pc, #304]	; (800a700 <USER_UART1_DMA_Transmit2Upper+0x2bc>)
 800a5ce:	f7f6 fcf9 	bl	8000fc4 <__aeabi_fdiv>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4b48      	ldr	r3, [pc, #288]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a5d8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	//CRC Value
	TxData[index].value_i=crc32(&TxData[0].data[0],(SerialFrameLenTx[2]-1)*4);
 800a5dc:	230a      	movs	r3, #10
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	88fc      	ldrh	r4, [r7, #6]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4844      	ldr	r0, [pc, #272]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a5e8:	f7fe fe90 	bl	800930c <crc32>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	4b42      	ldr	r3, [pc, #264]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a5f0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	index++;
 800a5f4:	88fb      	ldrh	r3, [r7, #6]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	80fb      	strh	r3, [r7, #6]
	data_size+=index;
 800a5fa:	89fa      	ldrh	r2, [r7, #14]
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	4413      	add	r3, r2
 800a600:	81fb      	strh	r3, [r7, #14]

	//SP01 IMU
	if(MPU9255_real_data_t.accel[0]>0.001f||MPU9255_real_data_t.accel[1]>0.001f)
 800a602:	4b40      	ldr	r3, [pc, #256]	; (800a704 <USER_UART1_DMA_Transmit2Upper+0x2c0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4940      	ldr	r1, [pc, #256]	; (800a708 <USER_UART1_DMA_Transmit2Upper+0x2c4>)
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f6 fde3 	bl	80011d4 <__aeabi_fcmpgt>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d109      	bne.n	800a628 <USER_UART1_DMA_Transmit2Upper+0x1e4>
 800a614:	4b3b      	ldr	r3, [pc, #236]	; (800a704 <USER_UART1_DMA_Transmit2Upper+0x2c0>)
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	493b      	ldr	r1, [pc, #236]	; (800a708 <USER_UART1_DMA_Transmit2Upper+0x2c4>)
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7f6 fdda 	bl	80011d4 <__aeabi_fcmpgt>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 808c 	beq.w	800a740 <USER_UART1_DMA_Transmit2Upper+0x2fc>
	{
		index=0;
 800a628:	2300      	movs	r3, #0
 800a62a:	80fb      	strh	r3, [r7, #6]
		TxData[data_size+index].data[0]='S';
 800a62c:	89fa      	ldrh	r2, [r7, #14]
 800a62e:	88fb      	ldrh	r3, [r7, #6]
 800a630:	4413      	add	r3, r2
 800a632:	4a31      	ldr	r2, [pc, #196]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a634:	2153      	movs	r1, #83	; 0x53
 800a636:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		TxData[data_size+index].data[1]='P';
 800a63a:	89fa      	ldrh	r2, [r7, #14]
 800a63c:	88fb      	ldrh	r3, [r7, #6]
 800a63e:	4413      	add	r3, r2
 800a640:	4a2d      	ldr	r2, [pc, #180]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	2250      	movs	r2, #80	; 0x50
 800a648:	705a      	strb	r2, [r3, #1]
		TxData[data_size+index].data[2]='0';
 800a64a:	89fa      	ldrh	r2, [r7, #14]
 800a64c:	88fb      	ldrh	r3, [r7, #6]
 800a64e:	4413      	add	r3, r2
 800a650:	4a29      	ldr	r2, [pc, #164]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	2230      	movs	r2, #48	; 0x30
 800a658:	709a      	strb	r2, [r3, #2]
		TxData[data_size+index].data[3]='1';
 800a65a:	89fa      	ldrh	r2, [r7, #14]
 800a65c:	88fb      	ldrh	r3, [r7, #6]
 800a65e:	4413      	add	r3, r2
 800a660:	4a25      	ldr	r2, [pc, #148]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	4413      	add	r3, r2
 800a666:	2231      	movs	r2, #49	; 0x31
 800a668:	70da      	strb	r2, [r3, #3]
		index++;
 800a66a:	88fb      	ldrh	r3, [r7, #6]
 800a66c:	3301      	adds	r3, #1
 800a66e:	80fb      	strh	r3, [r7, #6]
		TxData[data_size+index++].value=MPU9255_real_data_t.accel[0];
 800a670:	89fa      	ldrh	r2, [r7, #14]
 800a672:	88fb      	ldrh	r3, [r7, #6]
 800a674:	1c59      	adds	r1, r3, #1
 800a676:	80f9      	strh	r1, [r7, #6]
 800a678:	4413      	add	r3, r2
 800a67a:	4a22      	ldr	r2, [pc, #136]	; (800a704 <USER_UART1_DMA_Transmit2Upper+0x2c0>)
 800a67c:	6812      	ldr	r2, [r2, #0]
 800a67e:	491e      	ldr	r1, [pc, #120]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		TxData[data_size+index++].value=MPU9255_real_data_t.accel[1];
 800a684:	89fa      	ldrh	r2, [r7, #14]
 800a686:	88fb      	ldrh	r3, [r7, #6]
 800a688:	1c59      	adds	r1, r3, #1
 800a68a:	80f9      	strh	r1, [r7, #6]
 800a68c:	4413      	add	r3, r2
 800a68e:	4a1d      	ldr	r2, [pc, #116]	; (800a704 <USER_UART1_DMA_Transmit2Upper+0x2c0>)
 800a690:	6852      	ldr	r2, [r2, #4]
 800a692:	4919      	ldr	r1, [pc, #100]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		TxData[data_size+index++].value=MPU9255_real_data_t.accel[2];
 800a698:	89fa      	ldrh	r2, [r7, #14]
 800a69a:	88fb      	ldrh	r3, [r7, #6]
 800a69c:	1c59      	adds	r1, r3, #1
 800a69e:	80f9      	strh	r1, [r7, #6]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	4a18      	ldr	r2, [pc, #96]	; (800a704 <USER_UART1_DMA_Transmit2Upper+0x2c0>)
 800a6a4:	6892      	ldr	r2, [r2, #8]
 800a6a6:	4914      	ldr	r1, [pc, #80]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a6a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		TxData[data_size+index++].value=MPU9255_real_data_t.speed[0];
 800a6ac:	89fa      	ldrh	r2, [r7, #14]
 800a6ae:	88fb      	ldrh	r3, [r7, #6]
 800a6b0:	1c59      	adds	r1, r3, #1
 800a6b2:	80f9      	strh	r1, [r7, #6]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	4a13      	ldr	r2, [pc, #76]	; (800a704 <USER_UART1_DMA_Transmit2Upper+0x2c0>)
 800a6b8:	69d2      	ldr	r2, [r2, #28]
 800a6ba:	490f      	ldr	r1, [pc, #60]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		TxData[data_size+index++].value=MPU9255_real_data_t.speed[1];
 800a6c0:	89fa      	ldrh	r2, [r7, #14]
 800a6c2:	88fb      	ldrh	r3, [r7, #6]
 800a6c4:	1c59      	adds	r1, r3, #1
 800a6c6:	80f9      	strh	r1, [r7, #6]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	4a0e      	ldr	r2, [pc, #56]	; (800a704 <USER_UART1_DMA_Transmit2Upper+0x2c0>)
 800a6cc:	6a12      	ldr	r2, [r2, #32]
 800a6ce:	490a      	ldr	r1, [pc, #40]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a6d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		TxData[data_size+index++].value=MPU9255_real_data_t.speed[2];
 800a6d4:	89fa      	ldrh	r2, [r7, #14]
 800a6d6:	88fb      	ldrh	r3, [r7, #6]
 800a6d8:	1c59      	adds	r1, r3, #1
 800a6da:	80f9      	strh	r1, [r7, #6]
 800a6dc:	4413      	add	r3, r2
 800a6de:	4a09      	ldr	r2, [pc, #36]	; (800a704 <USER_UART1_DMA_Transmit2Upper+0x2c0>)
 800a6e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a6e2:	4905      	ldr	r1, [pc, #20]	; (800a6f8 <USER_UART1_DMA_Transmit2Upper+0x2b4>)
 800a6e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		TxData[data_size+index++].value=MPU9255_real_data_t.temp;
 800a6e8:	89fa      	ldrh	r2, [r7, #14]
 800a6ea:	88fb      	ldrh	r3, [r7, #6]
 800a6ec:	1c59      	adds	r1, r3, #1
 800a6ee:	80f9      	strh	r1, [r7, #6]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	4a04      	ldr	r2, [pc, #16]	; (800a704 <USER_UART1_DMA_Transmit2Upper+0x2c0>)
 800a6f4:	68d2      	ldr	r2, [r2, #12]
 800a6f6:	e009      	b.n	800a70c <USER_UART1_DMA_Transmit2Upper+0x2c8>
 800a6f8:	20001038 	.word	0x20001038
 800a6fc:	20000e00 	.word	0x20000e00
 800a700:	447a0000 	.word	0x447a0000
 800a704:	20000fc0 	.word	0x20000fc0
 800a708:	3a83126f 	.word	0x3a83126f
 800a70c:	4965      	ldr	r1, [pc, #404]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		TxData[data_size+index].value_i=crc32(&TxData[data_size].data[0],(SerialFrameLenTx[1]-1)*4);
 800a712:	89fb      	ldrh	r3, [r7, #14]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4a63      	ldr	r2, [pc, #396]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a718:	1898      	adds	r0, r3, r2
 800a71a:	2309      	movs	r3, #9
 800a71c:	3b01      	subs	r3, #1
 800a71e:	0099      	lsls	r1, r3, #2
 800a720:	89fa      	ldrh	r2, [r7, #14]
 800a722:	88fb      	ldrh	r3, [r7, #6]
 800a724:	18d4      	adds	r4, r2, r3
 800a726:	f7fe fdf1 	bl	800930c <crc32>
 800a72a:	4602      	mov	r2, r0
 800a72c:	4b5d      	ldr	r3, [pc, #372]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a72e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		index++;
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	3301      	adds	r3, #1
 800a736:	80fb      	strh	r3, [r7, #6]
		data_size+=index;
 800a738:	89fa      	ldrh	r2, [r7, #14]
 800a73a:	88fb      	ldrh	r3, [r7, #6]
 800a73c:	4413      	add	r3, r2
 800a73e:	81fb      	strh	r3, [r7, #14]
	}


	index=0;
 800a740:	2300      	movs	r3, #0
 800a742:	80fb      	strh	r3, [r7, #6]
	//SP03 SCM Advanced Settings Frame
	TxData[data_size+index].data[0]='S';
 800a744:	89fa      	ldrh	r2, [r7, #14]
 800a746:	88fb      	ldrh	r3, [r7, #6]
 800a748:	4413      	add	r3, r2
 800a74a:	4a56      	ldr	r2, [pc, #344]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a74c:	2153      	movs	r1, #83	; 0x53
 800a74e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	TxData[data_size+index].data[1]='P';
 800a752:	89fa      	ldrh	r2, [r7, #14]
 800a754:	88fb      	ldrh	r3, [r7, #6]
 800a756:	4413      	add	r3, r2
 800a758:	4a52      	ldr	r2, [pc, #328]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	2250      	movs	r2, #80	; 0x50
 800a760:	705a      	strb	r2, [r3, #1]
	TxData[data_size+index].data[2]='0';
 800a762:	89fa      	ldrh	r2, [r7, #14]
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	4413      	add	r3, r2
 800a768:	4a4e      	ldr	r2, [pc, #312]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	2230      	movs	r2, #48	; 0x30
 800a770:	709a      	strb	r2, [r3, #2]
	TxData[data_size+index].data[3]='3';
 800a772:	89fa      	ldrh	r2, [r7, #14]
 800a774:	88fb      	ldrh	r3, [r7, #6]
 800a776:	4413      	add	r3, r2
 800a778:	4a4a      	ldr	r2, [pc, #296]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4413      	add	r3, r2
 800a77e:	2233      	movs	r2, #51	; 0x33
 800a780:	70da      	strb	r2, [r3, #3]
	index++;
 800a782:	88fb      	ldrh	r3, [r7, #6]
 800a784:	3301      	adds	r3, #1
 800a786:	80fb      	strh	r3, [r7, #6]
	TxData[data_size+index++].value=(float)SCM_Settings.Cap_MaxVol_H/1000.0;
 800a788:	4b47      	ldr	r3, [pc, #284]	; (800a8a8 <USER_UART1_DMA_Transmit2Upper+0x464>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f6 fb11 	bl	8000db4 <__aeabi_i2f>
 800a792:	89fa      	ldrh	r2, [r7, #14]
 800a794:	88fb      	ldrh	r3, [r7, #6]
 800a796:	1c59      	adds	r1, r3, #1
 800a798:	80f9      	strh	r1, [r7, #6]
 800a79a:	18d4      	adds	r4, r2, r3
 800a79c:	4943      	ldr	r1, [pc, #268]	; (800a8ac <USER_UART1_DMA_Transmit2Upper+0x468>)
 800a79e:	f7f6 fc11 	bl	8000fc4 <__aeabi_fdiv>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4b3f      	ldr	r3, [pc, #252]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a7a8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	TxData[data_size+index++].value=(float)SCM_Settings.Cap_MaxVol_L/1000.0;
 800a7ac:	4b3e      	ldr	r3, [pc, #248]	; (800a8a8 <USER_UART1_DMA_Transmit2Upper+0x464>)
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7f6 faff 	bl	8000db4 <__aeabi_i2f>
 800a7b6:	89fa      	ldrh	r2, [r7, #14]
 800a7b8:	88fb      	ldrh	r3, [r7, #6]
 800a7ba:	1c59      	adds	r1, r3, #1
 800a7bc:	80f9      	strh	r1, [r7, #6]
 800a7be:	18d4      	adds	r4, r2, r3
 800a7c0:	493a      	ldr	r1, [pc, #232]	; (800a8ac <USER_UART1_DMA_Transmit2Upper+0x468>)
 800a7c2:	f7f6 fbff 	bl	8000fc4 <__aeabi_fdiv>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	4b36      	ldr	r3, [pc, #216]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a7cc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	TxData[data_size+index++].value=(float)SCM_Settings.Cap_MinVol_H/1000.0;
 800a7d0:	4b35      	ldr	r3, [pc, #212]	; (800a8a8 <USER_UART1_DMA_Transmit2Upper+0x464>)
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7f6 faed 	bl	8000db4 <__aeabi_i2f>
 800a7da:	89fa      	ldrh	r2, [r7, #14]
 800a7dc:	88fb      	ldrh	r3, [r7, #6]
 800a7de:	1c59      	adds	r1, r3, #1
 800a7e0:	80f9      	strh	r1, [r7, #6]
 800a7e2:	18d4      	adds	r4, r2, r3
 800a7e4:	4931      	ldr	r1, [pc, #196]	; (800a8ac <USER_UART1_DMA_Transmit2Upper+0x468>)
 800a7e6:	f7f6 fbed 	bl	8000fc4 <__aeabi_fdiv>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	4b2d      	ldr	r3, [pc, #180]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a7f0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	TxData[data_size+index++].value=(float)SCM_Settings.Cap_MinVol_L/1000.0;
 800a7f4:	4b2c      	ldr	r3, [pc, #176]	; (800a8a8 <USER_UART1_DMA_Transmit2Upper+0x464>)
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7f6 fadb 	bl	8000db4 <__aeabi_i2f>
 800a7fe:	89fa      	ldrh	r2, [r7, #14]
 800a800:	88fb      	ldrh	r3, [r7, #6]
 800a802:	1c59      	adds	r1, r3, #1
 800a804:	80f9      	strh	r1, [r7, #6]
 800a806:	18d4      	adds	r4, r2, r3
 800a808:	4928      	ldr	r1, [pc, #160]	; (800a8ac <USER_UART1_DMA_Transmit2Upper+0x468>)
 800a80a:	f7f6 fbdb 	bl	8000fc4 <__aeabi_fdiv>
 800a80e:	4603      	mov	r3, r0
 800a810:	461a      	mov	r2, r3
 800a812:	4b24      	ldr	r3, [pc, #144]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a814:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

//	uint32_t temp3=crc32(&TxData[0].data[0],SerialFrameLenTx[3]);
	TxData[data_size+index].value_i=crc32(&TxData[data_size].data[0],(SerialFrameLenTx[3]-1)*4);
 800a818:	89fb      	ldrh	r3, [r7, #14]
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4a21      	ldr	r2, [pc, #132]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a81e:	1898      	adds	r0, r3, r2
 800a820:	2306      	movs	r3, #6
 800a822:	3b01      	subs	r3, #1
 800a824:	0099      	lsls	r1, r3, #2
 800a826:	89fa      	ldrh	r2, [r7, #14]
 800a828:	88fb      	ldrh	r3, [r7, #6]
 800a82a:	18d4      	adds	r4, r2, r3
 800a82c:	f7fe fd6e 	bl	800930c <crc32>
 800a830:	4602      	mov	r2, r0
 800a832:	4b1c      	ldr	r3, [pc, #112]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a834:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	index++;
 800a838:	88fb      	ldrh	r3, [r7, #6]
 800a83a:	3301      	adds	r3, #1
 800a83c:	80fb      	strh	r3, [r7, #6]
	data_size+=index;
 800a83e:	89fa      	ldrh	r2, [r7, #14]
 800a840:	88fb      	ldrh	r3, [r7, #6]
 800a842:	4413      	add	r3, r2
 800a844:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i< data_size*4 ;i++)
 800a846:	2300      	movs	r3, #0
 800a848:	60bb      	str	r3, [r7, #8]
 800a84a:	e01a      	b.n	800a882 <USER_UART1_DMA_Transmit2Upper+0x43e>
		uart_transmit_buff[i]=TxData[i/4].data[i%4];
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	da00      	bge.n	800a854 <USER_UART1_DMA_Transmit2Upper+0x410>
 800a852:	3303      	adds	r3, #3
 800a854:	109b      	asrs	r3, r3, #2
 800a856:	4618      	mov	r0, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	425a      	negs	r2, r3
 800a85c:	f003 0303 	and.w	r3, r3, #3
 800a860:	f002 0203 	and.w	r2, r2, #3
 800a864:	bf58      	it	pl
 800a866:	4253      	negpl	r3, r2
 800a868:	490e      	ldr	r1, [pc, #56]	; (800a8a4 <USER_UART1_DMA_Transmit2Upper+0x460>)
 800a86a:	0082      	lsls	r2, r0, #2
 800a86c:	440a      	add	r2, r1
 800a86e:	4413      	add	r3, r2
 800a870:	7819      	ldrb	r1, [r3, #0]
 800a872:	4a0f      	ldr	r2, [pc, #60]	; (800a8b0 <USER_UART1_DMA_Transmit2Upper+0x46c>)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	4413      	add	r3, r2
 800a878:	460a      	mov	r2, r1
 800a87a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i< data_size*4 ;i++)
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	3301      	adds	r3, #1
 800a880:	60bb      	str	r3, [r7, #8]
 800a882:	89fb      	ldrh	r3, [r7, #14]
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	429a      	cmp	r2, r3
 800a88a:	dbdf      	blt.n	800a84c <USER_UART1_DMA_Transmit2Upper+0x408>
    HAL_UART_Transmit_DMA(&huart1,(uint8_t*)uart_transmit_buff,data_size*4);
 800a88c:	89fb      	ldrh	r3, [r7, #14]
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	b29b      	uxth	r3, r3
 800a892:	461a      	mov	r2, r3
 800a894:	4906      	ldr	r1, [pc, #24]	; (800a8b0 <USER_UART1_DMA_Transmit2Upper+0x46c>)
 800a896:	4807      	ldr	r0, [pc, #28]	; (800a8b4 <USER_UART1_DMA_Transmit2Upper+0x470>)
 800a898:	f7fd f9f2 	bl	8007c80 <HAL_UART_Transmit_DMA>
//	 HAL_UART_Transmit_DMA(&huart1,&TxData[0].data[0],data_size*4);
}
 800a89c:	bf00      	nop
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd90      	pop	{r4, r7, pc}
 800a8a4:	20001038 	.word	0x20001038
 800a8a8:	20000dcc 	.word	0x20000dcc
 800a8ac:	447a0000 	.word	0x447a0000
 800a8b0:	20001678 	.word	0x20001678
 800a8b4:	20000d84 	.word	0x20000d84

0800a8b8 <crc_check>:

uint8_t crc_check(SerialDataType* Data,uint16_t Len)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	807b      	strh	r3, [r7, #2]
	const uint32_t ExpectValue= (Data+Len-1)->value_i;
 800a8c4:	887b      	ldrh	r3, [r7, #2]
 800a8c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	60fb      	str	r3, [r7, #12]
	uint32_t CalValue=crc32(&(Data->data[0]), (Len-1)*4);
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	887b      	ldrh	r3, [r7, #2]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4619      	mov	r1, r3
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	f7fe fd13 	bl	800930c <crc32>
 800a8e6:	60b8      	str	r0, [r7, #8]
	if(CalValue == ExpectValue)
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d101      	bne.n	800a8f4 <crc_check+0x3c>
		return 1;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e000      	b.n	800a8f6 <crc_check+0x3e>
	else
		return 0;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <__errno>:
 800a900:	4b01      	ldr	r3, [pc, #4]	; (800a908 <__errno+0x8>)
 800a902:	6818      	ldr	r0, [r3, #0]
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	20000414 	.word	0x20000414

0800a90c <__libc_init_array>:
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	2500      	movs	r5, #0
 800a910:	4e0c      	ldr	r6, [pc, #48]	; (800a944 <__libc_init_array+0x38>)
 800a912:	4c0d      	ldr	r4, [pc, #52]	; (800a948 <__libc_init_array+0x3c>)
 800a914:	1ba4      	subs	r4, r4, r6
 800a916:	10a4      	asrs	r4, r4, #2
 800a918:	42a5      	cmp	r5, r4
 800a91a:	d109      	bne.n	800a930 <__libc_init_array+0x24>
 800a91c:	f004 fef6 	bl	800f70c <_init>
 800a920:	2500      	movs	r5, #0
 800a922:	4e0a      	ldr	r6, [pc, #40]	; (800a94c <__libc_init_array+0x40>)
 800a924:	4c0a      	ldr	r4, [pc, #40]	; (800a950 <__libc_init_array+0x44>)
 800a926:	1ba4      	subs	r4, r4, r6
 800a928:	10a4      	asrs	r4, r4, #2
 800a92a:	42a5      	cmp	r5, r4
 800a92c:	d105      	bne.n	800a93a <__libc_init_array+0x2e>
 800a92e:	bd70      	pop	{r4, r5, r6, pc}
 800a930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a934:	4798      	blx	r3
 800a936:	3501      	adds	r5, #1
 800a938:	e7ee      	b.n	800a918 <__libc_init_array+0xc>
 800a93a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a93e:	4798      	blx	r3
 800a940:	3501      	adds	r5, #1
 800a942:	e7f2      	b.n	800a92a <__libc_init_array+0x1e>
 800a944:	08010610 	.word	0x08010610
 800a948:	08010610 	.word	0x08010610
 800a94c:	08010610 	.word	0x08010610
 800a950:	08010614 	.word	0x08010614

0800a954 <memmove>:
 800a954:	4288      	cmp	r0, r1
 800a956:	b510      	push	{r4, lr}
 800a958:	eb01 0302 	add.w	r3, r1, r2
 800a95c:	d807      	bhi.n	800a96e <memmove+0x1a>
 800a95e:	1e42      	subs	r2, r0, #1
 800a960:	4299      	cmp	r1, r3
 800a962:	d00a      	beq.n	800a97a <memmove+0x26>
 800a964:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a968:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a96c:	e7f8      	b.n	800a960 <memmove+0xc>
 800a96e:	4283      	cmp	r3, r0
 800a970:	d9f5      	bls.n	800a95e <memmove+0xa>
 800a972:	1881      	adds	r1, r0, r2
 800a974:	1ad2      	subs	r2, r2, r3
 800a976:	42d3      	cmn	r3, r2
 800a978:	d100      	bne.n	800a97c <memmove+0x28>
 800a97a:	bd10      	pop	{r4, pc}
 800a97c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a980:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a984:	e7f7      	b.n	800a976 <memmove+0x22>

0800a986 <memset>:
 800a986:	4603      	mov	r3, r0
 800a988:	4402      	add	r2, r0
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d100      	bne.n	800a990 <memset+0xa>
 800a98e:	4770      	bx	lr
 800a990:	f803 1b01 	strb.w	r1, [r3], #1
 800a994:	e7f9      	b.n	800a98a <memset+0x4>

0800a996 <__cvt>:
 800a996:	2b00      	cmp	r3, #0
 800a998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a99c:	461e      	mov	r6, r3
 800a99e:	bfbb      	ittet	lt
 800a9a0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a9a4:	461e      	movlt	r6, r3
 800a9a6:	2300      	movge	r3, #0
 800a9a8:	232d      	movlt	r3, #45	; 0x2d
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a9ae:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800a9b2:	f027 0720 	bic.w	r7, r7, #32
 800a9b6:	2f46      	cmp	r7, #70	; 0x46
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a9bc:	700b      	strb	r3, [r1, #0]
 800a9be:	d004      	beq.n	800a9ca <__cvt+0x34>
 800a9c0:	2f45      	cmp	r7, #69	; 0x45
 800a9c2:	d100      	bne.n	800a9c6 <__cvt+0x30>
 800a9c4:	3501      	adds	r5, #1
 800a9c6:	2302      	movs	r3, #2
 800a9c8:	e000      	b.n	800a9cc <__cvt+0x36>
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	aa07      	add	r2, sp, #28
 800a9ce:	9204      	str	r2, [sp, #16]
 800a9d0:	aa06      	add	r2, sp, #24
 800a9d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a9d6:	e9cd 3500 	strd	r3, r5, [sp]
 800a9da:	4622      	mov	r2, r4
 800a9dc:	4633      	mov	r3, r6
 800a9de:	f001 fe9f 	bl	800c720 <_dtoa_r>
 800a9e2:	2f47      	cmp	r7, #71	; 0x47
 800a9e4:	4680      	mov	r8, r0
 800a9e6:	d102      	bne.n	800a9ee <__cvt+0x58>
 800a9e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9ea:	07db      	lsls	r3, r3, #31
 800a9ec:	d526      	bpl.n	800aa3c <__cvt+0xa6>
 800a9ee:	2f46      	cmp	r7, #70	; 0x46
 800a9f0:	eb08 0905 	add.w	r9, r8, r5
 800a9f4:	d111      	bne.n	800aa1a <__cvt+0x84>
 800a9f6:	f898 3000 	ldrb.w	r3, [r8]
 800a9fa:	2b30      	cmp	r3, #48	; 0x30
 800a9fc:	d10a      	bne.n	800aa14 <__cvt+0x7e>
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2300      	movs	r3, #0
 800aa02:	4620      	mov	r0, r4
 800aa04:	4631      	mov	r1, r6
 800aa06:	f7f6 f83b 	bl	8000a80 <__aeabi_dcmpeq>
 800aa0a:	b918      	cbnz	r0, 800aa14 <__cvt+0x7e>
 800aa0c:	f1c5 0501 	rsb	r5, r5, #1
 800aa10:	f8ca 5000 	str.w	r5, [sl]
 800aa14:	f8da 3000 	ldr.w	r3, [sl]
 800aa18:	4499      	add	r9, r3
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4620      	mov	r0, r4
 800aa20:	4631      	mov	r1, r6
 800aa22:	f7f6 f82d 	bl	8000a80 <__aeabi_dcmpeq>
 800aa26:	b938      	cbnz	r0, 800aa38 <__cvt+0xa2>
 800aa28:	2230      	movs	r2, #48	; 0x30
 800aa2a:	9b07      	ldr	r3, [sp, #28]
 800aa2c:	454b      	cmp	r3, r9
 800aa2e:	d205      	bcs.n	800aa3c <__cvt+0xa6>
 800aa30:	1c59      	adds	r1, r3, #1
 800aa32:	9107      	str	r1, [sp, #28]
 800aa34:	701a      	strb	r2, [r3, #0]
 800aa36:	e7f8      	b.n	800aa2a <__cvt+0x94>
 800aa38:	f8cd 901c 	str.w	r9, [sp, #28]
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	9b07      	ldr	r3, [sp, #28]
 800aa40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa42:	eba3 0308 	sub.w	r3, r3, r8
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	b008      	add	sp, #32
 800aa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aa4e <__exponent>:
 800aa4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa50:	2900      	cmp	r1, #0
 800aa52:	bfb4      	ite	lt
 800aa54:	232d      	movlt	r3, #45	; 0x2d
 800aa56:	232b      	movge	r3, #43	; 0x2b
 800aa58:	4604      	mov	r4, r0
 800aa5a:	bfb8      	it	lt
 800aa5c:	4249      	neglt	r1, r1
 800aa5e:	2909      	cmp	r1, #9
 800aa60:	f804 2b02 	strb.w	r2, [r4], #2
 800aa64:	7043      	strb	r3, [r0, #1]
 800aa66:	dd21      	ble.n	800aaac <__exponent+0x5e>
 800aa68:	f10d 0307 	add.w	r3, sp, #7
 800aa6c:	461f      	mov	r7, r3
 800aa6e:	260a      	movs	r6, #10
 800aa70:	fb91 f5f6 	sdiv	r5, r1, r6
 800aa74:	fb06 1115 	mls	r1, r6, r5, r1
 800aa78:	2d09      	cmp	r5, #9
 800aa7a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800aa7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa82:	f103 32ff 	add.w	r2, r3, #4294967295
 800aa86:	4629      	mov	r1, r5
 800aa88:	dc09      	bgt.n	800aa9e <__exponent+0x50>
 800aa8a:	3130      	adds	r1, #48	; 0x30
 800aa8c:	3b02      	subs	r3, #2
 800aa8e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aa92:	42bb      	cmp	r3, r7
 800aa94:	4622      	mov	r2, r4
 800aa96:	d304      	bcc.n	800aaa2 <__exponent+0x54>
 800aa98:	1a10      	subs	r0, r2, r0
 800aa9a:	b003      	add	sp, #12
 800aa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	e7e6      	b.n	800aa70 <__exponent+0x22>
 800aaa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaa6:	f804 2b01 	strb.w	r2, [r4], #1
 800aaaa:	e7f2      	b.n	800aa92 <__exponent+0x44>
 800aaac:	2330      	movs	r3, #48	; 0x30
 800aaae:	4419      	add	r1, r3
 800aab0:	7083      	strb	r3, [r0, #2]
 800aab2:	1d02      	adds	r2, r0, #4
 800aab4:	70c1      	strb	r1, [r0, #3]
 800aab6:	e7ef      	b.n	800aa98 <__exponent+0x4a>

0800aab8 <_printf_float>:
 800aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabc:	b091      	sub	sp, #68	; 0x44
 800aabe:	460c      	mov	r4, r1
 800aac0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800aac2:	4693      	mov	fp, r2
 800aac4:	461e      	mov	r6, r3
 800aac6:	4605      	mov	r5, r0
 800aac8:	f003 f886 	bl	800dbd8 <_localeconv_r>
 800aacc:	6803      	ldr	r3, [r0, #0]
 800aace:	4618      	mov	r0, r3
 800aad0:	9309      	str	r3, [sp, #36]	; 0x24
 800aad2:	f7f5 fba9 	bl	8000228 <strlen>
 800aad6:	2300      	movs	r3, #0
 800aad8:	930e      	str	r3, [sp, #56]	; 0x38
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	900a      	str	r0, [sp, #40]	; 0x28
 800aade:	3307      	adds	r3, #7
 800aae0:	f023 0307 	bic.w	r3, r3, #7
 800aae4:	f103 0208 	add.w	r2, r3, #8
 800aae8:	f894 8018 	ldrb.w	r8, [r4, #24]
 800aaec:	f8d4 a000 	ldr.w	sl, [r4]
 800aaf0:	603a      	str	r2, [r7, #0]
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aafa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800aafe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab04:	f04f 32ff 	mov.w	r2, #4294967295
 800ab08:	4ba6      	ldr	r3, [pc, #664]	; (800ada4 <_printf_float+0x2ec>)
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab0e:	f7f5 ffe9 	bl	8000ae4 <__aeabi_dcmpun>
 800ab12:	bb68      	cbnz	r0, 800ab70 <_printf_float+0xb8>
 800ab14:	f04f 32ff 	mov.w	r2, #4294967295
 800ab18:	4ba2      	ldr	r3, [pc, #648]	; (800ada4 <_printf_float+0x2ec>)
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab1e:	f7f5 ffc3 	bl	8000aa8 <__aeabi_dcmple>
 800ab22:	bb28      	cbnz	r0, 800ab70 <_printf_float+0xb8>
 800ab24:	2200      	movs	r2, #0
 800ab26:	2300      	movs	r3, #0
 800ab28:	4638      	mov	r0, r7
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	f7f5 ffb2 	bl	8000a94 <__aeabi_dcmplt>
 800ab30:	b110      	cbz	r0, 800ab38 <_printf_float+0x80>
 800ab32:	232d      	movs	r3, #45	; 0x2d
 800ab34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab38:	4f9b      	ldr	r7, [pc, #620]	; (800ada8 <_printf_float+0x2f0>)
 800ab3a:	4b9c      	ldr	r3, [pc, #624]	; (800adac <_printf_float+0x2f4>)
 800ab3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab40:	bf98      	it	ls
 800ab42:	461f      	movls	r7, r3
 800ab44:	2303      	movs	r3, #3
 800ab46:	f04f 0900 	mov.w	r9, #0
 800ab4a:	6123      	str	r3, [r4, #16]
 800ab4c:	f02a 0304 	bic.w	r3, sl, #4
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	9600      	str	r6, [sp, #0]
 800ab54:	465b      	mov	r3, fp
 800ab56:	aa0f      	add	r2, sp, #60	; 0x3c
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f000 f9e2 	bl	800af24 <_printf_common>
 800ab60:	3001      	adds	r0, #1
 800ab62:	f040 8090 	bne.w	800ac86 <_printf_float+0x1ce>
 800ab66:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6a:	b011      	add	sp, #68	; 0x44
 800ab6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab70:	463a      	mov	r2, r7
 800ab72:	464b      	mov	r3, r9
 800ab74:	4638      	mov	r0, r7
 800ab76:	4649      	mov	r1, r9
 800ab78:	f7f5 ffb4 	bl	8000ae4 <__aeabi_dcmpun>
 800ab7c:	b110      	cbz	r0, 800ab84 <_printf_float+0xcc>
 800ab7e:	4f8c      	ldr	r7, [pc, #560]	; (800adb0 <_printf_float+0x2f8>)
 800ab80:	4b8c      	ldr	r3, [pc, #560]	; (800adb4 <_printf_float+0x2fc>)
 800ab82:	e7db      	b.n	800ab3c <_printf_float+0x84>
 800ab84:	6863      	ldr	r3, [r4, #4]
 800ab86:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800ab8a:	1c59      	adds	r1, r3, #1
 800ab8c:	a80d      	add	r0, sp, #52	; 0x34
 800ab8e:	a90e      	add	r1, sp, #56	; 0x38
 800ab90:	d140      	bne.n	800ac14 <_printf_float+0x15c>
 800ab92:	2306      	movs	r3, #6
 800ab94:	6063      	str	r3, [r4, #4]
 800ab96:	f04f 0c00 	mov.w	ip, #0
 800ab9a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800ab9e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800aba2:	6863      	ldr	r3, [r4, #4]
 800aba4:	6022      	str	r2, [r4, #0]
 800aba6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	463a      	mov	r2, r7
 800abae:	464b      	mov	r3, r9
 800abb0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800abb4:	4628      	mov	r0, r5
 800abb6:	f7ff feee 	bl	800a996 <__cvt>
 800abba:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800abbe:	2b47      	cmp	r3, #71	; 0x47
 800abc0:	4607      	mov	r7, r0
 800abc2:	d109      	bne.n	800abd8 <_printf_float+0x120>
 800abc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abc6:	1cd8      	adds	r0, r3, #3
 800abc8:	db02      	blt.n	800abd0 <_printf_float+0x118>
 800abca:	6862      	ldr	r2, [r4, #4]
 800abcc:	4293      	cmp	r3, r2
 800abce:	dd47      	ble.n	800ac60 <_printf_float+0x1a8>
 800abd0:	f1a8 0802 	sub.w	r8, r8, #2
 800abd4:	fa5f f888 	uxtb.w	r8, r8
 800abd8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800abdc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800abde:	d824      	bhi.n	800ac2a <_printf_float+0x172>
 800abe0:	3901      	subs	r1, #1
 800abe2:	4642      	mov	r2, r8
 800abe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800abe8:	910d      	str	r1, [sp, #52]	; 0x34
 800abea:	f7ff ff30 	bl	800aa4e <__exponent>
 800abee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abf0:	4681      	mov	r9, r0
 800abf2:	1813      	adds	r3, r2, r0
 800abf4:	2a01      	cmp	r2, #1
 800abf6:	6123      	str	r3, [r4, #16]
 800abf8:	dc02      	bgt.n	800ac00 <_printf_float+0x148>
 800abfa:	6822      	ldr	r2, [r4, #0]
 800abfc:	07d1      	lsls	r1, r2, #31
 800abfe:	d501      	bpl.n	800ac04 <_printf_float+0x14c>
 800ac00:	3301      	adds	r3, #1
 800ac02:	6123      	str	r3, [r4, #16]
 800ac04:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d0a2      	beq.n	800ab52 <_printf_float+0x9a>
 800ac0c:	232d      	movs	r3, #45	; 0x2d
 800ac0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac12:	e79e      	b.n	800ab52 <_printf_float+0x9a>
 800ac14:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800ac18:	f000 816e 	beq.w	800aef8 <_printf_float+0x440>
 800ac1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ac20:	d1b9      	bne.n	800ab96 <_printf_float+0xde>
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1b7      	bne.n	800ab96 <_printf_float+0xde>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e7b4      	b.n	800ab94 <_printf_float+0xdc>
 800ac2a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800ac2e:	d119      	bne.n	800ac64 <_printf_float+0x1ac>
 800ac30:	2900      	cmp	r1, #0
 800ac32:	6863      	ldr	r3, [r4, #4]
 800ac34:	dd0c      	ble.n	800ac50 <_printf_float+0x198>
 800ac36:	6121      	str	r1, [r4, #16]
 800ac38:	b913      	cbnz	r3, 800ac40 <_printf_float+0x188>
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	07d2      	lsls	r2, r2, #31
 800ac3e:	d502      	bpl.n	800ac46 <_printf_float+0x18e>
 800ac40:	3301      	adds	r3, #1
 800ac42:	440b      	add	r3, r1
 800ac44:	6123      	str	r3, [r4, #16]
 800ac46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac48:	f04f 0900 	mov.w	r9, #0
 800ac4c:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac4e:	e7d9      	b.n	800ac04 <_printf_float+0x14c>
 800ac50:	b913      	cbnz	r3, 800ac58 <_printf_float+0x1a0>
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	07d0      	lsls	r0, r2, #31
 800ac56:	d501      	bpl.n	800ac5c <_printf_float+0x1a4>
 800ac58:	3302      	adds	r3, #2
 800ac5a:	e7f3      	b.n	800ac44 <_printf_float+0x18c>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e7f1      	b.n	800ac44 <_printf_float+0x18c>
 800ac60:	f04f 0867 	mov.w	r8, #103	; 0x67
 800ac64:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	db05      	blt.n	800ac78 <_printf_float+0x1c0>
 800ac6c:	6822      	ldr	r2, [r4, #0]
 800ac6e:	6123      	str	r3, [r4, #16]
 800ac70:	07d1      	lsls	r1, r2, #31
 800ac72:	d5e8      	bpl.n	800ac46 <_printf_float+0x18e>
 800ac74:	3301      	adds	r3, #1
 800ac76:	e7e5      	b.n	800ac44 <_printf_float+0x18c>
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bfcc      	ite	gt
 800ac7c:	2301      	movgt	r3, #1
 800ac7e:	f1c3 0302 	rsble	r3, r3, #2
 800ac82:	4413      	add	r3, r2
 800ac84:	e7de      	b.n	800ac44 <_printf_float+0x18c>
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	055a      	lsls	r2, r3, #21
 800ac8a:	d407      	bmi.n	800ac9c <_printf_float+0x1e4>
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	463a      	mov	r2, r7
 800ac90:	4659      	mov	r1, fp
 800ac92:	4628      	mov	r0, r5
 800ac94:	47b0      	blx	r6
 800ac96:	3001      	adds	r0, #1
 800ac98:	d129      	bne.n	800acee <_printf_float+0x236>
 800ac9a:	e764      	b.n	800ab66 <_printf_float+0xae>
 800ac9c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800aca0:	f240 80d7 	bls.w	800ae52 <_printf_float+0x39a>
 800aca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aca8:	2200      	movs	r2, #0
 800acaa:	2300      	movs	r3, #0
 800acac:	f7f5 fee8 	bl	8000a80 <__aeabi_dcmpeq>
 800acb0:	b388      	cbz	r0, 800ad16 <_printf_float+0x25e>
 800acb2:	2301      	movs	r3, #1
 800acb4:	4a40      	ldr	r2, [pc, #256]	; (800adb8 <_printf_float+0x300>)
 800acb6:	4659      	mov	r1, fp
 800acb8:	4628      	mov	r0, r5
 800acba:	47b0      	blx	r6
 800acbc:	3001      	adds	r0, #1
 800acbe:	f43f af52 	beq.w	800ab66 <_printf_float+0xae>
 800acc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800acc6:	429a      	cmp	r2, r3
 800acc8:	db02      	blt.n	800acd0 <_printf_float+0x218>
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	07d8      	lsls	r0, r3, #31
 800acce:	d50e      	bpl.n	800acee <_printf_float+0x236>
 800acd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acd4:	4659      	mov	r1, fp
 800acd6:	4628      	mov	r0, r5
 800acd8:	47b0      	blx	r6
 800acda:	3001      	adds	r0, #1
 800acdc:	f43f af43 	beq.w	800ab66 <_printf_float+0xae>
 800ace0:	2700      	movs	r7, #0
 800ace2:	f104 081a 	add.w	r8, r4, #26
 800ace6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ace8:	3b01      	subs	r3, #1
 800acea:	42bb      	cmp	r3, r7
 800acec:	dc09      	bgt.n	800ad02 <_printf_float+0x24a>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	079f      	lsls	r7, r3, #30
 800acf2:	f100 80fd 	bmi.w	800aef0 <_printf_float+0x438>
 800acf6:	68e0      	ldr	r0, [r4, #12]
 800acf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acfa:	4298      	cmp	r0, r3
 800acfc:	bfb8      	it	lt
 800acfe:	4618      	movlt	r0, r3
 800ad00:	e733      	b.n	800ab6a <_printf_float+0xb2>
 800ad02:	2301      	movs	r3, #1
 800ad04:	4642      	mov	r2, r8
 800ad06:	4659      	mov	r1, fp
 800ad08:	4628      	mov	r0, r5
 800ad0a:	47b0      	blx	r6
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	f43f af2a 	beq.w	800ab66 <_printf_float+0xae>
 800ad12:	3701      	adds	r7, #1
 800ad14:	e7e7      	b.n	800ace6 <_printf_float+0x22e>
 800ad16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	dc2b      	bgt.n	800ad74 <_printf_float+0x2bc>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	4a26      	ldr	r2, [pc, #152]	; (800adb8 <_printf_float+0x300>)
 800ad20:	4659      	mov	r1, fp
 800ad22:	4628      	mov	r0, r5
 800ad24:	47b0      	blx	r6
 800ad26:	3001      	adds	r0, #1
 800ad28:	f43f af1d 	beq.w	800ab66 <_printf_float+0xae>
 800ad2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad2e:	b923      	cbnz	r3, 800ad3a <_printf_float+0x282>
 800ad30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad32:	b913      	cbnz	r3, 800ad3a <_printf_float+0x282>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	07d9      	lsls	r1, r3, #31
 800ad38:	d5d9      	bpl.n	800acee <_printf_float+0x236>
 800ad3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad3e:	4659      	mov	r1, fp
 800ad40:	4628      	mov	r0, r5
 800ad42:	47b0      	blx	r6
 800ad44:	3001      	adds	r0, #1
 800ad46:	f43f af0e 	beq.w	800ab66 <_printf_float+0xae>
 800ad4a:	f04f 0800 	mov.w	r8, #0
 800ad4e:	f104 091a 	add.w	r9, r4, #26
 800ad52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad54:	425b      	negs	r3, r3
 800ad56:	4543      	cmp	r3, r8
 800ad58:	dc01      	bgt.n	800ad5e <_printf_float+0x2a6>
 800ad5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad5c:	e797      	b.n	800ac8e <_printf_float+0x1d6>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	464a      	mov	r2, r9
 800ad62:	4659      	mov	r1, fp
 800ad64:	4628      	mov	r0, r5
 800ad66:	47b0      	blx	r6
 800ad68:	3001      	adds	r0, #1
 800ad6a:	f43f aefc 	beq.w	800ab66 <_printf_float+0xae>
 800ad6e:	f108 0801 	add.w	r8, r8, #1
 800ad72:	e7ee      	b.n	800ad52 <_printf_float+0x29a>
 800ad74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	bfa8      	it	ge
 800ad7c:	461a      	movge	r2, r3
 800ad7e:	2a00      	cmp	r2, #0
 800ad80:	4690      	mov	r8, r2
 800ad82:	dd07      	ble.n	800ad94 <_printf_float+0x2dc>
 800ad84:	4613      	mov	r3, r2
 800ad86:	4659      	mov	r1, fp
 800ad88:	463a      	mov	r2, r7
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	47b0      	blx	r6
 800ad8e:	3001      	adds	r0, #1
 800ad90:	f43f aee9 	beq.w	800ab66 <_printf_float+0xae>
 800ad94:	f104 031a 	add.w	r3, r4, #26
 800ad98:	f04f 0a00 	mov.w	sl, #0
 800ad9c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800ada0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ada2:	e015      	b.n	800add0 <_printf_float+0x318>
 800ada4:	7fefffff 	.word	0x7fefffff
 800ada8:	0800ff24 	.word	0x0800ff24
 800adac:	0800ff20 	.word	0x0800ff20
 800adb0:	0800ff2c 	.word	0x0800ff2c
 800adb4:	0800ff28 	.word	0x0800ff28
 800adb8:	0800ff30 	.word	0x0800ff30
 800adbc:	2301      	movs	r3, #1
 800adbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adc0:	4659      	mov	r1, fp
 800adc2:	4628      	mov	r0, r5
 800adc4:	47b0      	blx	r6
 800adc6:	3001      	adds	r0, #1
 800adc8:	f43f aecd 	beq.w	800ab66 <_printf_float+0xae>
 800adcc:	f10a 0a01 	add.w	sl, sl, #1
 800add0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800add4:	eba9 0308 	sub.w	r3, r9, r8
 800add8:	4553      	cmp	r3, sl
 800adda:	dcef      	bgt.n	800adbc <_printf_float+0x304>
 800addc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ade0:	429a      	cmp	r2, r3
 800ade2:	444f      	add	r7, r9
 800ade4:	db14      	blt.n	800ae10 <_printf_float+0x358>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	07da      	lsls	r2, r3, #31
 800adea:	d411      	bmi.n	800ae10 <_printf_float+0x358>
 800adec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800adf0:	eba3 0209 	sub.w	r2, r3, r9
 800adf4:	eba3 0901 	sub.w	r9, r3, r1
 800adf8:	4591      	cmp	r9, r2
 800adfa:	bfa8      	it	ge
 800adfc:	4691      	movge	r9, r2
 800adfe:	f1b9 0f00 	cmp.w	r9, #0
 800ae02:	dc0d      	bgt.n	800ae20 <_printf_float+0x368>
 800ae04:	2700      	movs	r7, #0
 800ae06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae0a:	f104 081a 	add.w	r8, r4, #26
 800ae0e:	e018      	b.n	800ae42 <_printf_float+0x38a>
 800ae10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae14:	4659      	mov	r1, fp
 800ae16:	4628      	mov	r0, r5
 800ae18:	47b0      	blx	r6
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	d1e6      	bne.n	800adec <_printf_float+0x334>
 800ae1e:	e6a2      	b.n	800ab66 <_printf_float+0xae>
 800ae20:	464b      	mov	r3, r9
 800ae22:	463a      	mov	r2, r7
 800ae24:	4659      	mov	r1, fp
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b0      	blx	r6
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	d1ea      	bne.n	800ae04 <_printf_float+0x34c>
 800ae2e:	e69a      	b.n	800ab66 <_printf_float+0xae>
 800ae30:	2301      	movs	r3, #1
 800ae32:	4642      	mov	r2, r8
 800ae34:	4659      	mov	r1, fp
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b0      	blx	r6
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	f43f ae93 	beq.w	800ab66 <_printf_float+0xae>
 800ae40:	3701      	adds	r7, #1
 800ae42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ae46:	1a9b      	subs	r3, r3, r2
 800ae48:	eba3 0309 	sub.w	r3, r3, r9
 800ae4c:	42bb      	cmp	r3, r7
 800ae4e:	dcef      	bgt.n	800ae30 <_printf_float+0x378>
 800ae50:	e74d      	b.n	800acee <_printf_float+0x236>
 800ae52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae54:	2a01      	cmp	r2, #1
 800ae56:	dc01      	bgt.n	800ae5c <_printf_float+0x3a4>
 800ae58:	07db      	lsls	r3, r3, #31
 800ae5a:	d538      	bpl.n	800aece <_printf_float+0x416>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	463a      	mov	r2, r7
 800ae60:	4659      	mov	r1, fp
 800ae62:	4628      	mov	r0, r5
 800ae64:	47b0      	blx	r6
 800ae66:	3001      	adds	r0, #1
 800ae68:	f43f ae7d 	beq.w	800ab66 <_printf_float+0xae>
 800ae6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae70:	4659      	mov	r1, fp
 800ae72:	4628      	mov	r0, r5
 800ae74:	47b0      	blx	r6
 800ae76:	3001      	adds	r0, #1
 800ae78:	f107 0701 	add.w	r7, r7, #1
 800ae7c:	f43f ae73 	beq.w	800ab66 <_printf_float+0xae>
 800ae80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae86:	2200      	movs	r2, #0
 800ae88:	f103 38ff 	add.w	r8, r3, #4294967295
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f7f5 fdf7 	bl	8000a80 <__aeabi_dcmpeq>
 800ae92:	b9c0      	cbnz	r0, 800aec6 <_printf_float+0x40e>
 800ae94:	4643      	mov	r3, r8
 800ae96:	463a      	mov	r2, r7
 800ae98:	4659      	mov	r1, fp
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b0      	blx	r6
 800ae9e:	3001      	adds	r0, #1
 800aea0:	d10d      	bne.n	800aebe <_printf_float+0x406>
 800aea2:	e660      	b.n	800ab66 <_printf_float+0xae>
 800aea4:	2301      	movs	r3, #1
 800aea6:	4642      	mov	r2, r8
 800aea8:	4659      	mov	r1, fp
 800aeaa:	4628      	mov	r0, r5
 800aeac:	47b0      	blx	r6
 800aeae:	3001      	adds	r0, #1
 800aeb0:	f43f ae59 	beq.w	800ab66 <_printf_float+0xae>
 800aeb4:	3701      	adds	r7, #1
 800aeb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	42bb      	cmp	r3, r7
 800aebc:	dcf2      	bgt.n	800aea4 <_printf_float+0x3ec>
 800aebe:	464b      	mov	r3, r9
 800aec0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aec4:	e6e4      	b.n	800ac90 <_printf_float+0x1d8>
 800aec6:	2700      	movs	r7, #0
 800aec8:	f104 081a 	add.w	r8, r4, #26
 800aecc:	e7f3      	b.n	800aeb6 <_printf_float+0x3fe>
 800aece:	2301      	movs	r3, #1
 800aed0:	e7e1      	b.n	800ae96 <_printf_float+0x3de>
 800aed2:	2301      	movs	r3, #1
 800aed4:	4642      	mov	r2, r8
 800aed6:	4659      	mov	r1, fp
 800aed8:	4628      	mov	r0, r5
 800aeda:	47b0      	blx	r6
 800aedc:	3001      	adds	r0, #1
 800aede:	f43f ae42 	beq.w	800ab66 <_printf_float+0xae>
 800aee2:	3701      	adds	r7, #1
 800aee4:	68e3      	ldr	r3, [r4, #12]
 800aee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aee8:	1a9b      	subs	r3, r3, r2
 800aeea:	42bb      	cmp	r3, r7
 800aeec:	dcf1      	bgt.n	800aed2 <_printf_float+0x41a>
 800aeee:	e702      	b.n	800acf6 <_printf_float+0x23e>
 800aef0:	2700      	movs	r7, #0
 800aef2:	f104 0819 	add.w	r8, r4, #25
 800aef6:	e7f5      	b.n	800aee4 <_printf_float+0x42c>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f43f ae94 	beq.w	800ac26 <_printf_float+0x16e>
 800aefe:	f04f 0c00 	mov.w	ip, #0
 800af02:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800af06:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800af0a:	6022      	str	r2, [r4, #0]
 800af0c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800af10:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	463a      	mov	r2, r7
 800af18:	464b      	mov	r3, r9
 800af1a:	4628      	mov	r0, r5
 800af1c:	f7ff fd3b 	bl	800a996 <__cvt>
 800af20:	4607      	mov	r7, r0
 800af22:	e64f      	b.n	800abc4 <_printf_float+0x10c>

0800af24 <_printf_common>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	4691      	mov	r9, r2
 800af2a:	461f      	mov	r7, r3
 800af2c:	688a      	ldr	r2, [r1, #8]
 800af2e:	690b      	ldr	r3, [r1, #16]
 800af30:	4606      	mov	r6, r0
 800af32:	4293      	cmp	r3, r2
 800af34:	bfb8      	it	lt
 800af36:	4613      	movlt	r3, r2
 800af38:	f8c9 3000 	str.w	r3, [r9]
 800af3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af40:	460c      	mov	r4, r1
 800af42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af46:	b112      	cbz	r2, 800af4e <_printf_common+0x2a>
 800af48:	3301      	adds	r3, #1
 800af4a:	f8c9 3000 	str.w	r3, [r9]
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	0699      	lsls	r1, r3, #26
 800af52:	bf42      	ittt	mi
 800af54:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af58:	3302      	addmi	r3, #2
 800af5a:	f8c9 3000 	strmi.w	r3, [r9]
 800af5e:	6825      	ldr	r5, [r4, #0]
 800af60:	f015 0506 	ands.w	r5, r5, #6
 800af64:	d107      	bne.n	800af76 <_printf_common+0x52>
 800af66:	f104 0a19 	add.w	sl, r4, #25
 800af6a:	68e3      	ldr	r3, [r4, #12]
 800af6c:	f8d9 2000 	ldr.w	r2, [r9]
 800af70:	1a9b      	subs	r3, r3, r2
 800af72:	42ab      	cmp	r3, r5
 800af74:	dc29      	bgt.n	800afca <_printf_common+0xa6>
 800af76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800af7a:	6822      	ldr	r2, [r4, #0]
 800af7c:	3300      	adds	r3, #0
 800af7e:	bf18      	it	ne
 800af80:	2301      	movne	r3, #1
 800af82:	0692      	lsls	r2, r2, #26
 800af84:	d42e      	bmi.n	800afe4 <_printf_common+0xc0>
 800af86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af8a:	4639      	mov	r1, r7
 800af8c:	4630      	mov	r0, r6
 800af8e:	47c0      	blx	r8
 800af90:	3001      	adds	r0, #1
 800af92:	d021      	beq.n	800afd8 <_printf_common+0xb4>
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	68e5      	ldr	r5, [r4, #12]
 800af98:	f003 0306 	and.w	r3, r3, #6
 800af9c:	2b04      	cmp	r3, #4
 800af9e:	bf18      	it	ne
 800afa0:	2500      	movne	r5, #0
 800afa2:	f8d9 2000 	ldr.w	r2, [r9]
 800afa6:	f04f 0900 	mov.w	r9, #0
 800afaa:	bf08      	it	eq
 800afac:	1aad      	subeq	r5, r5, r2
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	6922      	ldr	r2, [r4, #16]
 800afb2:	bf08      	it	eq
 800afb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afb8:	4293      	cmp	r3, r2
 800afba:	bfc4      	itt	gt
 800afbc:	1a9b      	subgt	r3, r3, r2
 800afbe:	18ed      	addgt	r5, r5, r3
 800afc0:	341a      	adds	r4, #26
 800afc2:	454d      	cmp	r5, r9
 800afc4:	d11a      	bne.n	800affc <_printf_common+0xd8>
 800afc6:	2000      	movs	r0, #0
 800afc8:	e008      	b.n	800afdc <_printf_common+0xb8>
 800afca:	2301      	movs	r3, #1
 800afcc:	4652      	mov	r2, sl
 800afce:	4639      	mov	r1, r7
 800afd0:	4630      	mov	r0, r6
 800afd2:	47c0      	blx	r8
 800afd4:	3001      	adds	r0, #1
 800afd6:	d103      	bne.n	800afe0 <_printf_common+0xbc>
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295
 800afdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe0:	3501      	adds	r5, #1
 800afe2:	e7c2      	b.n	800af6a <_printf_common+0x46>
 800afe4:	2030      	movs	r0, #48	; 0x30
 800afe6:	18e1      	adds	r1, r4, r3
 800afe8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afec:	1c5a      	adds	r2, r3, #1
 800afee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aff2:	4422      	add	r2, r4
 800aff4:	3302      	adds	r3, #2
 800aff6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800affa:	e7c4      	b.n	800af86 <_printf_common+0x62>
 800affc:	2301      	movs	r3, #1
 800affe:	4622      	mov	r2, r4
 800b000:	4639      	mov	r1, r7
 800b002:	4630      	mov	r0, r6
 800b004:	47c0      	blx	r8
 800b006:	3001      	adds	r0, #1
 800b008:	d0e6      	beq.n	800afd8 <_printf_common+0xb4>
 800b00a:	f109 0901 	add.w	r9, r9, #1
 800b00e:	e7d8      	b.n	800afc2 <_printf_common+0x9e>

0800b010 <_printf_i>:
 800b010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b014:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b018:	460c      	mov	r4, r1
 800b01a:	7e09      	ldrb	r1, [r1, #24]
 800b01c:	b085      	sub	sp, #20
 800b01e:	296e      	cmp	r1, #110	; 0x6e
 800b020:	4617      	mov	r7, r2
 800b022:	4606      	mov	r6, r0
 800b024:	4698      	mov	r8, r3
 800b026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b028:	f000 80b3 	beq.w	800b192 <_printf_i+0x182>
 800b02c:	d822      	bhi.n	800b074 <_printf_i+0x64>
 800b02e:	2963      	cmp	r1, #99	; 0x63
 800b030:	d036      	beq.n	800b0a0 <_printf_i+0x90>
 800b032:	d80a      	bhi.n	800b04a <_printf_i+0x3a>
 800b034:	2900      	cmp	r1, #0
 800b036:	f000 80b9 	beq.w	800b1ac <_printf_i+0x19c>
 800b03a:	2958      	cmp	r1, #88	; 0x58
 800b03c:	f000 8083 	beq.w	800b146 <_printf_i+0x136>
 800b040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b044:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b048:	e032      	b.n	800b0b0 <_printf_i+0xa0>
 800b04a:	2964      	cmp	r1, #100	; 0x64
 800b04c:	d001      	beq.n	800b052 <_printf_i+0x42>
 800b04e:	2969      	cmp	r1, #105	; 0x69
 800b050:	d1f6      	bne.n	800b040 <_printf_i+0x30>
 800b052:	6820      	ldr	r0, [r4, #0]
 800b054:	6813      	ldr	r3, [r2, #0]
 800b056:	0605      	lsls	r5, r0, #24
 800b058:	f103 0104 	add.w	r1, r3, #4
 800b05c:	d52a      	bpl.n	800b0b4 <_printf_i+0xa4>
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6011      	str	r1, [r2, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	da03      	bge.n	800b06e <_printf_i+0x5e>
 800b066:	222d      	movs	r2, #45	; 0x2d
 800b068:	425b      	negs	r3, r3
 800b06a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b06e:	486f      	ldr	r0, [pc, #444]	; (800b22c <_printf_i+0x21c>)
 800b070:	220a      	movs	r2, #10
 800b072:	e039      	b.n	800b0e8 <_printf_i+0xd8>
 800b074:	2973      	cmp	r1, #115	; 0x73
 800b076:	f000 809d 	beq.w	800b1b4 <_printf_i+0x1a4>
 800b07a:	d808      	bhi.n	800b08e <_printf_i+0x7e>
 800b07c:	296f      	cmp	r1, #111	; 0x6f
 800b07e:	d020      	beq.n	800b0c2 <_printf_i+0xb2>
 800b080:	2970      	cmp	r1, #112	; 0x70
 800b082:	d1dd      	bne.n	800b040 <_printf_i+0x30>
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	f043 0320 	orr.w	r3, r3, #32
 800b08a:	6023      	str	r3, [r4, #0]
 800b08c:	e003      	b.n	800b096 <_printf_i+0x86>
 800b08e:	2975      	cmp	r1, #117	; 0x75
 800b090:	d017      	beq.n	800b0c2 <_printf_i+0xb2>
 800b092:	2978      	cmp	r1, #120	; 0x78
 800b094:	d1d4      	bne.n	800b040 <_printf_i+0x30>
 800b096:	2378      	movs	r3, #120	; 0x78
 800b098:	4865      	ldr	r0, [pc, #404]	; (800b230 <_printf_i+0x220>)
 800b09a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b09e:	e055      	b.n	800b14c <_printf_i+0x13c>
 800b0a0:	6813      	ldr	r3, [r2, #0]
 800b0a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0a6:	1d19      	adds	r1, r3, #4
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6011      	str	r1, [r2, #0]
 800b0ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e08c      	b.n	800b1ce <_printf_i+0x1be>
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0ba:	6011      	str	r1, [r2, #0]
 800b0bc:	bf18      	it	ne
 800b0be:	b21b      	sxthne	r3, r3
 800b0c0:	e7cf      	b.n	800b062 <_printf_i+0x52>
 800b0c2:	6813      	ldr	r3, [r2, #0]
 800b0c4:	6825      	ldr	r5, [r4, #0]
 800b0c6:	1d18      	adds	r0, r3, #4
 800b0c8:	6010      	str	r0, [r2, #0]
 800b0ca:	0628      	lsls	r0, r5, #24
 800b0cc:	d501      	bpl.n	800b0d2 <_printf_i+0xc2>
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	e002      	b.n	800b0d8 <_printf_i+0xc8>
 800b0d2:	0668      	lsls	r0, r5, #25
 800b0d4:	d5fb      	bpl.n	800b0ce <_printf_i+0xbe>
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	296f      	cmp	r1, #111	; 0x6f
 800b0da:	bf14      	ite	ne
 800b0dc:	220a      	movne	r2, #10
 800b0de:	2208      	moveq	r2, #8
 800b0e0:	4852      	ldr	r0, [pc, #328]	; (800b22c <_printf_i+0x21c>)
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0e8:	6865      	ldr	r5, [r4, #4]
 800b0ea:	2d00      	cmp	r5, #0
 800b0ec:	60a5      	str	r5, [r4, #8]
 800b0ee:	f2c0 8095 	blt.w	800b21c <_printf_i+0x20c>
 800b0f2:	6821      	ldr	r1, [r4, #0]
 800b0f4:	f021 0104 	bic.w	r1, r1, #4
 800b0f8:	6021      	str	r1, [r4, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d13d      	bne.n	800b17a <_printf_i+0x16a>
 800b0fe:	2d00      	cmp	r5, #0
 800b100:	f040 808e 	bne.w	800b220 <_printf_i+0x210>
 800b104:	4665      	mov	r5, ip
 800b106:	2a08      	cmp	r2, #8
 800b108:	d10b      	bne.n	800b122 <_printf_i+0x112>
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	07db      	lsls	r3, r3, #31
 800b10e:	d508      	bpl.n	800b122 <_printf_i+0x112>
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	6862      	ldr	r2, [r4, #4]
 800b114:	429a      	cmp	r2, r3
 800b116:	bfde      	ittt	le
 800b118:	2330      	movle	r3, #48	; 0x30
 800b11a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b11e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b122:	ebac 0305 	sub.w	r3, ip, r5
 800b126:	6123      	str	r3, [r4, #16]
 800b128:	f8cd 8000 	str.w	r8, [sp]
 800b12c:	463b      	mov	r3, r7
 800b12e:	aa03      	add	r2, sp, #12
 800b130:	4621      	mov	r1, r4
 800b132:	4630      	mov	r0, r6
 800b134:	f7ff fef6 	bl	800af24 <_printf_common>
 800b138:	3001      	adds	r0, #1
 800b13a:	d14d      	bne.n	800b1d8 <_printf_i+0x1c8>
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295
 800b140:	b005      	add	sp, #20
 800b142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b146:	4839      	ldr	r0, [pc, #228]	; (800b22c <_printf_i+0x21c>)
 800b148:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b14c:	6813      	ldr	r3, [r2, #0]
 800b14e:	6821      	ldr	r1, [r4, #0]
 800b150:	1d1d      	adds	r5, r3, #4
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6015      	str	r5, [r2, #0]
 800b156:	060a      	lsls	r2, r1, #24
 800b158:	d50b      	bpl.n	800b172 <_printf_i+0x162>
 800b15a:	07ca      	lsls	r2, r1, #31
 800b15c:	bf44      	itt	mi
 800b15e:	f041 0120 	orrmi.w	r1, r1, #32
 800b162:	6021      	strmi	r1, [r4, #0]
 800b164:	b91b      	cbnz	r3, 800b16e <_printf_i+0x15e>
 800b166:	6822      	ldr	r2, [r4, #0]
 800b168:	f022 0220 	bic.w	r2, r2, #32
 800b16c:	6022      	str	r2, [r4, #0]
 800b16e:	2210      	movs	r2, #16
 800b170:	e7b7      	b.n	800b0e2 <_printf_i+0xd2>
 800b172:	064d      	lsls	r5, r1, #25
 800b174:	bf48      	it	mi
 800b176:	b29b      	uxthmi	r3, r3
 800b178:	e7ef      	b.n	800b15a <_printf_i+0x14a>
 800b17a:	4665      	mov	r5, ip
 800b17c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b180:	fb02 3311 	mls	r3, r2, r1, r3
 800b184:	5cc3      	ldrb	r3, [r0, r3]
 800b186:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b18a:	460b      	mov	r3, r1
 800b18c:	2900      	cmp	r1, #0
 800b18e:	d1f5      	bne.n	800b17c <_printf_i+0x16c>
 800b190:	e7b9      	b.n	800b106 <_printf_i+0xf6>
 800b192:	6813      	ldr	r3, [r2, #0]
 800b194:	6825      	ldr	r5, [r4, #0]
 800b196:	1d18      	adds	r0, r3, #4
 800b198:	6961      	ldr	r1, [r4, #20]
 800b19a:	6010      	str	r0, [r2, #0]
 800b19c:	0628      	lsls	r0, r5, #24
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	d501      	bpl.n	800b1a6 <_printf_i+0x196>
 800b1a2:	6019      	str	r1, [r3, #0]
 800b1a4:	e002      	b.n	800b1ac <_printf_i+0x19c>
 800b1a6:	066a      	lsls	r2, r5, #25
 800b1a8:	d5fb      	bpl.n	800b1a2 <_printf_i+0x192>
 800b1aa:	8019      	strh	r1, [r3, #0]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4665      	mov	r5, ip
 800b1b0:	6123      	str	r3, [r4, #16]
 800b1b2:	e7b9      	b.n	800b128 <_printf_i+0x118>
 800b1b4:	6813      	ldr	r3, [r2, #0]
 800b1b6:	1d19      	adds	r1, r3, #4
 800b1b8:	6011      	str	r1, [r2, #0]
 800b1ba:	681d      	ldr	r5, [r3, #0]
 800b1bc:	6862      	ldr	r2, [r4, #4]
 800b1be:	2100      	movs	r1, #0
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	f002 fd95 	bl	800dcf0 <memchr>
 800b1c6:	b108      	cbz	r0, 800b1cc <_printf_i+0x1bc>
 800b1c8:	1b40      	subs	r0, r0, r5
 800b1ca:	6060      	str	r0, [r4, #4]
 800b1cc:	6863      	ldr	r3, [r4, #4]
 800b1ce:	6123      	str	r3, [r4, #16]
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d6:	e7a7      	b.n	800b128 <_printf_i+0x118>
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	462a      	mov	r2, r5
 800b1dc:	4639      	mov	r1, r7
 800b1de:	4630      	mov	r0, r6
 800b1e0:	47c0      	blx	r8
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	d0aa      	beq.n	800b13c <_printf_i+0x12c>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	079b      	lsls	r3, r3, #30
 800b1ea:	d413      	bmi.n	800b214 <_printf_i+0x204>
 800b1ec:	68e0      	ldr	r0, [r4, #12]
 800b1ee:	9b03      	ldr	r3, [sp, #12]
 800b1f0:	4298      	cmp	r0, r3
 800b1f2:	bfb8      	it	lt
 800b1f4:	4618      	movlt	r0, r3
 800b1f6:	e7a3      	b.n	800b140 <_printf_i+0x130>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	464a      	mov	r2, r9
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	4630      	mov	r0, r6
 800b200:	47c0      	blx	r8
 800b202:	3001      	adds	r0, #1
 800b204:	d09a      	beq.n	800b13c <_printf_i+0x12c>
 800b206:	3501      	adds	r5, #1
 800b208:	68e3      	ldr	r3, [r4, #12]
 800b20a:	9a03      	ldr	r2, [sp, #12]
 800b20c:	1a9b      	subs	r3, r3, r2
 800b20e:	42ab      	cmp	r3, r5
 800b210:	dcf2      	bgt.n	800b1f8 <_printf_i+0x1e8>
 800b212:	e7eb      	b.n	800b1ec <_printf_i+0x1dc>
 800b214:	2500      	movs	r5, #0
 800b216:	f104 0919 	add.w	r9, r4, #25
 800b21a:	e7f5      	b.n	800b208 <_printf_i+0x1f8>
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1ac      	bne.n	800b17a <_printf_i+0x16a>
 800b220:	7803      	ldrb	r3, [r0, #0]
 800b222:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b226:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b22a:	e76c      	b.n	800b106 <_printf_i+0xf6>
 800b22c:	0800ff32 	.word	0x0800ff32
 800b230:	0800ff43 	.word	0x0800ff43

0800b234 <_scanf_float>:
 800b234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b238:	469a      	mov	sl, r3
 800b23a:	688b      	ldr	r3, [r1, #8]
 800b23c:	4616      	mov	r6, r2
 800b23e:	1e5a      	subs	r2, r3, #1
 800b240:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b244:	bf88      	it	hi
 800b246:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b24a:	b087      	sub	sp, #28
 800b24c:	bf85      	ittet	hi
 800b24e:	189b      	addhi	r3, r3, r2
 800b250:	9301      	strhi	r3, [sp, #4]
 800b252:	2300      	movls	r3, #0
 800b254:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b258:	4688      	mov	r8, r1
 800b25a:	f04f 0b00 	mov.w	fp, #0
 800b25e:	bf8c      	ite	hi
 800b260:	608b      	strhi	r3, [r1, #8]
 800b262:	9301      	strls	r3, [sp, #4]
 800b264:	680b      	ldr	r3, [r1, #0]
 800b266:	4607      	mov	r7, r0
 800b268:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b26c:	f848 3b1c 	str.w	r3, [r8], #28
 800b270:	460c      	mov	r4, r1
 800b272:	4645      	mov	r5, r8
 800b274:	465a      	mov	r2, fp
 800b276:	46d9      	mov	r9, fp
 800b278:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b27c:	f8cd b008 	str.w	fp, [sp, #8]
 800b280:	68a1      	ldr	r1, [r4, #8]
 800b282:	b181      	cbz	r1, 800b2a6 <_scanf_float+0x72>
 800b284:	6833      	ldr	r3, [r6, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b49      	cmp	r3, #73	; 0x49
 800b28a:	d071      	beq.n	800b370 <_scanf_float+0x13c>
 800b28c:	d84d      	bhi.n	800b32a <_scanf_float+0xf6>
 800b28e:	2b39      	cmp	r3, #57	; 0x39
 800b290:	d840      	bhi.n	800b314 <_scanf_float+0xe0>
 800b292:	2b31      	cmp	r3, #49	; 0x31
 800b294:	f080 8088 	bcs.w	800b3a8 <_scanf_float+0x174>
 800b298:	2b2d      	cmp	r3, #45	; 0x2d
 800b29a:	f000 8090 	beq.w	800b3be <_scanf_float+0x18a>
 800b29e:	d815      	bhi.n	800b2cc <_scanf_float+0x98>
 800b2a0:	2b2b      	cmp	r3, #43	; 0x2b
 800b2a2:	f000 808c 	beq.w	800b3be <_scanf_float+0x18a>
 800b2a6:	f1b9 0f00 	cmp.w	r9, #0
 800b2aa:	d003      	beq.n	800b2b4 <_scanf_float+0x80>
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	3a01      	subs	r2, #1
 800b2b6:	2a01      	cmp	r2, #1
 800b2b8:	f200 80ea 	bhi.w	800b490 <_scanf_float+0x25c>
 800b2bc:	4545      	cmp	r5, r8
 800b2be:	f200 80dc 	bhi.w	800b47a <_scanf_float+0x246>
 800b2c2:	2601      	movs	r6, #1
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	b007      	add	sp, #28
 800b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2cc:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ce:	f000 809f 	beq.w	800b410 <_scanf_float+0x1dc>
 800b2d2:	2b30      	cmp	r3, #48	; 0x30
 800b2d4:	d1e7      	bne.n	800b2a6 <_scanf_float+0x72>
 800b2d6:	6820      	ldr	r0, [r4, #0]
 800b2d8:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b2dc:	d064      	beq.n	800b3a8 <_scanf_float+0x174>
 800b2de:	9b01      	ldr	r3, [sp, #4]
 800b2e0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b2e4:	6020      	str	r0, [r4, #0]
 800b2e6:	f109 0901 	add.w	r9, r9, #1
 800b2ea:	b11b      	cbz	r3, 800b2f4 <_scanf_float+0xc0>
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	3101      	adds	r1, #1
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	60a1      	str	r1, [r4, #8]
 800b2f4:	68a3      	ldr	r3, [r4, #8]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	60a3      	str	r3, [r4, #8]
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	6873      	ldr	r3, [r6, #4]
 800b302:	3b01      	subs	r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	6073      	str	r3, [r6, #4]
 800b308:	f340 80ac 	ble.w	800b464 <_scanf_float+0x230>
 800b30c:	6833      	ldr	r3, [r6, #0]
 800b30e:	3301      	adds	r3, #1
 800b310:	6033      	str	r3, [r6, #0]
 800b312:	e7b5      	b.n	800b280 <_scanf_float+0x4c>
 800b314:	2b45      	cmp	r3, #69	; 0x45
 800b316:	f000 8085 	beq.w	800b424 <_scanf_float+0x1f0>
 800b31a:	2b46      	cmp	r3, #70	; 0x46
 800b31c:	d06a      	beq.n	800b3f4 <_scanf_float+0x1c0>
 800b31e:	2b41      	cmp	r3, #65	; 0x41
 800b320:	d1c1      	bne.n	800b2a6 <_scanf_float+0x72>
 800b322:	2a01      	cmp	r2, #1
 800b324:	d1bf      	bne.n	800b2a6 <_scanf_float+0x72>
 800b326:	2202      	movs	r2, #2
 800b328:	e046      	b.n	800b3b8 <_scanf_float+0x184>
 800b32a:	2b65      	cmp	r3, #101	; 0x65
 800b32c:	d07a      	beq.n	800b424 <_scanf_float+0x1f0>
 800b32e:	d818      	bhi.n	800b362 <_scanf_float+0x12e>
 800b330:	2b54      	cmp	r3, #84	; 0x54
 800b332:	d066      	beq.n	800b402 <_scanf_float+0x1ce>
 800b334:	d811      	bhi.n	800b35a <_scanf_float+0x126>
 800b336:	2b4e      	cmp	r3, #78	; 0x4e
 800b338:	d1b5      	bne.n	800b2a6 <_scanf_float+0x72>
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	d146      	bne.n	800b3cc <_scanf_float+0x198>
 800b33e:	f1b9 0f00 	cmp.w	r9, #0
 800b342:	d145      	bne.n	800b3d0 <_scanf_float+0x19c>
 800b344:	6821      	ldr	r1, [r4, #0]
 800b346:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b34a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b34e:	d13f      	bne.n	800b3d0 <_scanf_float+0x19c>
 800b350:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b354:	6021      	str	r1, [r4, #0]
 800b356:	2201      	movs	r2, #1
 800b358:	e02e      	b.n	800b3b8 <_scanf_float+0x184>
 800b35a:	2b59      	cmp	r3, #89	; 0x59
 800b35c:	d01e      	beq.n	800b39c <_scanf_float+0x168>
 800b35e:	2b61      	cmp	r3, #97	; 0x61
 800b360:	e7de      	b.n	800b320 <_scanf_float+0xec>
 800b362:	2b6e      	cmp	r3, #110	; 0x6e
 800b364:	d0e9      	beq.n	800b33a <_scanf_float+0x106>
 800b366:	d815      	bhi.n	800b394 <_scanf_float+0x160>
 800b368:	2b66      	cmp	r3, #102	; 0x66
 800b36a:	d043      	beq.n	800b3f4 <_scanf_float+0x1c0>
 800b36c:	2b69      	cmp	r3, #105	; 0x69
 800b36e:	d19a      	bne.n	800b2a6 <_scanf_float+0x72>
 800b370:	f1bb 0f00 	cmp.w	fp, #0
 800b374:	d138      	bne.n	800b3e8 <_scanf_float+0x1b4>
 800b376:	f1b9 0f00 	cmp.w	r9, #0
 800b37a:	d197      	bne.n	800b2ac <_scanf_float+0x78>
 800b37c:	6821      	ldr	r1, [r4, #0]
 800b37e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b382:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b386:	d195      	bne.n	800b2b4 <_scanf_float+0x80>
 800b388:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b38c:	6021      	str	r1, [r4, #0]
 800b38e:	f04f 0b01 	mov.w	fp, #1
 800b392:	e011      	b.n	800b3b8 <_scanf_float+0x184>
 800b394:	2b74      	cmp	r3, #116	; 0x74
 800b396:	d034      	beq.n	800b402 <_scanf_float+0x1ce>
 800b398:	2b79      	cmp	r3, #121	; 0x79
 800b39a:	d184      	bne.n	800b2a6 <_scanf_float+0x72>
 800b39c:	f1bb 0f07 	cmp.w	fp, #7
 800b3a0:	d181      	bne.n	800b2a6 <_scanf_float+0x72>
 800b3a2:	f04f 0b08 	mov.w	fp, #8
 800b3a6:	e007      	b.n	800b3b8 <_scanf_float+0x184>
 800b3a8:	eb12 0f0b 	cmn.w	r2, fp
 800b3ac:	f47f af7b 	bne.w	800b2a6 <_scanf_float+0x72>
 800b3b0:	6821      	ldr	r1, [r4, #0]
 800b3b2:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b3b6:	6021      	str	r1, [r4, #0]
 800b3b8:	702b      	strb	r3, [r5, #0]
 800b3ba:	3501      	adds	r5, #1
 800b3bc:	e79a      	b.n	800b2f4 <_scanf_float+0xc0>
 800b3be:	6821      	ldr	r1, [r4, #0]
 800b3c0:	0608      	lsls	r0, r1, #24
 800b3c2:	f57f af70 	bpl.w	800b2a6 <_scanf_float+0x72>
 800b3c6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b3ca:	e7f4      	b.n	800b3b6 <_scanf_float+0x182>
 800b3cc:	2a02      	cmp	r2, #2
 800b3ce:	d047      	beq.n	800b460 <_scanf_float+0x22c>
 800b3d0:	f1bb 0f01 	cmp.w	fp, #1
 800b3d4:	d003      	beq.n	800b3de <_scanf_float+0x1aa>
 800b3d6:	f1bb 0f04 	cmp.w	fp, #4
 800b3da:	f47f af64 	bne.w	800b2a6 <_scanf_float+0x72>
 800b3de:	f10b 0b01 	add.w	fp, fp, #1
 800b3e2:	fa5f fb8b 	uxtb.w	fp, fp
 800b3e6:	e7e7      	b.n	800b3b8 <_scanf_float+0x184>
 800b3e8:	f1bb 0f03 	cmp.w	fp, #3
 800b3ec:	d0f7      	beq.n	800b3de <_scanf_float+0x1aa>
 800b3ee:	f1bb 0f05 	cmp.w	fp, #5
 800b3f2:	e7f2      	b.n	800b3da <_scanf_float+0x1a6>
 800b3f4:	f1bb 0f02 	cmp.w	fp, #2
 800b3f8:	f47f af55 	bne.w	800b2a6 <_scanf_float+0x72>
 800b3fc:	f04f 0b03 	mov.w	fp, #3
 800b400:	e7da      	b.n	800b3b8 <_scanf_float+0x184>
 800b402:	f1bb 0f06 	cmp.w	fp, #6
 800b406:	f47f af4e 	bne.w	800b2a6 <_scanf_float+0x72>
 800b40a:	f04f 0b07 	mov.w	fp, #7
 800b40e:	e7d3      	b.n	800b3b8 <_scanf_float+0x184>
 800b410:	6821      	ldr	r1, [r4, #0]
 800b412:	0588      	lsls	r0, r1, #22
 800b414:	f57f af47 	bpl.w	800b2a6 <_scanf_float+0x72>
 800b418:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b41c:	6021      	str	r1, [r4, #0]
 800b41e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b422:	e7c9      	b.n	800b3b8 <_scanf_float+0x184>
 800b424:	6821      	ldr	r1, [r4, #0]
 800b426:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b42a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b42e:	d006      	beq.n	800b43e <_scanf_float+0x20a>
 800b430:	0548      	lsls	r0, r1, #21
 800b432:	f57f af38 	bpl.w	800b2a6 <_scanf_float+0x72>
 800b436:	f1b9 0f00 	cmp.w	r9, #0
 800b43a:	f43f af3b 	beq.w	800b2b4 <_scanf_float+0x80>
 800b43e:	0588      	lsls	r0, r1, #22
 800b440:	bf58      	it	pl
 800b442:	9802      	ldrpl	r0, [sp, #8]
 800b444:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b448:	bf58      	it	pl
 800b44a:	eba9 0000 	subpl.w	r0, r9, r0
 800b44e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b452:	bf58      	it	pl
 800b454:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b458:	6021      	str	r1, [r4, #0]
 800b45a:	f04f 0900 	mov.w	r9, #0
 800b45e:	e7ab      	b.n	800b3b8 <_scanf_float+0x184>
 800b460:	2203      	movs	r2, #3
 800b462:	e7a9      	b.n	800b3b8 <_scanf_float+0x184>
 800b464:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b468:	4631      	mov	r1, r6
 800b46a:	4638      	mov	r0, r7
 800b46c:	9205      	str	r2, [sp, #20]
 800b46e:	4798      	blx	r3
 800b470:	9a05      	ldr	r2, [sp, #20]
 800b472:	2800      	cmp	r0, #0
 800b474:	f43f af04 	beq.w	800b280 <_scanf_float+0x4c>
 800b478:	e715      	b.n	800b2a6 <_scanf_float+0x72>
 800b47a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b47e:	4632      	mov	r2, r6
 800b480:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b484:	4638      	mov	r0, r7
 800b486:	4798      	blx	r3
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	3b01      	subs	r3, #1
 800b48c:	6123      	str	r3, [r4, #16]
 800b48e:	e715      	b.n	800b2bc <_scanf_float+0x88>
 800b490:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b494:	2b06      	cmp	r3, #6
 800b496:	d80a      	bhi.n	800b4ae <_scanf_float+0x27a>
 800b498:	f1bb 0f02 	cmp.w	fp, #2
 800b49c:	d967      	bls.n	800b56e <_scanf_float+0x33a>
 800b49e:	f1ab 0b03 	sub.w	fp, fp, #3
 800b4a2:	fa5f fb8b 	uxtb.w	fp, fp
 800b4a6:	eba5 0b0b 	sub.w	fp, r5, fp
 800b4aa:	455d      	cmp	r5, fp
 800b4ac:	d14a      	bne.n	800b544 <_scanf_float+0x310>
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	05da      	lsls	r2, r3, #23
 800b4b2:	d51f      	bpl.n	800b4f4 <_scanf_float+0x2c0>
 800b4b4:	055b      	lsls	r3, r3, #21
 800b4b6:	d467      	bmi.n	800b588 <_scanf_float+0x354>
 800b4b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	2965      	cmp	r1, #101	; 0x65
 800b4c0:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4c4:	f105 3bff 	add.w	fp, r5, #4294967295
 800b4c8:	6123      	str	r3, [r4, #16]
 800b4ca:	d00d      	beq.n	800b4e8 <_scanf_float+0x2b4>
 800b4cc:	2945      	cmp	r1, #69	; 0x45
 800b4ce:	d00b      	beq.n	800b4e8 <_scanf_float+0x2b4>
 800b4d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	4798      	blx	r3
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	f1a5 0b02 	sub.w	fp, r5, #2
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	4798      	blx	r3
 800b4f2:	465d      	mov	r5, fp
 800b4f4:	6826      	ldr	r6, [r4, #0]
 800b4f6:	f016 0610 	ands.w	r6, r6, #16
 800b4fa:	d176      	bne.n	800b5ea <_scanf_float+0x3b6>
 800b4fc:	702e      	strb	r6, [r5, #0]
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b508:	d141      	bne.n	800b58e <_scanf_float+0x35a>
 800b50a:	9b02      	ldr	r3, [sp, #8]
 800b50c:	eba9 0303 	sub.w	r3, r9, r3
 800b510:	425a      	negs	r2, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d148      	bne.n	800b5a8 <_scanf_float+0x374>
 800b516:	4641      	mov	r1, r8
 800b518:	2200      	movs	r2, #0
 800b51a:	4638      	mov	r0, r7
 800b51c:	f000 ff14 	bl	800c348 <_strtod_r>
 800b520:	6825      	ldr	r5, [r4, #0]
 800b522:	4680      	mov	r8, r0
 800b524:	f015 0f02 	tst.w	r5, #2
 800b528:	4689      	mov	r9, r1
 800b52a:	f8da 3000 	ldr.w	r3, [sl]
 800b52e:	d046      	beq.n	800b5be <_scanf_float+0x38a>
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	f8ca 2000 	str.w	r2, [sl]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	e9c3 8900 	strd	r8, r9, [r3]
 800b53c:	68e3      	ldr	r3, [r4, #12]
 800b53e:	3301      	adds	r3, #1
 800b540:	60e3      	str	r3, [r4, #12]
 800b542:	e6bf      	b.n	800b2c4 <_scanf_float+0x90>
 800b544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b548:	4632      	mov	r2, r6
 800b54a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b54e:	4638      	mov	r0, r7
 800b550:	4798      	blx	r3
 800b552:	6923      	ldr	r3, [r4, #16]
 800b554:	3b01      	subs	r3, #1
 800b556:	6123      	str	r3, [r4, #16]
 800b558:	e7a7      	b.n	800b4aa <_scanf_float+0x276>
 800b55a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b55e:	4632      	mov	r2, r6
 800b560:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b564:	4638      	mov	r0, r7
 800b566:	4798      	blx	r3
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	3b01      	subs	r3, #1
 800b56c:	6123      	str	r3, [r4, #16]
 800b56e:	4545      	cmp	r5, r8
 800b570:	d8f3      	bhi.n	800b55a <_scanf_float+0x326>
 800b572:	e6a6      	b.n	800b2c2 <_scanf_float+0x8e>
 800b574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b578:	4632      	mov	r2, r6
 800b57a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b57e:	4638      	mov	r0, r7
 800b580:	4798      	blx	r3
 800b582:	6923      	ldr	r3, [r4, #16]
 800b584:	3b01      	subs	r3, #1
 800b586:	6123      	str	r3, [r4, #16]
 800b588:	4545      	cmp	r5, r8
 800b58a:	d8f3      	bhi.n	800b574 <_scanf_float+0x340>
 800b58c:	e699      	b.n	800b2c2 <_scanf_float+0x8e>
 800b58e:	9b03      	ldr	r3, [sp, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d0c0      	beq.n	800b516 <_scanf_float+0x2e2>
 800b594:	9904      	ldr	r1, [sp, #16]
 800b596:	230a      	movs	r3, #10
 800b598:	4632      	mov	r2, r6
 800b59a:	3101      	adds	r1, #1
 800b59c:	4638      	mov	r0, r7
 800b59e:	f000 ff5f 	bl	800c460 <_strtol_r>
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	9d04      	ldr	r5, [sp, #16]
 800b5a6:	1ac2      	subs	r2, r0, r3
 800b5a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b5ac:	429d      	cmp	r5, r3
 800b5ae:	bf28      	it	cs
 800b5b0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b5b4:	490e      	ldr	r1, [pc, #56]	; (800b5f0 <_scanf_float+0x3bc>)
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f000 f884 	bl	800b6c4 <siprintf>
 800b5bc:	e7ab      	b.n	800b516 <_scanf_float+0x2e2>
 800b5be:	1d1f      	adds	r7, r3, #4
 800b5c0:	f015 0504 	ands.w	r5, r5, #4
 800b5c4:	f8ca 7000 	str.w	r7, [sl]
 800b5c8:	d1b5      	bne.n	800b536 <_scanf_float+0x302>
 800b5ca:	681f      	ldr	r7, [r3, #0]
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	f7f5 fa88 	bl	8000ae4 <__aeabi_dcmpun>
 800b5d4:	b120      	cbz	r0, 800b5e0 <_scanf_float+0x3ac>
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	f000 f870 	bl	800b6bc <nanf>
 800b5dc:	6038      	str	r0, [r7, #0]
 800b5de:	e7ad      	b.n	800b53c <_scanf_float+0x308>
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	f7f5 fadc 	bl	8000ba0 <__aeabi_d2f>
 800b5e8:	e7f8      	b.n	800b5dc <_scanf_float+0x3a8>
 800b5ea:	2600      	movs	r6, #0
 800b5ec:	e66a      	b.n	800b2c4 <_scanf_float+0x90>
 800b5ee:	bf00      	nop
 800b5f0:	0800ff54 	.word	0x0800ff54

0800b5f4 <_puts_r>:
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	460e      	mov	r6, r1
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	b118      	cbz	r0, 800b604 <_puts_r+0x10>
 800b5fc:	6983      	ldr	r3, [r0, #24]
 800b5fe:	b90b      	cbnz	r3, 800b604 <_puts_r+0x10>
 800b600:	f001 ff32 	bl	800d468 <__sinit>
 800b604:	69ab      	ldr	r3, [r5, #24]
 800b606:	68ac      	ldr	r4, [r5, #8]
 800b608:	b913      	cbnz	r3, 800b610 <_puts_r+0x1c>
 800b60a:	4628      	mov	r0, r5
 800b60c:	f001 ff2c 	bl	800d468 <__sinit>
 800b610:	4b23      	ldr	r3, [pc, #140]	; (800b6a0 <_puts_r+0xac>)
 800b612:	429c      	cmp	r4, r3
 800b614:	d117      	bne.n	800b646 <_puts_r+0x52>
 800b616:	686c      	ldr	r4, [r5, #4]
 800b618:	89a3      	ldrh	r3, [r4, #12]
 800b61a:	071b      	lsls	r3, r3, #28
 800b61c:	d51d      	bpl.n	800b65a <_puts_r+0x66>
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	b1db      	cbz	r3, 800b65a <_puts_r+0x66>
 800b622:	3e01      	subs	r6, #1
 800b624:	68a3      	ldr	r3, [r4, #8]
 800b626:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b62a:	3b01      	subs	r3, #1
 800b62c:	60a3      	str	r3, [r4, #8]
 800b62e:	b9e9      	cbnz	r1, 800b66c <_puts_r+0x78>
 800b630:	2b00      	cmp	r3, #0
 800b632:	da2e      	bge.n	800b692 <_puts_r+0x9e>
 800b634:	4622      	mov	r2, r4
 800b636:	210a      	movs	r1, #10
 800b638:	4628      	mov	r0, r5
 800b63a:	f000 ff23 	bl	800c484 <__swbuf_r>
 800b63e:	3001      	adds	r0, #1
 800b640:	d011      	beq.n	800b666 <_puts_r+0x72>
 800b642:	200a      	movs	r0, #10
 800b644:	e011      	b.n	800b66a <_puts_r+0x76>
 800b646:	4b17      	ldr	r3, [pc, #92]	; (800b6a4 <_puts_r+0xb0>)
 800b648:	429c      	cmp	r4, r3
 800b64a:	d101      	bne.n	800b650 <_puts_r+0x5c>
 800b64c:	68ac      	ldr	r4, [r5, #8]
 800b64e:	e7e3      	b.n	800b618 <_puts_r+0x24>
 800b650:	4b15      	ldr	r3, [pc, #84]	; (800b6a8 <_puts_r+0xb4>)
 800b652:	429c      	cmp	r4, r3
 800b654:	bf08      	it	eq
 800b656:	68ec      	ldreq	r4, [r5, #12]
 800b658:	e7de      	b.n	800b618 <_puts_r+0x24>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4628      	mov	r0, r5
 800b65e:	f000 ff63 	bl	800c528 <__swsetup_r>
 800b662:	2800      	cmp	r0, #0
 800b664:	d0dd      	beq.n	800b622 <_puts_r+0x2e>
 800b666:	f04f 30ff 	mov.w	r0, #4294967295
 800b66a:	bd70      	pop	{r4, r5, r6, pc}
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	da04      	bge.n	800b67a <_puts_r+0x86>
 800b670:	69a2      	ldr	r2, [r4, #24]
 800b672:	429a      	cmp	r2, r3
 800b674:	dc06      	bgt.n	800b684 <_puts_r+0x90>
 800b676:	290a      	cmp	r1, #10
 800b678:	d004      	beq.n	800b684 <_puts_r+0x90>
 800b67a:	6823      	ldr	r3, [r4, #0]
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	6022      	str	r2, [r4, #0]
 800b680:	7019      	strb	r1, [r3, #0]
 800b682:	e7cf      	b.n	800b624 <_puts_r+0x30>
 800b684:	4622      	mov	r2, r4
 800b686:	4628      	mov	r0, r5
 800b688:	f000 fefc 	bl	800c484 <__swbuf_r>
 800b68c:	3001      	adds	r0, #1
 800b68e:	d1c9      	bne.n	800b624 <_puts_r+0x30>
 800b690:	e7e9      	b.n	800b666 <_puts_r+0x72>
 800b692:	200a      	movs	r0, #10
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	6022      	str	r2, [r4, #0]
 800b69a:	7018      	strb	r0, [r3, #0]
 800b69c:	e7e5      	b.n	800b66a <_puts_r+0x76>
 800b69e:	bf00      	nop
 800b6a0:	0800ffe0 	.word	0x0800ffe0
 800b6a4:	08010000 	.word	0x08010000
 800b6a8:	0800ffc0 	.word	0x0800ffc0

0800b6ac <puts>:
 800b6ac:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <puts+0xc>)
 800b6ae:	4601      	mov	r1, r0
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	f7ff bf9f 	b.w	800b5f4 <_puts_r>
 800b6b6:	bf00      	nop
 800b6b8:	20000414 	.word	0x20000414

0800b6bc <nanf>:
 800b6bc:	4800      	ldr	r0, [pc, #0]	; (800b6c0 <nanf+0x4>)
 800b6be:	4770      	bx	lr
 800b6c0:	7fc00000 	.word	0x7fc00000

0800b6c4 <siprintf>:
 800b6c4:	b40e      	push	{r1, r2, r3}
 800b6c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6ca:	b500      	push	{lr}
 800b6cc:	b09c      	sub	sp, #112	; 0x70
 800b6ce:	ab1d      	add	r3, sp, #116	; 0x74
 800b6d0:	9002      	str	r0, [sp, #8]
 800b6d2:	9006      	str	r0, [sp, #24]
 800b6d4:	9107      	str	r1, [sp, #28]
 800b6d6:	9104      	str	r1, [sp, #16]
 800b6d8:	4808      	ldr	r0, [pc, #32]	; (800b6fc <siprintf+0x38>)
 800b6da:	4909      	ldr	r1, [pc, #36]	; (800b700 <siprintf+0x3c>)
 800b6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e0:	9105      	str	r1, [sp, #20]
 800b6e2:	6800      	ldr	r0, [r0, #0]
 800b6e4:	a902      	add	r1, sp, #8
 800b6e6:	9301      	str	r3, [sp, #4]
 800b6e8:	f003 f822 	bl	800e730 <_svfiprintf_r>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	9b02      	ldr	r3, [sp, #8]
 800b6f0:	701a      	strb	r2, [r3, #0]
 800b6f2:	b01c      	add	sp, #112	; 0x70
 800b6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6f8:	b003      	add	sp, #12
 800b6fa:	4770      	bx	lr
 800b6fc:	20000414 	.word	0x20000414
 800b700:	ffff0208 	.word	0xffff0208

0800b704 <sulp>:
 800b704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b708:	460f      	mov	r7, r1
 800b70a:	4690      	mov	r8, r2
 800b70c:	f002 fdd4 	bl	800e2b8 <__ulp>
 800b710:	4604      	mov	r4, r0
 800b712:	460d      	mov	r5, r1
 800b714:	f1b8 0f00 	cmp.w	r8, #0
 800b718:	d011      	beq.n	800b73e <sulp+0x3a>
 800b71a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b71e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b722:	2b00      	cmp	r3, #0
 800b724:	dd0b      	ble.n	800b73e <sulp+0x3a>
 800b726:	2400      	movs	r4, #0
 800b728:	051b      	lsls	r3, r3, #20
 800b72a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b72e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b732:	4622      	mov	r2, r4
 800b734:	462b      	mov	r3, r5
 800b736:	f7f4 ff3b 	bl	80005b0 <__aeabi_dmul>
 800b73a:	4604      	mov	r4, r0
 800b73c:	460d      	mov	r5, r1
 800b73e:	4620      	mov	r0, r4
 800b740:	4629      	mov	r1, r5
 800b742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b748 <_strtod_l>:
 800b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74c:	461f      	mov	r7, r3
 800b74e:	2300      	movs	r3, #0
 800b750:	b0a1      	sub	sp, #132	; 0x84
 800b752:	4683      	mov	fp, r0
 800b754:	4638      	mov	r0, r7
 800b756:	460e      	mov	r6, r1
 800b758:	9217      	str	r2, [sp, #92]	; 0x5c
 800b75a:	931c      	str	r3, [sp, #112]	; 0x70
 800b75c:	f002 fa39 	bl	800dbd2 <__localeconv_l>
 800b760:	4680      	mov	r8, r0
 800b762:	6800      	ldr	r0, [r0, #0]
 800b764:	f7f4 fd60 	bl	8000228 <strlen>
 800b768:	f04f 0900 	mov.w	r9, #0
 800b76c:	4604      	mov	r4, r0
 800b76e:	f04f 0a00 	mov.w	sl, #0
 800b772:	961b      	str	r6, [sp, #108]	; 0x6c
 800b774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b776:	781a      	ldrb	r2, [r3, #0]
 800b778:	2a0d      	cmp	r2, #13
 800b77a:	d832      	bhi.n	800b7e2 <_strtod_l+0x9a>
 800b77c:	2a09      	cmp	r2, #9
 800b77e:	d236      	bcs.n	800b7ee <_strtod_l+0xa6>
 800b780:	2a00      	cmp	r2, #0
 800b782:	d03e      	beq.n	800b802 <_strtod_l+0xba>
 800b784:	2300      	movs	r3, #0
 800b786:	930d      	str	r3, [sp, #52]	; 0x34
 800b788:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b78a:	782b      	ldrb	r3, [r5, #0]
 800b78c:	2b30      	cmp	r3, #48	; 0x30
 800b78e:	f040 80ac 	bne.w	800b8ea <_strtod_l+0x1a2>
 800b792:	786b      	ldrb	r3, [r5, #1]
 800b794:	2b58      	cmp	r3, #88	; 0x58
 800b796:	d001      	beq.n	800b79c <_strtod_l+0x54>
 800b798:	2b78      	cmp	r3, #120	; 0x78
 800b79a:	d167      	bne.n	800b86c <_strtod_l+0x124>
 800b79c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b79e:	9702      	str	r7, [sp, #8]
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	ab1c      	add	r3, sp, #112	; 0x70
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	4a89      	ldr	r2, [pc, #548]	; (800b9cc <_strtod_l+0x284>)
 800b7a8:	ab1d      	add	r3, sp, #116	; 0x74
 800b7aa:	a91b      	add	r1, sp, #108	; 0x6c
 800b7ac:	4658      	mov	r0, fp
 800b7ae:	f001 ff35 	bl	800d61c <__gethex>
 800b7b2:	f010 0407 	ands.w	r4, r0, #7
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	d005      	beq.n	800b7c6 <_strtod_l+0x7e>
 800b7ba:	2c06      	cmp	r4, #6
 800b7bc:	d12b      	bne.n	800b816 <_strtod_l+0xce>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	951b      	str	r5, [sp, #108]	; 0x6c
 800b7c4:	930d      	str	r3, [sp, #52]	; 0x34
 800b7c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f040 85a6 	bne.w	800c31a <_strtod_l+0xbd2>
 800b7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7d0:	b1e3      	cbz	r3, 800b80c <_strtod_l+0xc4>
 800b7d2:	464a      	mov	r2, r9
 800b7d4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4619      	mov	r1, r3
 800b7dc:	b021      	add	sp, #132	; 0x84
 800b7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e2:	2a2b      	cmp	r2, #43	; 0x2b
 800b7e4:	d015      	beq.n	800b812 <_strtod_l+0xca>
 800b7e6:	2a2d      	cmp	r2, #45	; 0x2d
 800b7e8:	d004      	beq.n	800b7f4 <_strtod_l+0xac>
 800b7ea:	2a20      	cmp	r2, #32
 800b7ec:	d1ca      	bne.n	800b784 <_strtod_l+0x3c>
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b7f2:	e7bf      	b.n	800b774 <_strtod_l+0x2c>
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	920d      	str	r2, [sp, #52]	; 0x34
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	921b      	str	r2, [sp, #108]	; 0x6c
 800b7fc:	785b      	ldrb	r3, [r3, #1]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1c2      	bne.n	800b788 <_strtod_l+0x40>
 800b802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b804:	961b      	str	r6, [sp, #108]	; 0x6c
 800b806:	2b00      	cmp	r3, #0
 800b808:	f040 8585 	bne.w	800c316 <_strtod_l+0xbce>
 800b80c:	464a      	mov	r2, r9
 800b80e:	4653      	mov	r3, sl
 800b810:	e7e2      	b.n	800b7d8 <_strtod_l+0x90>
 800b812:	2200      	movs	r2, #0
 800b814:	e7ef      	b.n	800b7f6 <_strtod_l+0xae>
 800b816:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b818:	b13a      	cbz	r2, 800b82a <_strtod_l+0xe2>
 800b81a:	2135      	movs	r1, #53	; 0x35
 800b81c:	a81e      	add	r0, sp, #120	; 0x78
 800b81e:	f002 fe3e 	bl	800e49e <__copybits>
 800b822:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b824:	4658      	mov	r0, fp
 800b826:	f002 fab0 	bl	800dd8a <_Bfree>
 800b82a:	3c01      	subs	r4, #1
 800b82c:	2c04      	cmp	r4, #4
 800b82e:	d806      	bhi.n	800b83e <_strtod_l+0xf6>
 800b830:	e8df f004 	tbb	[pc, r4]
 800b834:	1714030a 	.word	0x1714030a
 800b838:	0a          	.byte	0x0a
 800b839:	00          	.byte	0x00
 800b83a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800b83e:	0731      	lsls	r1, r6, #28
 800b840:	d5c1      	bpl.n	800b7c6 <_strtod_l+0x7e>
 800b842:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800b846:	e7be      	b.n	800b7c6 <_strtod_l+0x7e>
 800b848:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b84a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800b84e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b852:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b856:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800b85a:	e7f0      	b.n	800b83e <_strtod_l+0xf6>
 800b85c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800b9d0 <_strtod_l+0x288>
 800b860:	e7ed      	b.n	800b83e <_strtod_l+0xf6>
 800b862:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800b866:	f04f 39ff 	mov.w	r9, #4294967295
 800b86a:	e7e8      	b.n	800b83e <_strtod_l+0xf6>
 800b86c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	921b      	str	r2, [sp, #108]	; 0x6c
 800b872:	785b      	ldrb	r3, [r3, #1]
 800b874:	2b30      	cmp	r3, #48	; 0x30
 800b876:	d0f9      	beq.n	800b86c <_strtod_l+0x124>
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d0a4      	beq.n	800b7c6 <_strtod_l+0x7e>
 800b87c:	2301      	movs	r3, #1
 800b87e:	2500      	movs	r5, #0
 800b880:	220a      	movs	r2, #10
 800b882:	9307      	str	r3, [sp, #28]
 800b884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b886:	9506      	str	r5, [sp, #24]
 800b888:	9308      	str	r3, [sp, #32]
 800b88a:	9504      	str	r5, [sp, #16]
 800b88c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b88e:	7807      	ldrb	r7, [r0, #0]
 800b890:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b894:	b2d9      	uxtb	r1, r3
 800b896:	2909      	cmp	r1, #9
 800b898:	d929      	bls.n	800b8ee <_strtod_l+0x1a6>
 800b89a:	4622      	mov	r2, r4
 800b89c:	f8d8 1000 	ldr.w	r1, [r8]
 800b8a0:	f003 f891 	bl	800e9c6 <strncmp>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d031      	beq.n	800b90c <_strtod_l+0x1c4>
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	463b      	mov	r3, r7
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	9c04      	ldr	r4, [sp, #16]
 800b8b0:	9005      	str	r0, [sp, #20]
 800b8b2:	2b65      	cmp	r3, #101	; 0x65
 800b8b4:	d001      	beq.n	800b8ba <_strtod_l+0x172>
 800b8b6:	2b45      	cmp	r3, #69	; 0x45
 800b8b8:	d114      	bne.n	800b8e4 <_strtod_l+0x19c>
 800b8ba:	b924      	cbnz	r4, 800b8c6 <_strtod_l+0x17e>
 800b8bc:	b910      	cbnz	r0, 800b8c4 <_strtod_l+0x17c>
 800b8be:	9b07      	ldr	r3, [sp, #28]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d09e      	beq.n	800b802 <_strtod_l+0xba>
 800b8c4:	2400      	movs	r4, #0
 800b8c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b8c8:	1c73      	adds	r3, r6, #1
 800b8ca:	931b      	str	r3, [sp, #108]	; 0x6c
 800b8cc:	7873      	ldrb	r3, [r6, #1]
 800b8ce:	2b2b      	cmp	r3, #43	; 0x2b
 800b8d0:	d078      	beq.n	800b9c4 <_strtod_l+0x27c>
 800b8d2:	2b2d      	cmp	r3, #45	; 0x2d
 800b8d4:	d070      	beq.n	800b9b8 <_strtod_l+0x270>
 800b8d6:	f04f 0c00 	mov.w	ip, #0
 800b8da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b8de:	2f09      	cmp	r7, #9
 800b8e0:	d97c      	bls.n	800b9dc <_strtod_l+0x294>
 800b8e2:	961b      	str	r6, [sp, #108]	; 0x6c
 800b8e4:	f04f 0e00 	mov.w	lr, #0
 800b8e8:	e09a      	b.n	800ba20 <_strtod_l+0x2d8>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e7c7      	b.n	800b87e <_strtod_l+0x136>
 800b8ee:	9904      	ldr	r1, [sp, #16]
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	2908      	cmp	r1, #8
 800b8f4:	bfd7      	itett	le
 800b8f6:	9906      	ldrle	r1, [sp, #24]
 800b8f8:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b8fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800b900:	9306      	strle	r3, [sp, #24]
 800b902:	9b04      	ldr	r3, [sp, #16]
 800b904:	901b      	str	r0, [sp, #108]	; 0x6c
 800b906:	3301      	adds	r3, #1
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	e7bf      	b.n	800b88c <_strtod_l+0x144>
 800b90c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b90e:	191a      	adds	r2, r3, r4
 800b910:	921b      	str	r2, [sp, #108]	; 0x6c
 800b912:	9a04      	ldr	r2, [sp, #16]
 800b914:	5d1b      	ldrb	r3, [r3, r4]
 800b916:	2a00      	cmp	r2, #0
 800b918:	d037      	beq.n	800b98a <_strtod_l+0x242>
 800b91a:	4602      	mov	r2, r0
 800b91c:	9c04      	ldr	r4, [sp, #16]
 800b91e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b922:	2909      	cmp	r1, #9
 800b924:	d913      	bls.n	800b94e <_strtod_l+0x206>
 800b926:	2101      	movs	r1, #1
 800b928:	9105      	str	r1, [sp, #20]
 800b92a:	e7c2      	b.n	800b8b2 <_strtod_l+0x16a>
 800b92c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b92e:	3001      	adds	r0, #1
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	921b      	str	r2, [sp, #108]	; 0x6c
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	2b30      	cmp	r3, #48	; 0x30
 800b938:	d0f8      	beq.n	800b92c <_strtod_l+0x1e4>
 800b93a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b93e:	2a08      	cmp	r2, #8
 800b940:	f200 84f0 	bhi.w	800c324 <_strtod_l+0xbdc>
 800b944:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b946:	9208      	str	r2, [sp, #32]
 800b948:	4602      	mov	r2, r0
 800b94a:	2000      	movs	r0, #0
 800b94c:	4604      	mov	r4, r0
 800b94e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b952:	f100 0101 	add.w	r1, r0, #1
 800b956:	d012      	beq.n	800b97e <_strtod_l+0x236>
 800b958:	440a      	add	r2, r1
 800b95a:	270a      	movs	r7, #10
 800b95c:	4621      	mov	r1, r4
 800b95e:	eb00 0c04 	add.w	ip, r0, r4
 800b962:	458c      	cmp	ip, r1
 800b964:	d113      	bne.n	800b98e <_strtod_l+0x246>
 800b966:	1821      	adds	r1, r4, r0
 800b968:	2908      	cmp	r1, #8
 800b96a:	f104 0401 	add.w	r4, r4, #1
 800b96e:	4404      	add	r4, r0
 800b970:	dc19      	bgt.n	800b9a6 <_strtod_l+0x25e>
 800b972:	210a      	movs	r1, #10
 800b974:	9b06      	ldr	r3, [sp, #24]
 800b976:	fb01 e303 	mla	r3, r1, r3, lr
 800b97a:	9306      	str	r3, [sp, #24]
 800b97c:	2100      	movs	r1, #0
 800b97e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b980:	1c58      	adds	r0, r3, #1
 800b982:	901b      	str	r0, [sp, #108]	; 0x6c
 800b984:	785b      	ldrb	r3, [r3, #1]
 800b986:	4608      	mov	r0, r1
 800b988:	e7c9      	b.n	800b91e <_strtod_l+0x1d6>
 800b98a:	9804      	ldr	r0, [sp, #16]
 800b98c:	e7d3      	b.n	800b936 <_strtod_l+0x1ee>
 800b98e:	2908      	cmp	r1, #8
 800b990:	f101 0101 	add.w	r1, r1, #1
 800b994:	dc03      	bgt.n	800b99e <_strtod_l+0x256>
 800b996:	9b06      	ldr	r3, [sp, #24]
 800b998:	437b      	muls	r3, r7
 800b99a:	9306      	str	r3, [sp, #24]
 800b99c:	e7e1      	b.n	800b962 <_strtod_l+0x21a>
 800b99e:	2910      	cmp	r1, #16
 800b9a0:	bfd8      	it	le
 800b9a2:	437d      	mulle	r5, r7
 800b9a4:	e7dd      	b.n	800b962 <_strtod_l+0x21a>
 800b9a6:	2c10      	cmp	r4, #16
 800b9a8:	bfdc      	itt	le
 800b9aa:	210a      	movle	r1, #10
 800b9ac:	fb01 e505 	mlale	r5, r1, r5, lr
 800b9b0:	e7e4      	b.n	800b97c <_strtod_l+0x234>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	e781      	b.n	800b8bc <_strtod_l+0x174>
 800b9b8:	f04f 0c01 	mov.w	ip, #1
 800b9bc:	1cb3      	adds	r3, r6, #2
 800b9be:	931b      	str	r3, [sp, #108]	; 0x6c
 800b9c0:	78b3      	ldrb	r3, [r6, #2]
 800b9c2:	e78a      	b.n	800b8da <_strtod_l+0x192>
 800b9c4:	f04f 0c00 	mov.w	ip, #0
 800b9c8:	e7f8      	b.n	800b9bc <_strtod_l+0x274>
 800b9ca:	bf00      	nop
 800b9cc:	0800ff5c 	.word	0x0800ff5c
 800b9d0:	7ff00000 	.word	0x7ff00000
 800b9d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9d6:	1c5f      	adds	r7, r3, #1
 800b9d8:	971b      	str	r7, [sp, #108]	; 0x6c
 800b9da:	785b      	ldrb	r3, [r3, #1]
 800b9dc:	2b30      	cmp	r3, #48	; 0x30
 800b9de:	d0f9      	beq.n	800b9d4 <_strtod_l+0x28c>
 800b9e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b9e4:	2f08      	cmp	r7, #8
 800b9e6:	f63f af7d 	bhi.w	800b8e4 <_strtod_l+0x19c>
 800b9ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b9ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9f4:	1c5f      	adds	r7, r3, #1
 800b9f6:	971b      	str	r7, [sp, #108]	; 0x6c
 800b9f8:	785b      	ldrb	r3, [r3, #1]
 800b9fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b9fe:	f1b8 0f09 	cmp.w	r8, #9
 800ba02:	d937      	bls.n	800ba74 <_strtod_l+0x32c>
 800ba04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba06:	1a7f      	subs	r7, r7, r1
 800ba08:	2f08      	cmp	r7, #8
 800ba0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ba0e:	dc37      	bgt.n	800ba80 <_strtod_l+0x338>
 800ba10:	45be      	cmp	lr, r7
 800ba12:	bfa8      	it	ge
 800ba14:	46be      	movge	lr, r7
 800ba16:	f1bc 0f00 	cmp.w	ip, #0
 800ba1a:	d001      	beq.n	800ba20 <_strtod_l+0x2d8>
 800ba1c:	f1ce 0e00 	rsb	lr, lr, #0
 800ba20:	2c00      	cmp	r4, #0
 800ba22:	d151      	bne.n	800bac8 <_strtod_l+0x380>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	f47f aece 	bne.w	800b7c6 <_strtod_l+0x7e>
 800ba2a:	9a07      	ldr	r2, [sp, #28]
 800ba2c:	2a00      	cmp	r2, #0
 800ba2e:	f47f aeca 	bne.w	800b7c6 <_strtod_l+0x7e>
 800ba32:	9a05      	ldr	r2, [sp, #20]
 800ba34:	2a00      	cmp	r2, #0
 800ba36:	f47f aee4 	bne.w	800b802 <_strtod_l+0xba>
 800ba3a:	2b4e      	cmp	r3, #78	; 0x4e
 800ba3c:	d027      	beq.n	800ba8e <_strtod_l+0x346>
 800ba3e:	dc21      	bgt.n	800ba84 <_strtod_l+0x33c>
 800ba40:	2b49      	cmp	r3, #73	; 0x49
 800ba42:	f47f aede 	bne.w	800b802 <_strtod_l+0xba>
 800ba46:	49a4      	ldr	r1, [pc, #656]	; (800bcd8 <_strtod_l+0x590>)
 800ba48:	a81b      	add	r0, sp, #108	; 0x6c
 800ba4a:	f002 f81b 	bl	800da84 <__match>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f43f aed7 	beq.w	800b802 <_strtod_l+0xba>
 800ba54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba56:	49a1      	ldr	r1, [pc, #644]	; (800bcdc <_strtod_l+0x594>)
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	a81b      	add	r0, sp, #108	; 0x6c
 800ba5c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba5e:	f002 f811 	bl	800da84 <__match>
 800ba62:	b910      	cbnz	r0, 800ba6a <_strtod_l+0x322>
 800ba64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba66:	3301      	adds	r3, #1
 800ba68:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba6a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800bcf0 <_strtod_l+0x5a8>
 800ba6e:	f04f 0900 	mov.w	r9, #0
 800ba72:	e6a8      	b.n	800b7c6 <_strtod_l+0x7e>
 800ba74:	210a      	movs	r1, #10
 800ba76:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ba7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ba7e:	e7b8      	b.n	800b9f2 <_strtod_l+0x2aa>
 800ba80:	46be      	mov	lr, r7
 800ba82:	e7c8      	b.n	800ba16 <_strtod_l+0x2ce>
 800ba84:	2b69      	cmp	r3, #105	; 0x69
 800ba86:	d0de      	beq.n	800ba46 <_strtod_l+0x2fe>
 800ba88:	2b6e      	cmp	r3, #110	; 0x6e
 800ba8a:	f47f aeba 	bne.w	800b802 <_strtod_l+0xba>
 800ba8e:	4994      	ldr	r1, [pc, #592]	; (800bce0 <_strtod_l+0x598>)
 800ba90:	a81b      	add	r0, sp, #108	; 0x6c
 800ba92:	f001 fff7 	bl	800da84 <__match>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f43f aeb3 	beq.w	800b802 <_strtod_l+0xba>
 800ba9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	2b28      	cmp	r3, #40	; 0x28
 800baa2:	d10e      	bne.n	800bac2 <_strtod_l+0x37a>
 800baa4:	aa1e      	add	r2, sp, #120	; 0x78
 800baa6:	498f      	ldr	r1, [pc, #572]	; (800bce4 <_strtod_l+0x59c>)
 800baa8:	a81b      	add	r0, sp, #108	; 0x6c
 800baaa:	f001 ffff 	bl	800daac <__hexnan>
 800baae:	2805      	cmp	r0, #5
 800bab0:	d107      	bne.n	800bac2 <_strtod_l+0x37a>
 800bab2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bab4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800bab8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800babc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800bac0:	e681      	b.n	800b7c6 <_strtod_l+0x7e>
 800bac2:	f8df a234 	ldr.w	sl, [pc, #564]	; 800bcf8 <_strtod_l+0x5b0>
 800bac6:	e7d2      	b.n	800ba6e <_strtod_l+0x326>
 800bac8:	ebae 0302 	sub.w	r3, lr, r2
 800bacc:	9307      	str	r3, [sp, #28]
 800bace:	9b04      	ldr	r3, [sp, #16]
 800bad0:	9806      	ldr	r0, [sp, #24]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	bf08      	it	eq
 800bad6:	4623      	moveq	r3, r4
 800bad8:	2c10      	cmp	r4, #16
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	46a0      	mov	r8, r4
 800bade:	bfa8      	it	ge
 800bae0:	f04f 0810 	movge.w	r8, #16
 800bae4:	f7f4 fcea 	bl	80004bc <__aeabi_ui2d>
 800bae8:	2c09      	cmp	r4, #9
 800baea:	4681      	mov	r9, r0
 800baec:	468a      	mov	sl, r1
 800baee:	dc13      	bgt.n	800bb18 <_strtod_l+0x3d0>
 800baf0:	9b07      	ldr	r3, [sp, #28]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f43f ae67 	beq.w	800b7c6 <_strtod_l+0x7e>
 800baf8:	9b07      	ldr	r3, [sp, #28]
 800bafa:	dd7e      	ble.n	800bbfa <_strtod_l+0x4b2>
 800bafc:	2b16      	cmp	r3, #22
 800bafe:	dc65      	bgt.n	800bbcc <_strtod_l+0x484>
 800bb00:	4a79      	ldr	r2, [pc, #484]	; (800bce8 <_strtod_l+0x5a0>)
 800bb02:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bb06:	464a      	mov	r2, r9
 800bb08:	e9de 0100 	ldrd	r0, r1, [lr]
 800bb0c:	4653      	mov	r3, sl
 800bb0e:	f7f4 fd4f 	bl	80005b0 <__aeabi_dmul>
 800bb12:	4681      	mov	r9, r0
 800bb14:	468a      	mov	sl, r1
 800bb16:	e656      	b.n	800b7c6 <_strtod_l+0x7e>
 800bb18:	4b73      	ldr	r3, [pc, #460]	; (800bce8 <_strtod_l+0x5a0>)
 800bb1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bb1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bb22:	f7f4 fd45 	bl	80005b0 <__aeabi_dmul>
 800bb26:	4606      	mov	r6, r0
 800bb28:	4628      	mov	r0, r5
 800bb2a:	460f      	mov	r7, r1
 800bb2c:	f7f4 fcc6 	bl	80004bc <__aeabi_ui2d>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4630      	mov	r0, r6
 800bb36:	4639      	mov	r1, r7
 800bb38:	f7f4 fb84 	bl	8000244 <__adddf3>
 800bb3c:	2c0f      	cmp	r4, #15
 800bb3e:	4681      	mov	r9, r0
 800bb40:	468a      	mov	sl, r1
 800bb42:	ddd5      	ble.n	800baf0 <_strtod_l+0x3a8>
 800bb44:	9b07      	ldr	r3, [sp, #28]
 800bb46:	eba4 0808 	sub.w	r8, r4, r8
 800bb4a:	4498      	add	r8, r3
 800bb4c:	f1b8 0f00 	cmp.w	r8, #0
 800bb50:	f340 809a 	ble.w	800bc88 <_strtod_l+0x540>
 800bb54:	f018 030f 	ands.w	r3, r8, #15
 800bb58:	d00a      	beq.n	800bb70 <_strtod_l+0x428>
 800bb5a:	4963      	ldr	r1, [pc, #396]	; (800bce8 <_strtod_l+0x5a0>)
 800bb5c:	464a      	mov	r2, r9
 800bb5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb66:	4653      	mov	r3, sl
 800bb68:	f7f4 fd22 	bl	80005b0 <__aeabi_dmul>
 800bb6c:	4681      	mov	r9, r0
 800bb6e:	468a      	mov	sl, r1
 800bb70:	f038 080f 	bics.w	r8, r8, #15
 800bb74:	d077      	beq.n	800bc66 <_strtod_l+0x51e>
 800bb76:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bb7a:	dd4b      	ble.n	800bc14 <_strtod_l+0x4cc>
 800bb7c:	f04f 0800 	mov.w	r8, #0
 800bb80:	f8cd 8010 	str.w	r8, [sp, #16]
 800bb84:	f8cd 8020 	str.w	r8, [sp, #32]
 800bb88:	f8cd 8018 	str.w	r8, [sp, #24]
 800bb8c:	2322      	movs	r3, #34	; 0x22
 800bb8e:	f04f 0900 	mov.w	r9, #0
 800bb92:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800bcf0 <_strtod_l+0x5a8>
 800bb96:	f8cb 3000 	str.w	r3, [fp]
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f43f ae12 	beq.w	800b7c6 <_strtod_l+0x7e>
 800bba2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bba4:	4658      	mov	r0, fp
 800bba6:	f002 f8f0 	bl	800dd8a <_Bfree>
 800bbaa:	9906      	ldr	r1, [sp, #24]
 800bbac:	4658      	mov	r0, fp
 800bbae:	f002 f8ec 	bl	800dd8a <_Bfree>
 800bbb2:	9904      	ldr	r1, [sp, #16]
 800bbb4:	4658      	mov	r0, fp
 800bbb6:	f002 f8e8 	bl	800dd8a <_Bfree>
 800bbba:	9908      	ldr	r1, [sp, #32]
 800bbbc:	4658      	mov	r0, fp
 800bbbe:	f002 f8e4 	bl	800dd8a <_Bfree>
 800bbc2:	4641      	mov	r1, r8
 800bbc4:	4658      	mov	r0, fp
 800bbc6:	f002 f8e0 	bl	800dd8a <_Bfree>
 800bbca:	e5fc      	b.n	800b7c6 <_strtod_l+0x7e>
 800bbcc:	9a07      	ldr	r2, [sp, #28]
 800bbce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	dbb6      	blt.n	800bb44 <_strtod_l+0x3fc>
 800bbd6:	4d44      	ldr	r5, [pc, #272]	; (800bce8 <_strtod_l+0x5a0>)
 800bbd8:	f1c4 040f 	rsb	r4, r4, #15
 800bbdc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bbe0:	464a      	mov	r2, r9
 800bbe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbe6:	4653      	mov	r3, sl
 800bbe8:	f7f4 fce2 	bl	80005b0 <__aeabi_dmul>
 800bbec:	9b07      	ldr	r3, [sp, #28]
 800bbee:	1b1c      	subs	r4, r3, r4
 800bbf0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bbf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbf8:	e789      	b.n	800bb0e <_strtod_l+0x3c6>
 800bbfa:	f113 0f16 	cmn.w	r3, #22
 800bbfe:	dba1      	blt.n	800bb44 <_strtod_l+0x3fc>
 800bc00:	4a39      	ldr	r2, [pc, #228]	; (800bce8 <_strtod_l+0x5a0>)
 800bc02:	4648      	mov	r0, r9
 800bc04:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bc08:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bc0c:	4651      	mov	r1, sl
 800bc0e:	f7f4 fdf9 	bl	8000804 <__aeabi_ddiv>
 800bc12:	e77e      	b.n	800bb12 <_strtod_l+0x3ca>
 800bc14:	2300      	movs	r3, #0
 800bc16:	4648      	mov	r0, r9
 800bc18:	4651      	mov	r1, sl
 800bc1a:	461d      	mov	r5, r3
 800bc1c:	4e33      	ldr	r6, [pc, #204]	; (800bcec <_strtod_l+0x5a4>)
 800bc1e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bc22:	f1b8 0f01 	cmp.w	r8, #1
 800bc26:	dc21      	bgt.n	800bc6c <_strtod_l+0x524>
 800bc28:	b10b      	cbz	r3, 800bc2e <_strtod_l+0x4e6>
 800bc2a:	4681      	mov	r9, r0
 800bc2c:	468a      	mov	sl, r1
 800bc2e:	4b2f      	ldr	r3, [pc, #188]	; (800bcec <_strtod_l+0x5a4>)
 800bc30:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800bc34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bc38:	464a      	mov	r2, r9
 800bc3a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bc3e:	4653      	mov	r3, sl
 800bc40:	f7f4 fcb6 	bl	80005b0 <__aeabi_dmul>
 800bc44:	4b2a      	ldr	r3, [pc, #168]	; (800bcf0 <_strtod_l+0x5a8>)
 800bc46:	460a      	mov	r2, r1
 800bc48:	400b      	ands	r3, r1
 800bc4a:	492a      	ldr	r1, [pc, #168]	; (800bcf4 <_strtod_l+0x5ac>)
 800bc4c:	4681      	mov	r9, r0
 800bc4e:	428b      	cmp	r3, r1
 800bc50:	d894      	bhi.n	800bb7c <_strtod_l+0x434>
 800bc52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bc56:	428b      	cmp	r3, r1
 800bc58:	bf86      	itte	hi
 800bc5a:	f04f 39ff 	movhi.w	r9, #4294967295
 800bc5e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800bcfc <_strtod_l+0x5b4>
 800bc62:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800bc66:	2300      	movs	r3, #0
 800bc68:	9305      	str	r3, [sp, #20]
 800bc6a:	e07b      	b.n	800bd64 <_strtod_l+0x61c>
 800bc6c:	f018 0f01 	tst.w	r8, #1
 800bc70:	d006      	beq.n	800bc80 <_strtod_l+0x538>
 800bc72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	f7f4 fc99 	bl	80005b0 <__aeabi_dmul>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	3501      	adds	r5, #1
 800bc82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bc86:	e7cc      	b.n	800bc22 <_strtod_l+0x4da>
 800bc88:	d0ed      	beq.n	800bc66 <_strtod_l+0x51e>
 800bc8a:	f1c8 0800 	rsb	r8, r8, #0
 800bc8e:	f018 020f 	ands.w	r2, r8, #15
 800bc92:	d00a      	beq.n	800bcaa <_strtod_l+0x562>
 800bc94:	4b14      	ldr	r3, [pc, #80]	; (800bce8 <_strtod_l+0x5a0>)
 800bc96:	4648      	mov	r0, r9
 800bc98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc9c:	4651      	mov	r1, sl
 800bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca2:	f7f4 fdaf 	bl	8000804 <__aeabi_ddiv>
 800bca6:	4681      	mov	r9, r0
 800bca8:	468a      	mov	sl, r1
 800bcaa:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bcae:	d0da      	beq.n	800bc66 <_strtod_l+0x51e>
 800bcb0:	f1b8 0f1f 	cmp.w	r8, #31
 800bcb4:	dd24      	ble.n	800bd00 <_strtod_l+0x5b8>
 800bcb6:	f04f 0800 	mov.w	r8, #0
 800bcba:	f8cd 8010 	str.w	r8, [sp, #16]
 800bcbe:	f8cd 8020 	str.w	r8, [sp, #32]
 800bcc2:	f8cd 8018 	str.w	r8, [sp, #24]
 800bcc6:	2322      	movs	r3, #34	; 0x22
 800bcc8:	f04f 0900 	mov.w	r9, #0
 800bccc:	f04f 0a00 	mov.w	sl, #0
 800bcd0:	f8cb 3000 	str.w	r3, [fp]
 800bcd4:	e761      	b.n	800bb9a <_strtod_l+0x452>
 800bcd6:	bf00      	nop
 800bcd8:	0800ff25 	.word	0x0800ff25
 800bcdc:	0800ffb3 	.word	0x0800ffb3
 800bce0:	0800ff2d 	.word	0x0800ff2d
 800bce4:	0800ff70 	.word	0x0800ff70
 800bce8:	08010058 	.word	0x08010058
 800bcec:	08010030 	.word	0x08010030
 800bcf0:	7ff00000 	.word	0x7ff00000
 800bcf4:	7ca00000 	.word	0x7ca00000
 800bcf8:	fff80000 	.word	0xfff80000
 800bcfc:	7fefffff 	.word	0x7fefffff
 800bd00:	f018 0310 	ands.w	r3, r8, #16
 800bd04:	bf18      	it	ne
 800bd06:	236a      	movne	r3, #106	; 0x6a
 800bd08:	4648      	mov	r0, r9
 800bd0a:	9305      	str	r3, [sp, #20]
 800bd0c:	4651      	mov	r1, sl
 800bd0e:	2300      	movs	r3, #0
 800bd10:	4da1      	ldr	r5, [pc, #644]	; (800bf98 <_strtod_l+0x850>)
 800bd12:	f1b8 0f00 	cmp.w	r8, #0
 800bd16:	f300 8113 	bgt.w	800bf40 <_strtod_l+0x7f8>
 800bd1a:	b10b      	cbz	r3, 800bd20 <_strtod_l+0x5d8>
 800bd1c:	4681      	mov	r9, r0
 800bd1e:	468a      	mov	sl, r1
 800bd20:	9b05      	ldr	r3, [sp, #20]
 800bd22:	b1bb      	cbz	r3, 800bd54 <_strtod_l+0x60c>
 800bd24:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800bd28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	4651      	mov	r1, sl
 800bd30:	dd10      	ble.n	800bd54 <_strtod_l+0x60c>
 800bd32:	2b1f      	cmp	r3, #31
 800bd34:	f340 8110 	ble.w	800bf58 <_strtod_l+0x810>
 800bd38:	2b34      	cmp	r3, #52	; 0x34
 800bd3a:	bfd8      	it	le
 800bd3c:	f04f 32ff 	movle.w	r2, #4294967295
 800bd40:	f04f 0900 	mov.w	r9, #0
 800bd44:	bfcf      	iteee	gt
 800bd46:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800bd4a:	3b20      	suble	r3, #32
 800bd4c:	fa02 f303 	lslle.w	r3, r2, r3
 800bd50:	ea03 0a01 	andle.w	sl, r3, r1
 800bd54:	2200      	movs	r2, #0
 800bd56:	2300      	movs	r3, #0
 800bd58:	4648      	mov	r0, r9
 800bd5a:	4651      	mov	r1, sl
 800bd5c:	f7f4 fe90 	bl	8000a80 <__aeabi_dcmpeq>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d1a8      	bne.n	800bcb6 <_strtod_l+0x56e>
 800bd64:	9b06      	ldr	r3, [sp, #24]
 800bd66:	9a04      	ldr	r2, [sp, #16]
 800bd68:	9300      	str	r3, [sp, #0]
 800bd6a:	9908      	ldr	r1, [sp, #32]
 800bd6c:	4623      	mov	r3, r4
 800bd6e:	4658      	mov	r0, fp
 800bd70:	f002 f85d 	bl	800de2e <__s2b>
 800bd74:	9008      	str	r0, [sp, #32]
 800bd76:	2800      	cmp	r0, #0
 800bd78:	f43f af00 	beq.w	800bb7c <_strtod_l+0x434>
 800bd7c:	9a07      	ldr	r2, [sp, #28]
 800bd7e:	9b07      	ldr	r3, [sp, #28]
 800bd80:	2a00      	cmp	r2, #0
 800bd82:	f1c3 0300 	rsb	r3, r3, #0
 800bd86:	bfa8      	it	ge
 800bd88:	2300      	movge	r3, #0
 800bd8a:	f04f 0800 	mov.w	r8, #0
 800bd8e:	930e      	str	r3, [sp, #56]	; 0x38
 800bd90:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bd94:	9316      	str	r3, [sp, #88]	; 0x58
 800bd96:	f8cd 8010 	str.w	r8, [sp, #16]
 800bd9a:	9b08      	ldr	r3, [sp, #32]
 800bd9c:	4658      	mov	r0, fp
 800bd9e:	6859      	ldr	r1, [r3, #4]
 800bda0:	f001 ffbf 	bl	800dd22 <_Balloc>
 800bda4:	9006      	str	r0, [sp, #24]
 800bda6:	2800      	cmp	r0, #0
 800bda8:	f43f aef0 	beq.w	800bb8c <_strtod_l+0x444>
 800bdac:	9b08      	ldr	r3, [sp, #32]
 800bdae:	300c      	adds	r0, #12
 800bdb0:	691a      	ldr	r2, [r3, #16]
 800bdb2:	f103 010c 	add.w	r1, r3, #12
 800bdb6:	3202      	adds	r2, #2
 800bdb8:	0092      	lsls	r2, r2, #2
 800bdba:	f001 ffa7 	bl	800dd0c <memcpy>
 800bdbe:	ab1e      	add	r3, sp, #120	; 0x78
 800bdc0:	9301      	str	r3, [sp, #4]
 800bdc2:	ab1d      	add	r3, sp, #116	; 0x74
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	464a      	mov	r2, r9
 800bdc8:	4653      	mov	r3, sl
 800bdca:	4658      	mov	r0, fp
 800bdcc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800bdd0:	f002 fae8 	bl	800e3a4 <__d2b>
 800bdd4:	901c      	str	r0, [sp, #112]	; 0x70
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f43f aed8 	beq.w	800bb8c <_strtod_l+0x444>
 800bddc:	2101      	movs	r1, #1
 800bdde:	4658      	mov	r0, fp
 800bde0:	f002 f8b1 	bl	800df46 <__i2b>
 800bde4:	9004      	str	r0, [sp, #16]
 800bde6:	4603      	mov	r3, r0
 800bde8:	2800      	cmp	r0, #0
 800bdea:	f43f aecf 	beq.w	800bb8c <_strtod_l+0x444>
 800bdee:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800bdf0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bdf2:	2d00      	cmp	r5, #0
 800bdf4:	bfab      	itete	ge
 800bdf6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800bdf8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bdfa:	18ee      	addge	r6, r5, r3
 800bdfc:	1b5c      	sublt	r4, r3, r5
 800bdfe:	9b05      	ldr	r3, [sp, #20]
 800be00:	bfa8      	it	ge
 800be02:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800be04:	eba5 0503 	sub.w	r5, r5, r3
 800be08:	4415      	add	r5, r2
 800be0a:	4b64      	ldr	r3, [pc, #400]	; (800bf9c <_strtod_l+0x854>)
 800be0c:	f105 35ff 	add.w	r5, r5, #4294967295
 800be10:	bfb8      	it	lt
 800be12:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800be14:	429d      	cmp	r5, r3
 800be16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be1a:	f280 80af 	bge.w	800bf7c <_strtod_l+0x834>
 800be1e:	1b5b      	subs	r3, r3, r5
 800be20:	2b1f      	cmp	r3, #31
 800be22:	eba2 0203 	sub.w	r2, r2, r3
 800be26:	f04f 0701 	mov.w	r7, #1
 800be2a:	f300 809c 	bgt.w	800bf66 <_strtod_l+0x81e>
 800be2e:	2500      	movs	r5, #0
 800be30:	fa07 f303 	lsl.w	r3, r7, r3
 800be34:	930f      	str	r3, [sp, #60]	; 0x3c
 800be36:	18b7      	adds	r7, r6, r2
 800be38:	9b05      	ldr	r3, [sp, #20]
 800be3a:	42be      	cmp	r6, r7
 800be3c:	4414      	add	r4, r2
 800be3e:	441c      	add	r4, r3
 800be40:	4633      	mov	r3, r6
 800be42:	bfa8      	it	ge
 800be44:	463b      	movge	r3, r7
 800be46:	42a3      	cmp	r3, r4
 800be48:	bfa8      	it	ge
 800be4a:	4623      	movge	r3, r4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	bfc2      	ittt	gt
 800be50:	1aff      	subgt	r7, r7, r3
 800be52:	1ae4      	subgt	r4, r4, r3
 800be54:	1af6      	subgt	r6, r6, r3
 800be56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be58:	b1bb      	cbz	r3, 800be8a <_strtod_l+0x742>
 800be5a:	461a      	mov	r2, r3
 800be5c:	9904      	ldr	r1, [sp, #16]
 800be5e:	4658      	mov	r0, fp
 800be60:	f002 f910 	bl	800e084 <__pow5mult>
 800be64:	9004      	str	r0, [sp, #16]
 800be66:	2800      	cmp	r0, #0
 800be68:	f43f ae90 	beq.w	800bb8c <_strtod_l+0x444>
 800be6c:	4601      	mov	r1, r0
 800be6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800be70:	4658      	mov	r0, fp
 800be72:	f002 f871 	bl	800df58 <__multiply>
 800be76:	9009      	str	r0, [sp, #36]	; 0x24
 800be78:	2800      	cmp	r0, #0
 800be7a:	f43f ae87 	beq.w	800bb8c <_strtod_l+0x444>
 800be7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800be80:	4658      	mov	r0, fp
 800be82:	f001 ff82 	bl	800dd8a <_Bfree>
 800be86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be88:	931c      	str	r3, [sp, #112]	; 0x70
 800be8a:	2f00      	cmp	r7, #0
 800be8c:	dc7a      	bgt.n	800bf84 <_strtod_l+0x83c>
 800be8e:	9b07      	ldr	r3, [sp, #28]
 800be90:	2b00      	cmp	r3, #0
 800be92:	dd08      	ble.n	800bea6 <_strtod_l+0x75e>
 800be94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be96:	9906      	ldr	r1, [sp, #24]
 800be98:	4658      	mov	r0, fp
 800be9a:	f002 f8f3 	bl	800e084 <__pow5mult>
 800be9e:	9006      	str	r0, [sp, #24]
 800bea0:	2800      	cmp	r0, #0
 800bea2:	f43f ae73 	beq.w	800bb8c <_strtod_l+0x444>
 800bea6:	2c00      	cmp	r4, #0
 800bea8:	dd08      	ble.n	800bebc <_strtod_l+0x774>
 800beaa:	4622      	mov	r2, r4
 800beac:	9906      	ldr	r1, [sp, #24]
 800beae:	4658      	mov	r0, fp
 800beb0:	f002 f936 	bl	800e120 <__lshift>
 800beb4:	9006      	str	r0, [sp, #24]
 800beb6:	2800      	cmp	r0, #0
 800beb8:	f43f ae68 	beq.w	800bb8c <_strtod_l+0x444>
 800bebc:	2e00      	cmp	r6, #0
 800bebe:	dd08      	ble.n	800bed2 <_strtod_l+0x78a>
 800bec0:	4632      	mov	r2, r6
 800bec2:	9904      	ldr	r1, [sp, #16]
 800bec4:	4658      	mov	r0, fp
 800bec6:	f002 f92b 	bl	800e120 <__lshift>
 800beca:	9004      	str	r0, [sp, #16]
 800becc:	2800      	cmp	r0, #0
 800bece:	f43f ae5d 	beq.w	800bb8c <_strtod_l+0x444>
 800bed2:	9a06      	ldr	r2, [sp, #24]
 800bed4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bed6:	4658      	mov	r0, fp
 800bed8:	f002 f990 	bl	800e1fc <__mdiff>
 800bedc:	4680      	mov	r8, r0
 800bede:	2800      	cmp	r0, #0
 800bee0:	f43f ae54 	beq.w	800bb8c <_strtod_l+0x444>
 800bee4:	2400      	movs	r4, #0
 800bee6:	68c3      	ldr	r3, [r0, #12]
 800bee8:	9904      	ldr	r1, [sp, #16]
 800beea:	60c4      	str	r4, [r0, #12]
 800beec:	930c      	str	r3, [sp, #48]	; 0x30
 800beee:	f002 f96b 	bl	800e1c8 <__mcmp>
 800bef2:	42a0      	cmp	r0, r4
 800bef4:	da54      	bge.n	800bfa0 <_strtod_l+0x858>
 800bef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bef8:	b9f3      	cbnz	r3, 800bf38 <_strtod_l+0x7f0>
 800befa:	f1b9 0f00 	cmp.w	r9, #0
 800befe:	d11b      	bne.n	800bf38 <_strtod_l+0x7f0>
 800bf00:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800bf04:	b9c3      	cbnz	r3, 800bf38 <_strtod_l+0x7f0>
 800bf06:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800bf0a:	0d1b      	lsrs	r3, r3, #20
 800bf0c:	051b      	lsls	r3, r3, #20
 800bf0e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf12:	d911      	bls.n	800bf38 <_strtod_l+0x7f0>
 800bf14:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bf18:	b91b      	cbnz	r3, 800bf22 <_strtod_l+0x7da>
 800bf1a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	dd0a      	ble.n	800bf38 <_strtod_l+0x7f0>
 800bf22:	4641      	mov	r1, r8
 800bf24:	2201      	movs	r2, #1
 800bf26:	4658      	mov	r0, fp
 800bf28:	f002 f8fa 	bl	800e120 <__lshift>
 800bf2c:	9904      	ldr	r1, [sp, #16]
 800bf2e:	4680      	mov	r8, r0
 800bf30:	f002 f94a 	bl	800e1c8 <__mcmp>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	dc68      	bgt.n	800c00a <_strtod_l+0x8c2>
 800bf38:	9b05      	ldr	r3, [sp, #20]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d172      	bne.n	800c024 <_strtod_l+0x8dc>
 800bf3e:	e630      	b.n	800bba2 <_strtod_l+0x45a>
 800bf40:	f018 0f01 	tst.w	r8, #1
 800bf44:	d004      	beq.n	800bf50 <_strtod_l+0x808>
 800bf46:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf4a:	f7f4 fb31 	bl	80005b0 <__aeabi_dmul>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf54:	3508      	adds	r5, #8
 800bf56:	e6dc      	b.n	800bd12 <_strtod_l+0x5ca>
 800bf58:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf60:	ea03 0909 	and.w	r9, r3, r9
 800bf64:	e6f6      	b.n	800bd54 <_strtod_l+0x60c>
 800bf66:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800bf6a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800bf6e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800bf72:	35e2      	adds	r5, #226	; 0xe2
 800bf74:	fa07 f505 	lsl.w	r5, r7, r5
 800bf78:	970f      	str	r7, [sp, #60]	; 0x3c
 800bf7a:	e75c      	b.n	800be36 <_strtod_l+0x6ee>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	2500      	movs	r5, #0
 800bf80:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf82:	e758      	b.n	800be36 <_strtod_l+0x6ee>
 800bf84:	463a      	mov	r2, r7
 800bf86:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf88:	4658      	mov	r0, fp
 800bf8a:	f002 f8c9 	bl	800e120 <__lshift>
 800bf8e:	901c      	str	r0, [sp, #112]	; 0x70
 800bf90:	2800      	cmp	r0, #0
 800bf92:	f47f af7c 	bne.w	800be8e <_strtod_l+0x746>
 800bf96:	e5f9      	b.n	800bb8c <_strtod_l+0x444>
 800bf98:	0800ff88 	.word	0x0800ff88
 800bf9c:	fffffc02 	.word	0xfffffc02
 800bfa0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bfa4:	f040 8089 	bne.w	800c0ba <_strtod_l+0x972>
 800bfa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfaa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800bfae:	b342      	cbz	r2, 800c002 <_strtod_l+0x8ba>
 800bfb0:	4aaf      	ldr	r2, [pc, #700]	; (800c270 <_strtod_l+0xb28>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d156      	bne.n	800c064 <_strtod_l+0x91c>
 800bfb6:	9b05      	ldr	r3, [sp, #20]
 800bfb8:	4648      	mov	r0, r9
 800bfba:	b1eb      	cbz	r3, 800bff8 <_strtod_l+0x8b0>
 800bfbc:	4653      	mov	r3, sl
 800bfbe:	4aad      	ldr	r2, [pc, #692]	; (800c274 <_strtod_l+0xb2c>)
 800bfc0:	f04f 31ff 	mov.w	r1, #4294967295
 800bfc4:	401a      	ands	r2, r3
 800bfc6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bfca:	d818      	bhi.n	800bffe <_strtod_l+0x8b6>
 800bfcc:	0d12      	lsrs	r2, r2, #20
 800bfce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bfd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bfd6:	4298      	cmp	r0, r3
 800bfd8:	d144      	bne.n	800c064 <_strtod_l+0x91c>
 800bfda:	4ba7      	ldr	r3, [pc, #668]	; (800c278 <_strtod_l+0xb30>)
 800bfdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d102      	bne.n	800bfe8 <_strtod_l+0x8a0>
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	f43f add2 	beq.w	800bb8c <_strtod_l+0x444>
 800bfe8:	4ba2      	ldr	r3, [pc, #648]	; (800c274 <_strtod_l+0xb2c>)
 800bfea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfec:	f04f 0900 	mov.w	r9, #0
 800bff0:	401a      	ands	r2, r3
 800bff2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800bff6:	e79f      	b.n	800bf38 <_strtod_l+0x7f0>
 800bff8:	f04f 33ff 	mov.w	r3, #4294967295
 800bffc:	e7eb      	b.n	800bfd6 <_strtod_l+0x88e>
 800bffe:	460b      	mov	r3, r1
 800c000:	e7e9      	b.n	800bfd6 <_strtod_l+0x88e>
 800c002:	bb7b      	cbnz	r3, 800c064 <_strtod_l+0x91c>
 800c004:	f1b9 0f00 	cmp.w	r9, #0
 800c008:	d12c      	bne.n	800c064 <_strtod_l+0x91c>
 800c00a:	9905      	ldr	r1, [sp, #20]
 800c00c:	4653      	mov	r3, sl
 800c00e:	4a99      	ldr	r2, [pc, #612]	; (800c274 <_strtod_l+0xb2c>)
 800c010:	b1f1      	cbz	r1, 800c050 <_strtod_l+0x908>
 800c012:	ea02 010a 	and.w	r1, r2, sl
 800c016:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c01a:	dc19      	bgt.n	800c050 <_strtod_l+0x908>
 800c01c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c020:	f77f ae51 	ble.w	800bcc6 <_strtod_l+0x57e>
 800c024:	2300      	movs	r3, #0
 800c026:	4a95      	ldr	r2, [pc, #596]	; (800c27c <_strtod_l+0xb34>)
 800c028:	4648      	mov	r0, r9
 800c02a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c02e:	4651      	mov	r1, sl
 800c030:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c034:	f7f4 fabc 	bl	80005b0 <__aeabi_dmul>
 800c038:	4681      	mov	r9, r0
 800c03a:	468a      	mov	sl, r1
 800c03c:	2900      	cmp	r1, #0
 800c03e:	f47f adb0 	bne.w	800bba2 <_strtod_l+0x45a>
 800c042:	2800      	cmp	r0, #0
 800c044:	f47f adad 	bne.w	800bba2 <_strtod_l+0x45a>
 800c048:	2322      	movs	r3, #34	; 0x22
 800c04a:	f8cb 3000 	str.w	r3, [fp]
 800c04e:	e5a8      	b.n	800bba2 <_strtod_l+0x45a>
 800c050:	4013      	ands	r3, r2
 800c052:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c056:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800c05a:	f04f 39ff 	mov.w	r9, #4294967295
 800c05e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800c062:	e769      	b.n	800bf38 <_strtod_l+0x7f0>
 800c064:	b19d      	cbz	r5, 800c08e <_strtod_l+0x946>
 800c066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c068:	421d      	tst	r5, r3
 800c06a:	f43f af65 	beq.w	800bf38 <_strtod_l+0x7f0>
 800c06e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c070:	9a05      	ldr	r2, [sp, #20]
 800c072:	4648      	mov	r0, r9
 800c074:	4651      	mov	r1, sl
 800c076:	b173      	cbz	r3, 800c096 <_strtod_l+0x94e>
 800c078:	f7ff fb44 	bl	800b704 <sulp>
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c084:	f7f4 f8de 	bl	8000244 <__adddf3>
 800c088:	4681      	mov	r9, r0
 800c08a:	468a      	mov	sl, r1
 800c08c:	e754      	b.n	800bf38 <_strtod_l+0x7f0>
 800c08e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c090:	ea13 0f09 	tst.w	r3, r9
 800c094:	e7e9      	b.n	800c06a <_strtod_l+0x922>
 800c096:	f7ff fb35 	bl	800b704 <sulp>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c0a2:	f7f4 f8cd 	bl	8000240 <__aeabi_dsub>
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	4681      	mov	r9, r0
 800c0ac:	468a      	mov	sl, r1
 800c0ae:	f7f4 fce7 	bl	8000a80 <__aeabi_dcmpeq>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f47f ae07 	bne.w	800bcc6 <_strtod_l+0x57e>
 800c0b8:	e73e      	b.n	800bf38 <_strtod_l+0x7f0>
 800c0ba:	9904      	ldr	r1, [sp, #16]
 800c0bc:	4640      	mov	r0, r8
 800c0be:	f002 f9c0 	bl	800e442 <__ratio>
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	460f      	mov	r7, r1
 800c0cc:	f7f4 fcec 	bl	8000aa8 <__aeabi_dcmple>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d075      	beq.n	800c1c0 <_strtod_l+0xa78>
 800c0d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d047      	beq.n	800c16a <_strtod_l+0xa22>
 800c0da:	2600      	movs	r6, #0
 800c0dc:	4f68      	ldr	r7, [pc, #416]	; (800c280 <_strtod_l+0xb38>)
 800c0de:	4d68      	ldr	r5, [pc, #416]	; (800c280 <_strtod_l+0xb38>)
 800c0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0e6:	0d1b      	lsrs	r3, r3, #20
 800c0e8:	051b      	lsls	r3, r3, #20
 800c0ea:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c0ee:	4b65      	ldr	r3, [pc, #404]	; (800c284 <_strtod_l+0xb3c>)
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	f040 80cf 	bne.w	800c294 <_strtod_l+0xb4c>
 800c0f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c0fa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c100:	4648      	mov	r0, r9
 800c102:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800c106:	4651      	mov	r1, sl
 800c108:	f002 f8d6 	bl	800e2b8 <__ulp>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	4630      	mov	r0, r6
 800c112:	4639      	mov	r1, r7
 800c114:	f7f4 fa4c 	bl	80005b0 <__aeabi_dmul>
 800c118:	464a      	mov	r2, r9
 800c11a:	4653      	mov	r3, sl
 800c11c:	f7f4 f892 	bl	8000244 <__adddf3>
 800c120:	460b      	mov	r3, r1
 800c122:	4954      	ldr	r1, [pc, #336]	; (800c274 <_strtod_l+0xb2c>)
 800c124:	4a58      	ldr	r2, [pc, #352]	; (800c288 <_strtod_l+0xb40>)
 800c126:	4019      	ands	r1, r3
 800c128:	4291      	cmp	r1, r2
 800c12a:	4681      	mov	r9, r0
 800c12c:	d95e      	bls.n	800c1ec <_strtod_l+0xaa4>
 800c12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c130:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c134:	4293      	cmp	r3, r2
 800c136:	d103      	bne.n	800c140 <_strtod_l+0x9f8>
 800c138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c13a:	3301      	adds	r3, #1
 800c13c:	f43f ad26 	beq.w	800bb8c <_strtod_l+0x444>
 800c140:	f04f 39ff 	mov.w	r9, #4294967295
 800c144:	f8df a130 	ldr.w	sl, [pc, #304]	; 800c278 <_strtod_l+0xb30>
 800c148:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c14a:	4658      	mov	r0, fp
 800c14c:	f001 fe1d 	bl	800dd8a <_Bfree>
 800c150:	9906      	ldr	r1, [sp, #24]
 800c152:	4658      	mov	r0, fp
 800c154:	f001 fe19 	bl	800dd8a <_Bfree>
 800c158:	9904      	ldr	r1, [sp, #16]
 800c15a:	4658      	mov	r0, fp
 800c15c:	f001 fe15 	bl	800dd8a <_Bfree>
 800c160:	4641      	mov	r1, r8
 800c162:	4658      	mov	r0, fp
 800c164:	f001 fe11 	bl	800dd8a <_Bfree>
 800c168:	e617      	b.n	800bd9a <_strtod_l+0x652>
 800c16a:	f1b9 0f00 	cmp.w	r9, #0
 800c16e:	d119      	bne.n	800c1a4 <_strtod_l+0xa5c>
 800c170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c172:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c176:	b9e3      	cbnz	r3, 800c1b2 <_strtod_l+0xa6a>
 800c178:	2200      	movs	r2, #0
 800c17a:	4b41      	ldr	r3, [pc, #260]	; (800c280 <_strtod_l+0xb38>)
 800c17c:	4630      	mov	r0, r6
 800c17e:	4639      	mov	r1, r7
 800c180:	f7f4 fc88 	bl	8000a94 <__aeabi_dcmplt>
 800c184:	b9c8      	cbnz	r0, 800c1ba <_strtod_l+0xa72>
 800c186:	2200      	movs	r2, #0
 800c188:	4b40      	ldr	r3, [pc, #256]	; (800c28c <_strtod_l+0xb44>)
 800c18a:	4630      	mov	r0, r6
 800c18c:	4639      	mov	r1, r7
 800c18e:	f7f4 fa0f 	bl	80005b0 <__aeabi_dmul>
 800c192:	4604      	mov	r4, r0
 800c194:	460d      	mov	r5, r1
 800c196:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c19a:	9418      	str	r4, [sp, #96]	; 0x60
 800c19c:	9319      	str	r3, [sp, #100]	; 0x64
 800c19e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800c1a2:	e79d      	b.n	800c0e0 <_strtod_l+0x998>
 800c1a4:	f1b9 0f01 	cmp.w	r9, #1
 800c1a8:	d103      	bne.n	800c1b2 <_strtod_l+0xa6a>
 800c1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f43f ad8a 	beq.w	800bcc6 <_strtod_l+0x57e>
 800c1b2:	2600      	movs	r6, #0
 800c1b4:	4f36      	ldr	r7, [pc, #216]	; (800c290 <_strtod_l+0xb48>)
 800c1b6:	2400      	movs	r4, #0
 800c1b8:	e791      	b.n	800c0de <_strtod_l+0x996>
 800c1ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c1bc:	4d33      	ldr	r5, [pc, #204]	; (800c28c <_strtod_l+0xb44>)
 800c1be:	e7ea      	b.n	800c196 <_strtod_l+0xa4e>
 800c1c0:	4b32      	ldr	r3, [pc, #200]	; (800c28c <_strtod_l+0xb44>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	4639      	mov	r1, r7
 800c1c8:	f7f4 f9f2 	bl	80005b0 <__aeabi_dmul>
 800c1cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	b933      	cbnz	r3, 800c1e2 <_strtod_l+0xa9a>
 800c1d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1d8:	9010      	str	r0, [sp, #64]	; 0x40
 800c1da:	9311      	str	r3, [sp, #68]	; 0x44
 800c1dc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c1e0:	e77e      	b.n	800c0e0 <_strtod_l+0x998>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c1ea:	e7f7      	b.n	800c1dc <_strtod_l+0xa94>
 800c1ec:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800c1f0:	9b05      	ldr	r3, [sp, #20]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1a8      	bne.n	800c148 <_strtod_l+0xa00>
 800c1f6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c1fa:	0d1b      	lsrs	r3, r3, #20
 800c1fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1fe:	051b      	lsls	r3, r3, #20
 800c200:	429a      	cmp	r2, r3
 800c202:	4656      	mov	r6, sl
 800c204:	d1a0      	bne.n	800c148 <_strtod_l+0xa00>
 800c206:	4629      	mov	r1, r5
 800c208:	4620      	mov	r0, r4
 800c20a:	f7f4 fc81 	bl	8000b10 <__aeabi_d2iz>
 800c20e:	f7f4 f965 	bl	80004dc <__aeabi_i2d>
 800c212:	460b      	mov	r3, r1
 800c214:	4602      	mov	r2, r0
 800c216:	4629      	mov	r1, r5
 800c218:	4620      	mov	r0, r4
 800c21a:	f7f4 f811 	bl	8000240 <__aeabi_dsub>
 800c21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c220:	4604      	mov	r4, r0
 800c222:	460d      	mov	r5, r1
 800c224:	b933      	cbnz	r3, 800c234 <_strtod_l+0xaec>
 800c226:	f1b9 0f00 	cmp.w	r9, #0
 800c22a:	d103      	bne.n	800c234 <_strtod_l+0xaec>
 800c22c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800c230:	2e00      	cmp	r6, #0
 800c232:	d06a      	beq.n	800c30a <_strtod_l+0xbc2>
 800c234:	a30a      	add	r3, pc, #40	; (adr r3, 800c260 <_strtod_l+0xb18>)
 800c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23a:	4620      	mov	r0, r4
 800c23c:	4629      	mov	r1, r5
 800c23e:	f7f4 fc29 	bl	8000a94 <__aeabi_dcmplt>
 800c242:	2800      	cmp	r0, #0
 800c244:	f47f acad 	bne.w	800bba2 <_strtod_l+0x45a>
 800c248:	a307      	add	r3, pc, #28	; (adr r3, 800c268 <_strtod_l+0xb20>)
 800c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24e:	4620      	mov	r0, r4
 800c250:	4629      	mov	r1, r5
 800c252:	f7f4 fc3d 	bl	8000ad0 <__aeabi_dcmpgt>
 800c256:	2800      	cmp	r0, #0
 800c258:	f43f af76 	beq.w	800c148 <_strtod_l+0xa00>
 800c25c:	e4a1      	b.n	800bba2 <_strtod_l+0x45a>
 800c25e:	bf00      	nop
 800c260:	94a03595 	.word	0x94a03595
 800c264:	3fdfffff 	.word	0x3fdfffff
 800c268:	35afe535 	.word	0x35afe535
 800c26c:	3fe00000 	.word	0x3fe00000
 800c270:	000fffff 	.word	0x000fffff
 800c274:	7ff00000 	.word	0x7ff00000
 800c278:	7fefffff 	.word	0x7fefffff
 800c27c:	39500000 	.word	0x39500000
 800c280:	3ff00000 	.word	0x3ff00000
 800c284:	7fe00000 	.word	0x7fe00000
 800c288:	7c9fffff 	.word	0x7c9fffff
 800c28c:	3fe00000 	.word	0x3fe00000
 800c290:	bff00000 	.word	0xbff00000
 800c294:	9b05      	ldr	r3, [sp, #20]
 800c296:	b313      	cbz	r3, 800c2de <_strtod_l+0xb96>
 800c298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c29a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c29e:	d81e      	bhi.n	800c2de <_strtod_l+0xb96>
 800c2a0:	a325      	add	r3, pc, #148	; (adr r3, 800c338 <_strtod_l+0xbf0>)
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	f7f4 fbfd 	bl	8000aa8 <__aeabi_dcmple>
 800c2ae:	b190      	cbz	r0, 800c2d6 <_strtod_l+0xb8e>
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f7f4 fc54 	bl	8000b60 <__aeabi_d2uiz>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	bf08      	it	eq
 800c2bc:	2001      	moveq	r0, #1
 800c2be:	f7f4 f8fd 	bl	80004bc <__aeabi_ui2d>
 800c2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	460d      	mov	r5, r1
 800c2c8:	b9d3      	cbnz	r3, 800c300 <_strtod_l+0xbb8>
 800c2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ce:	9012      	str	r0, [sp, #72]	; 0x48
 800c2d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c2d2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800c2d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2d8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800c2dc:	1a9f      	subs	r7, r3, r2
 800c2de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2e2:	f001 ffe9 	bl	800e2b8 <__ulp>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	f7f4 f95f 	bl	80005b0 <__aeabi_dmul>
 800c2f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c2f6:	f7f3 ffa5 	bl	8000244 <__adddf3>
 800c2fa:	4681      	mov	r9, r0
 800c2fc:	468a      	mov	sl, r1
 800c2fe:	e777      	b.n	800c1f0 <_strtod_l+0xaa8>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800c308:	e7e3      	b.n	800c2d2 <_strtod_l+0xb8a>
 800c30a:	a30d      	add	r3, pc, #52	; (adr r3, 800c340 <_strtod_l+0xbf8>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	f7f4 fbc0 	bl	8000a94 <__aeabi_dcmplt>
 800c314:	e79f      	b.n	800c256 <_strtod_l+0xb0e>
 800c316:	2300      	movs	r3, #0
 800c318:	930d      	str	r3, [sp, #52]	; 0x34
 800c31a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c31c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	f7ff ba55 	b.w	800b7ce <_strtod_l+0x86>
 800c324:	2b65      	cmp	r3, #101	; 0x65
 800c326:	f04f 0200 	mov.w	r2, #0
 800c32a:	f43f ab42 	beq.w	800b9b2 <_strtod_l+0x26a>
 800c32e:	2101      	movs	r1, #1
 800c330:	4614      	mov	r4, r2
 800c332:	9105      	str	r1, [sp, #20]
 800c334:	f7ff babf 	b.w	800b8b6 <_strtod_l+0x16e>
 800c338:	ffc00000 	.word	0xffc00000
 800c33c:	41dfffff 	.word	0x41dfffff
 800c340:	94a03595 	.word	0x94a03595
 800c344:	3fcfffff 	.word	0x3fcfffff

0800c348 <_strtod_r>:
 800c348:	4b05      	ldr	r3, [pc, #20]	; (800c360 <_strtod_r+0x18>)
 800c34a:	b410      	push	{r4}
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4c05      	ldr	r4, [pc, #20]	; (800c364 <_strtod_r+0x1c>)
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	2b00      	cmp	r3, #0
 800c354:	bf08      	it	eq
 800c356:	4623      	moveq	r3, r4
 800c358:	bc10      	pop	{r4}
 800c35a:	f7ff b9f5 	b.w	800b748 <_strtod_l>
 800c35e:	bf00      	nop
 800c360:	20000414 	.word	0x20000414
 800c364:	20000478 	.word	0x20000478

0800c368 <_strtol_l.isra.0>:
 800c368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c36c:	4680      	mov	r8, r0
 800c36e:	4689      	mov	r9, r1
 800c370:	4692      	mov	sl, r2
 800c372:	461e      	mov	r6, r3
 800c374:	460f      	mov	r7, r1
 800c376:	463d      	mov	r5, r7
 800c378:	9808      	ldr	r0, [sp, #32]
 800c37a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c37e:	f001 fc25 	bl	800dbcc <__locale_ctype_ptr_l>
 800c382:	4420      	add	r0, r4
 800c384:	7843      	ldrb	r3, [r0, #1]
 800c386:	f013 0308 	ands.w	r3, r3, #8
 800c38a:	d132      	bne.n	800c3f2 <_strtol_l.isra.0+0x8a>
 800c38c:	2c2d      	cmp	r4, #45	; 0x2d
 800c38e:	d132      	bne.n	800c3f6 <_strtol_l.isra.0+0x8e>
 800c390:	2201      	movs	r2, #1
 800c392:	787c      	ldrb	r4, [r7, #1]
 800c394:	1cbd      	adds	r5, r7, #2
 800c396:	2e00      	cmp	r6, #0
 800c398:	d05d      	beq.n	800c456 <_strtol_l.isra.0+0xee>
 800c39a:	2e10      	cmp	r6, #16
 800c39c:	d109      	bne.n	800c3b2 <_strtol_l.isra.0+0x4a>
 800c39e:	2c30      	cmp	r4, #48	; 0x30
 800c3a0:	d107      	bne.n	800c3b2 <_strtol_l.isra.0+0x4a>
 800c3a2:	782b      	ldrb	r3, [r5, #0]
 800c3a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c3a8:	2b58      	cmp	r3, #88	; 0x58
 800c3aa:	d14f      	bne.n	800c44c <_strtol_l.isra.0+0xe4>
 800c3ac:	2610      	movs	r6, #16
 800c3ae:	786c      	ldrb	r4, [r5, #1]
 800c3b0:	3502      	adds	r5, #2
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	bf14      	ite	ne
 800c3b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c3ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c3be:	2700      	movs	r7, #0
 800c3c0:	fbb1 fcf6 	udiv	ip, r1, r6
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c3ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c3ce:	2b09      	cmp	r3, #9
 800c3d0:	d817      	bhi.n	800c402 <_strtol_l.isra.0+0x9a>
 800c3d2:	461c      	mov	r4, r3
 800c3d4:	42a6      	cmp	r6, r4
 800c3d6:	dd23      	ble.n	800c420 <_strtol_l.isra.0+0xb8>
 800c3d8:	1c7b      	adds	r3, r7, #1
 800c3da:	d007      	beq.n	800c3ec <_strtol_l.isra.0+0x84>
 800c3dc:	4584      	cmp	ip, r0
 800c3de:	d31c      	bcc.n	800c41a <_strtol_l.isra.0+0xb2>
 800c3e0:	d101      	bne.n	800c3e6 <_strtol_l.isra.0+0x7e>
 800c3e2:	45a6      	cmp	lr, r4
 800c3e4:	db19      	blt.n	800c41a <_strtol_l.isra.0+0xb2>
 800c3e6:	2701      	movs	r7, #1
 800c3e8:	fb00 4006 	mla	r0, r0, r6, r4
 800c3ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3f0:	e7eb      	b.n	800c3ca <_strtol_l.isra.0+0x62>
 800c3f2:	462f      	mov	r7, r5
 800c3f4:	e7bf      	b.n	800c376 <_strtol_l.isra.0+0xe>
 800c3f6:	2c2b      	cmp	r4, #43	; 0x2b
 800c3f8:	bf04      	itt	eq
 800c3fa:	1cbd      	addeq	r5, r7, #2
 800c3fc:	787c      	ldrbeq	r4, [r7, #1]
 800c3fe:	461a      	mov	r2, r3
 800c400:	e7c9      	b.n	800c396 <_strtol_l.isra.0+0x2e>
 800c402:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c406:	2b19      	cmp	r3, #25
 800c408:	d801      	bhi.n	800c40e <_strtol_l.isra.0+0xa6>
 800c40a:	3c37      	subs	r4, #55	; 0x37
 800c40c:	e7e2      	b.n	800c3d4 <_strtol_l.isra.0+0x6c>
 800c40e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c412:	2b19      	cmp	r3, #25
 800c414:	d804      	bhi.n	800c420 <_strtol_l.isra.0+0xb8>
 800c416:	3c57      	subs	r4, #87	; 0x57
 800c418:	e7dc      	b.n	800c3d4 <_strtol_l.isra.0+0x6c>
 800c41a:	f04f 37ff 	mov.w	r7, #4294967295
 800c41e:	e7e5      	b.n	800c3ec <_strtol_l.isra.0+0x84>
 800c420:	1c7b      	adds	r3, r7, #1
 800c422:	d108      	bne.n	800c436 <_strtol_l.isra.0+0xce>
 800c424:	2322      	movs	r3, #34	; 0x22
 800c426:	4608      	mov	r0, r1
 800c428:	f8c8 3000 	str.w	r3, [r8]
 800c42c:	f1ba 0f00 	cmp.w	sl, #0
 800c430:	d107      	bne.n	800c442 <_strtol_l.isra.0+0xda>
 800c432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c436:	b102      	cbz	r2, 800c43a <_strtol_l.isra.0+0xd2>
 800c438:	4240      	negs	r0, r0
 800c43a:	f1ba 0f00 	cmp.w	sl, #0
 800c43e:	d0f8      	beq.n	800c432 <_strtol_l.isra.0+0xca>
 800c440:	b10f      	cbz	r7, 800c446 <_strtol_l.isra.0+0xde>
 800c442:	f105 39ff 	add.w	r9, r5, #4294967295
 800c446:	f8ca 9000 	str.w	r9, [sl]
 800c44a:	e7f2      	b.n	800c432 <_strtol_l.isra.0+0xca>
 800c44c:	2430      	movs	r4, #48	; 0x30
 800c44e:	2e00      	cmp	r6, #0
 800c450:	d1af      	bne.n	800c3b2 <_strtol_l.isra.0+0x4a>
 800c452:	2608      	movs	r6, #8
 800c454:	e7ad      	b.n	800c3b2 <_strtol_l.isra.0+0x4a>
 800c456:	2c30      	cmp	r4, #48	; 0x30
 800c458:	d0a3      	beq.n	800c3a2 <_strtol_l.isra.0+0x3a>
 800c45a:	260a      	movs	r6, #10
 800c45c:	e7a9      	b.n	800c3b2 <_strtol_l.isra.0+0x4a>
	...

0800c460 <_strtol_r>:
 800c460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c462:	4c06      	ldr	r4, [pc, #24]	; (800c47c <_strtol_r+0x1c>)
 800c464:	4d06      	ldr	r5, [pc, #24]	; (800c480 <_strtol_r+0x20>)
 800c466:	6824      	ldr	r4, [r4, #0]
 800c468:	6a24      	ldr	r4, [r4, #32]
 800c46a:	2c00      	cmp	r4, #0
 800c46c:	bf08      	it	eq
 800c46e:	462c      	moveq	r4, r5
 800c470:	9400      	str	r4, [sp, #0]
 800c472:	f7ff ff79 	bl	800c368 <_strtol_l.isra.0>
 800c476:	b003      	add	sp, #12
 800c478:	bd30      	pop	{r4, r5, pc}
 800c47a:	bf00      	nop
 800c47c:	20000414 	.word	0x20000414
 800c480:	20000478 	.word	0x20000478

0800c484 <__swbuf_r>:
 800c484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c486:	460e      	mov	r6, r1
 800c488:	4614      	mov	r4, r2
 800c48a:	4605      	mov	r5, r0
 800c48c:	b118      	cbz	r0, 800c496 <__swbuf_r+0x12>
 800c48e:	6983      	ldr	r3, [r0, #24]
 800c490:	b90b      	cbnz	r3, 800c496 <__swbuf_r+0x12>
 800c492:	f000 ffe9 	bl	800d468 <__sinit>
 800c496:	4b21      	ldr	r3, [pc, #132]	; (800c51c <__swbuf_r+0x98>)
 800c498:	429c      	cmp	r4, r3
 800c49a:	d12a      	bne.n	800c4f2 <__swbuf_r+0x6e>
 800c49c:	686c      	ldr	r4, [r5, #4]
 800c49e:	69a3      	ldr	r3, [r4, #24]
 800c4a0:	60a3      	str	r3, [r4, #8]
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	071a      	lsls	r2, r3, #28
 800c4a6:	d52e      	bpl.n	800c506 <__swbuf_r+0x82>
 800c4a8:	6923      	ldr	r3, [r4, #16]
 800c4aa:	b363      	cbz	r3, 800c506 <__swbuf_r+0x82>
 800c4ac:	6923      	ldr	r3, [r4, #16]
 800c4ae:	6820      	ldr	r0, [r4, #0]
 800c4b0:	b2f6      	uxtb	r6, r6
 800c4b2:	1ac0      	subs	r0, r0, r3
 800c4b4:	6963      	ldr	r3, [r4, #20]
 800c4b6:	4637      	mov	r7, r6
 800c4b8:	4283      	cmp	r3, r0
 800c4ba:	dc04      	bgt.n	800c4c6 <__swbuf_r+0x42>
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4628      	mov	r0, r5
 800c4c0:	f000 ff68 	bl	800d394 <_fflush_r>
 800c4c4:	bb28      	cbnz	r0, 800c512 <__swbuf_r+0x8e>
 800c4c6:	68a3      	ldr	r3, [r4, #8]
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	60a3      	str	r3, [r4, #8]
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	1c5a      	adds	r2, r3, #1
 800c4d2:	6022      	str	r2, [r4, #0]
 800c4d4:	701e      	strb	r6, [r3, #0]
 800c4d6:	6963      	ldr	r3, [r4, #20]
 800c4d8:	4283      	cmp	r3, r0
 800c4da:	d004      	beq.n	800c4e6 <__swbuf_r+0x62>
 800c4dc:	89a3      	ldrh	r3, [r4, #12]
 800c4de:	07db      	lsls	r3, r3, #31
 800c4e0:	d519      	bpl.n	800c516 <__swbuf_r+0x92>
 800c4e2:	2e0a      	cmp	r6, #10
 800c4e4:	d117      	bne.n	800c516 <__swbuf_r+0x92>
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	f000 ff53 	bl	800d394 <_fflush_r>
 800c4ee:	b190      	cbz	r0, 800c516 <__swbuf_r+0x92>
 800c4f0:	e00f      	b.n	800c512 <__swbuf_r+0x8e>
 800c4f2:	4b0b      	ldr	r3, [pc, #44]	; (800c520 <__swbuf_r+0x9c>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	d101      	bne.n	800c4fc <__swbuf_r+0x78>
 800c4f8:	68ac      	ldr	r4, [r5, #8]
 800c4fa:	e7d0      	b.n	800c49e <__swbuf_r+0x1a>
 800c4fc:	4b09      	ldr	r3, [pc, #36]	; (800c524 <__swbuf_r+0xa0>)
 800c4fe:	429c      	cmp	r4, r3
 800c500:	bf08      	it	eq
 800c502:	68ec      	ldreq	r4, [r5, #12]
 800c504:	e7cb      	b.n	800c49e <__swbuf_r+0x1a>
 800c506:	4621      	mov	r1, r4
 800c508:	4628      	mov	r0, r5
 800c50a:	f000 f80d 	bl	800c528 <__swsetup_r>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d0cc      	beq.n	800c4ac <__swbuf_r+0x28>
 800c512:	f04f 37ff 	mov.w	r7, #4294967295
 800c516:	4638      	mov	r0, r7
 800c518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c51a:	bf00      	nop
 800c51c:	0800ffe0 	.word	0x0800ffe0
 800c520:	08010000 	.word	0x08010000
 800c524:	0800ffc0 	.word	0x0800ffc0

0800c528 <__swsetup_r>:
 800c528:	4b32      	ldr	r3, [pc, #200]	; (800c5f4 <__swsetup_r+0xcc>)
 800c52a:	b570      	push	{r4, r5, r6, lr}
 800c52c:	681d      	ldr	r5, [r3, #0]
 800c52e:	4606      	mov	r6, r0
 800c530:	460c      	mov	r4, r1
 800c532:	b125      	cbz	r5, 800c53e <__swsetup_r+0x16>
 800c534:	69ab      	ldr	r3, [r5, #24]
 800c536:	b913      	cbnz	r3, 800c53e <__swsetup_r+0x16>
 800c538:	4628      	mov	r0, r5
 800c53a:	f000 ff95 	bl	800d468 <__sinit>
 800c53e:	4b2e      	ldr	r3, [pc, #184]	; (800c5f8 <__swsetup_r+0xd0>)
 800c540:	429c      	cmp	r4, r3
 800c542:	d10f      	bne.n	800c564 <__swsetup_r+0x3c>
 800c544:	686c      	ldr	r4, [r5, #4]
 800c546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	0715      	lsls	r5, r2, #28
 800c54e:	d42c      	bmi.n	800c5aa <__swsetup_r+0x82>
 800c550:	06d0      	lsls	r0, r2, #27
 800c552:	d411      	bmi.n	800c578 <__swsetup_r+0x50>
 800c554:	2209      	movs	r2, #9
 800c556:	6032      	str	r2, [r6, #0]
 800c558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
 800c562:	e03e      	b.n	800c5e2 <__swsetup_r+0xba>
 800c564:	4b25      	ldr	r3, [pc, #148]	; (800c5fc <__swsetup_r+0xd4>)
 800c566:	429c      	cmp	r4, r3
 800c568:	d101      	bne.n	800c56e <__swsetup_r+0x46>
 800c56a:	68ac      	ldr	r4, [r5, #8]
 800c56c:	e7eb      	b.n	800c546 <__swsetup_r+0x1e>
 800c56e:	4b24      	ldr	r3, [pc, #144]	; (800c600 <__swsetup_r+0xd8>)
 800c570:	429c      	cmp	r4, r3
 800c572:	bf08      	it	eq
 800c574:	68ec      	ldreq	r4, [r5, #12]
 800c576:	e7e6      	b.n	800c546 <__swsetup_r+0x1e>
 800c578:	0751      	lsls	r1, r2, #29
 800c57a:	d512      	bpl.n	800c5a2 <__swsetup_r+0x7a>
 800c57c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c57e:	b141      	cbz	r1, 800c592 <__swsetup_r+0x6a>
 800c580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c584:	4299      	cmp	r1, r3
 800c586:	d002      	beq.n	800c58e <__swsetup_r+0x66>
 800c588:	4630      	mov	r0, r6
 800c58a:	f001 ffd1 	bl	800e530 <_free_r>
 800c58e:	2300      	movs	r3, #0
 800c590:	6363      	str	r3, [r4, #52]	; 0x34
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	2300      	movs	r3, #0
 800c59c:	6063      	str	r3, [r4, #4]
 800c59e:	6923      	ldr	r3, [r4, #16]
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	89a3      	ldrh	r3, [r4, #12]
 800c5a4:	f043 0308 	orr.w	r3, r3, #8
 800c5a8:	81a3      	strh	r3, [r4, #12]
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	b94b      	cbnz	r3, 800c5c2 <__swsetup_r+0x9a>
 800c5ae:	89a3      	ldrh	r3, [r4, #12]
 800c5b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5b8:	d003      	beq.n	800c5c2 <__swsetup_r+0x9a>
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f001 fb3d 	bl	800dc3c <__smakebuf_r>
 800c5c2:	89a2      	ldrh	r2, [r4, #12]
 800c5c4:	f012 0301 	ands.w	r3, r2, #1
 800c5c8:	d00c      	beq.n	800c5e4 <__swsetup_r+0xbc>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60a3      	str	r3, [r4, #8]
 800c5ce:	6963      	ldr	r3, [r4, #20]
 800c5d0:	425b      	negs	r3, r3
 800c5d2:	61a3      	str	r3, [r4, #24]
 800c5d4:	6923      	ldr	r3, [r4, #16]
 800c5d6:	b953      	cbnz	r3, 800c5ee <__swsetup_r+0xc6>
 800c5d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c5e0:	d1ba      	bne.n	800c558 <__swsetup_r+0x30>
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	0792      	lsls	r2, r2, #30
 800c5e6:	bf58      	it	pl
 800c5e8:	6963      	ldrpl	r3, [r4, #20]
 800c5ea:	60a3      	str	r3, [r4, #8]
 800c5ec:	e7f2      	b.n	800c5d4 <__swsetup_r+0xac>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	e7f7      	b.n	800c5e2 <__swsetup_r+0xba>
 800c5f2:	bf00      	nop
 800c5f4:	20000414 	.word	0x20000414
 800c5f8:	0800ffe0 	.word	0x0800ffe0
 800c5fc:	08010000 	.word	0x08010000
 800c600:	0800ffc0 	.word	0x0800ffc0

0800c604 <quorem>:
 800c604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c608:	6903      	ldr	r3, [r0, #16]
 800c60a:	690c      	ldr	r4, [r1, #16]
 800c60c:	4680      	mov	r8, r0
 800c60e:	42a3      	cmp	r3, r4
 800c610:	f2c0 8084 	blt.w	800c71c <quorem+0x118>
 800c614:	3c01      	subs	r4, #1
 800c616:	f101 0714 	add.w	r7, r1, #20
 800c61a:	f100 0614 	add.w	r6, r0, #20
 800c61e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c622:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c626:	3501      	adds	r5, #1
 800c628:	fbb0 f5f5 	udiv	r5, r0, r5
 800c62c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c630:	eb06 030c 	add.w	r3, r6, ip
 800c634:	eb07 090c 	add.w	r9, r7, ip
 800c638:	9301      	str	r3, [sp, #4]
 800c63a:	b39d      	cbz	r5, 800c6a4 <quorem+0xa0>
 800c63c:	f04f 0a00 	mov.w	sl, #0
 800c640:	4638      	mov	r0, r7
 800c642:	46b6      	mov	lr, r6
 800c644:	46d3      	mov	fp, sl
 800c646:	f850 2b04 	ldr.w	r2, [r0], #4
 800c64a:	b293      	uxth	r3, r2
 800c64c:	fb05 a303 	mla	r3, r5, r3, sl
 800c650:	0c12      	lsrs	r2, r2, #16
 800c652:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c656:	fb05 a202 	mla	r2, r5, r2, sl
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	ebab 0303 	sub.w	r3, fp, r3
 800c660:	f8de b000 	ldr.w	fp, [lr]
 800c664:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c668:	fa1f fb8b 	uxth.w	fp, fp
 800c66c:	445b      	add	r3, fp
 800c66e:	fa1f fb82 	uxth.w	fp, r2
 800c672:	f8de 2000 	ldr.w	r2, [lr]
 800c676:	4581      	cmp	r9, r0
 800c678:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c67c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c680:	b29b      	uxth	r3, r3
 800c682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c686:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c68a:	f84e 3b04 	str.w	r3, [lr], #4
 800c68e:	d2da      	bcs.n	800c646 <quorem+0x42>
 800c690:	f856 300c 	ldr.w	r3, [r6, ip]
 800c694:	b933      	cbnz	r3, 800c6a4 <quorem+0xa0>
 800c696:	9b01      	ldr	r3, [sp, #4]
 800c698:	3b04      	subs	r3, #4
 800c69a:	429e      	cmp	r6, r3
 800c69c:	461a      	mov	r2, r3
 800c69e:	d331      	bcc.n	800c704 <quorem+0x100>
 800c6a0:	f8c8 4010 	str.w	r4, [r8, #16]
 800c6a4:	4640      	mov	r0, r8
 800c6a6:	f001 fd8f 	bl	800e1c8 <__mcmp>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	db26      	blt.n	800c6fc <quorem+0xf8>
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f04f 0c00 	mov.w	ip, #0
 800c6b4:	3501      	adds	r5, #1
 800c6b6:	f857 1b04 	ldr.w	r1, [r7], #4
 800c6ba:	f8d0 e000 	ldr.w	lr, [r0]
 800c6be:	b28b      	uxth	r3, r1
 800c6c0:	ebac 0303 	sub.w	r3, ip, r3
 800c6c4:	fa1f f28e 	uxth.w	r2, lr
 800c6c8:	4413      	add	r3, r2
 800c6ca:	0c0a      	lsrs	r2, r1, #16
 800c6cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c6d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6da:	45b9      	cmp	r9, r7
 800c6dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c6e0:	f840 3b04 	str.w	r3, [r0], #4
 800c6e4:	d2e7      	bcs.n	800c6b6 <quorem+0xb2>
 800c6e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c6ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c6ee:	b92a      	cbnz	r2, 800c6fc <quorem+0xf8>
 800c6f0:	3b04      	subs	r3, #4
 800c6f2:	429e      	cmp	r6, r3
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	d30b      	bcc.n	800c710 <quorem+0x10c>
 800c6f8:	f8c8 4010 	str.w	r4, [r8, #16]
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	b003      	add	sp, #12
 800c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c704:	6812      	ldr	r2, [r2, #0]
 800c706:	3b04      	subs	r3, #4
 800c708:	2a00      	cmp	r2, #0
 800c70a:	d1c9      	bne.n	800c6a0 <quorem+0x9c>
 800c70c:	3c01      	subs	r4, #1
 800c70e:	e7c4      	b.n	800c69a <quorem+0x96>
 800c710:	6812      	ldr	r2, [r2, #0]
 800c712:	3b04      	subs	r3, #4
 800c714:	2a00      	cmp	r2, #0
 800c716:	d1ef      	bne.n	800c6f8 <quorem+0xf4>
 800c718:	3c01      	subs	r4, #1
 800c71a:	e7ea      	b.n	800c6f2 <quorem+0xee>
 800c71c:	2000      	movs	r0, #0
 800c71e:	e7ee      	b.n	800c6fe <quorem+0xfa>

0800c720 <_dtoa_r>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	4616      	mov	r6, r2
 800c726:	461f      	mov	r7, r3
 800c728:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c72a:	b095      	sub	sp, #84	; 0x54
 800c72c:	4604      	mov	r4, r0
 800c72e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800c732:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c736:	b93d      	cbnz	r5, 800c748 <_dtoa_r+0x28>
 800c738:	2010      	movs	r0, #16
 800c73a:	f001 fabf 	bl	800dcbc <malloc>
 800c73e:	6260      	str	r0, [r4, #36]	; 0x24
 800c740:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c744:	6005      	str	r5, [r0, #0]
 800c746:	60c5      	str	r5, [r0, #12]
 800c748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c74a:	6819      	ldr	r1, [r3, #0]
 800c74c:	b151      	cbz	r1, 800c764 <_dtoa_r+0x44>
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	2301      	movs	r3, #1
 800c752:	4093      	lsls	r3, r2
 800c754:	604a      	str	r2, [r1, #4]
 800c756:	608b      	str	r3, [r1, #8]
 800c758:	4620      	mov	r0, r4
 800c75a:	f001 fb16 	bl	800dd8a <_Bfree>
 800c75e:	2200      	movs	r2, #0
 800c760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	1e3b      	subs	r3, r7, #0
 800c766:	bfaf      	iteee	ge
 800c768:	2300      	movge	r3, #0
 800c76a:	2201      	movlt	r2, #1
 800c76c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c770:	9303      	strlt	r3, [sp, #12]
 800c772:	bfac      	ite	ge
 800c774:	f8c8 3000 	strge.w	r3, [r8]
 800c778:	f8c8 2000 	strlt.w	r2, [r8]
 800c77c:	4bae      	ldr	r3, [pc, #696]	; (800ca38 <_dtoa_r+0x318>)
 800c77e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c782:	ea33 0308 	bics.w	r3, r3, r8
 800c786:	d11b      	bne.n	800c7c0 <_dtoa_r+0xa0>
 800c788:	f242 730f 	movw	r3, #9999	; 0x270f
 800c78c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	9b02      	ldr	r3, [sp, #8]
 800c792:	b923      	cbnz	r3, 800c79e <_dtoa_r+0x7e>
 800c794:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c798:	2800      	cmp	r0, #0
 800c79a:	f000 8545 	beq.w	800d228 <_dtoa_r+0xb08>
 800c79e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7a0:	b953      	cbnz	r3, 800c7b8 <_dtoa_r+0x98>
 800c7a2:	4ba6      	ldr	r3, [pc, #664]	; (800ca3c <_dtoa_r+0x31c>)
 800c7a4:	e021      	b.n	800c7ea <_dtoa_r+0xca>
 800c7a6:	4ba6      	ldr	r3, [pc, #664]	; (800ca40 <_dtoa_r+0x320>)
 800c7a8:	9306      	str	r3, [sp, #24]
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c7ae:	6013      	str	r3, [r2, #0]
 800c7b0:	9806      	ldr	r0, [sp, #24]
 800c7b2:	b015      	add	sp, #84	; 0x54
 800c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b8:	4ba0      	ldr	r3, [pc, #640]	; (800ca3c <_dtoa_r+0x31c>)
 800c7ba:	9306      	str	r3, [sp, #24]
 800c7bc:	3303      	adds	r3, #3
 800c7be:	e7f5      	b.n	800c7ac <_dtoa_r+0x8c>
 800c7c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	f7f4 f958 	bl	8000a80 <__aeabi_dcmpeq>
 800c7d0:	4682      	mov	sl, r0
 800c7d2:	b160      	cbz	r0, 800c7ee <_dtoa_r+0xce>
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c7d8:	6013      	str	r3, [r2, #0]
 800c7da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 8520 	beq.w	800d222 <_dtoa_r+0xb02>
 800c7e2:	4b98      	ldr	r3, [pc, #608]	; (800ca44 <_dtoa_r+0x324>)
 800c7e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c7e6:	6013      	str	r3, [r2, #0]
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	9306      	str	r3, [sp, #24]
 800c7ec:	e7e0      	b.n	800c7b0 <_dtoa_r+0x90>
 800c7ee:	ab12      	add	r3, sp, #72	; 0x48
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	ab13      	add	r3, sp, #76	; 0x4c
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	4632      	mov	r2, r6
 800c7f8:	463b      	mov	r3, r7
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f001 fdd2 	bl	800e3a4 <__d2b>
 800c800:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c804:	4683      	mov	fp, r0
 800c806:	2d00      	cmp	r5, #0
 800c808:	d07d      	beq.n	800c906 <_dtoa_r+0x1e6>
 800c80a:	46b0      	mov	r8, r6
 800c80c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c810:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800c814:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800c818:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c81c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800c820:	2200      	movs	r2, #0
 800c822:	4b89      	ldr	r3, [pc, #548]	; (800ca48 <_dtoa_r+0x328>)
 800c824:	4640      	mov	r0, r8
 800c826:	4649      	mov	r1, r9
 800c828:	f7f3 fd0a 	bl	8000240 <__aeabi_dsub>
 800c82c:	a37c      	add	r3, pc, #496	; (adr r3, 800ca20 <_dtoa_r+0x300>)
 800c82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c832:	f7f3 febd 	bl	80005b0 <__aeabi_dmul>
 800c836:	a37c      	add	r3, pc, #496	; (adr r3, 800ca28 <_dtoa_r+0x308>)
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f7f3 fd02 	bl	8000244 <__adddf3>
 800c840:	4606      	mov	r6, r0
 800c842:	4628      	mov	r0, r5
 800c844:	460f      	mov	r7, r1
 800c846:	f7f3 fe49 	bl	80004dc <__aeabi_i2d>
 800c84a:	a379      	add	r3, pc, #484	; (adr r3, 800ca30 <_dtoa_r+0x310>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	f7f3 feae 	bl	80005b0 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4630      	mov	r0, r6
 800c85a:	4639      	mov	r1, r7
 800c85c:	f7f3 fcf2 	bl	8000244 <__adddf3>
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	f7f4 f954 	bl	8000b10 <__aeabi_d2iz>
 800c868:	2200      	movs	r2, #0
 800c86a:	4682      	mov	sl, r0
 800c86c:	2300      	movs	r3, #0
 800c86e:	4630      	mov	r0, r6
 800c870:	4639      	mov	r1, r7
 800c872:	f7f4 f90f 	bl	8000a94 <__aeabi_dcmplt>
 800c876:	b148      	cbz	r0, 800c88c <_dtoa_r+0x16c>
 800c878:	4650      	mov	r0, sl
 800c87a:	f7f3 fe2f 	bl	80004dc <__aeabi_i2d>
 800c87e:	4632      	mov	r2, r6
 800c880:	463b      	mov	r3, r7
 800c882:	f7f4 f8fd 	bl	8000a80 <__aeabi_dcmpeq>
 800c886:	b908      	cbnz	r0, 800c88c <_dtoa_r+0x16c>
 800c888:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c88c:	f1ba 0f16 	cmp.w	sl, #22
 800c890:	d85a      	bhi.n	800c948 <_dtoa_r+0x228>
 800c892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c896:	496d      	ldr	r1, [pc, #436]	; (800ca4c <_dtoa_r+0x32c>)
 800c898:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c89c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8a0:	f7f4 f916 	bl	8000ad0 <__aeabi_dcmpgt>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d051      	beq.n	800c94c <_dtoa_r+0x22c>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8ae:	930d      	str	r3, [sp, #52]	; 0x34
 800c8b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8b2:	1b5d      	subs	r5, r3, r5
 800c8b4:	1e6b      	subs	r3, r5, #1
 800c8b6:	9307      	str	r3, [sp, #28]
 800c8b8:	bf43      	ittte	mi
 800c8ba:	2300      	movmi	r3, #0
 800c8bc:	f1c5 0901 	rsbmi	r9, r5, #1
 800c8c0:	9307      	strmi	r3, [sp, #28]
 800c8c2:	f04f 0900 	movpl.w	r9, #0
 800c8c6:	f1ba 0f00 	cmp.w	sl, #0
 800c8ca:	db41      	blt.n	800c950 <_dtoa_r+0x230>
 800c8cc:	9b07      	ldr	r3, [sp, #28]
 800c8ce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800c8d2:	4453      	add	r3, sl
 800c8d4:	9307      	str	r3, [sp, #28]
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	9308      	str	r3, [sp, #32]
 800c8da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c8dc:	2b09      	cmp	r3, #9
 800c8de:	f200 808f 	bhi.w	800ca00 <_dtoa_r+0x2e0>
 800c8e2:	2b05      	cmp	r3, #5
 800c8e4:	bfc4      	itt	gt
 800c8e6:	3b04      	subgt	r3, #4
 800c8e8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800c8ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c8ec:	bfc8      	it	gt
 800c8ee:	2500      	movgt	r5, #0
 800c8f0:	f1a3 0302 	sub.w	r3, r3, #2
 800c8f4:	bfd8      	it	le
 800c8f6:	2501      	movle	r5, #1
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	f200 808d 	bhi.w	800ca18 <_dtoa_r+0x2f8>
 800c8fe:	e8df f003 	tbb	[pc, r3]
 800c902:	7d7b      	.short	0x7d7b
 800c904:	6f2f      	.short	0x6f2f
 800c906:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c90a:	441d      	add	r5, r3
 800c90c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c910:	2820      	cmp	r0, #32
 800c912:	dd13      	ble.n	800c93c <_dtoa_r+0x21c>
 800c914:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c918:	9b02      	ldr	r3, [sp, #8]
 800c91a:	fa08 f800 	lsl.w	r8, r8, r0
 800c91e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c922:	fa23 f000 	lsr.w	r0, r3, r0
 800c926:	ea48 0000 	orr.w	r0, r8, r0
 800c92a:	f7f3 fdc7 	bl	80004bc <__aeabi_ui2d>
 800c92e:	2301      	movs	r3, #1
 800c930:	4680      	mov	r8, r0
 800c932:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800c936:	3d01      	subs	r5, #1
 800c938:	9310      	str	r3, [sp, #64]	; 0x40
 800c93a:	e771      	b.n	800c820 <_dtoa_r+0x100>
 800c93c:	9b02      	ldr	r3, [sp, #8]
 800c93e:	f1c0 0020 	rsb	r0, r0, #32
 800c942:	fa03 f000 	lsl.w	r0, r3, r0
 800c946:	e7f0      	b.n	800c92a <_dtoa_r+0x20a>
 800c948:	2301      	movs	r3, #1
 800c94a:	e7b0      	b.n	800c8ae <_dtoa_r+0x18e>
 800c94c:	900d      	str	r0, [sp, #52]	; 0x34
 800c94e:	e7af      	b.n	800c8b0 <_dtoa_r+0x190>
 800c950:	f1ca 0300 	rsb	r3, sl, #0
 800c954:	9308      	str	r3, [sp, #32]
 800c956:	2300      	movs	r3, #0
 800c958:	eba9 090a 	sub.w	r9, r9, sl
 800c95c:	930c      	str	r3, [sp, #48]	; 0x30
 800c95e:	e7bc      	b.n	800c8da <_dtoa_r+0x1ba>
 800c960:	2301      	movs	r3, #1
 800c962:	9309      	str	r3, [sp, #36]	; 0x24
 800c964:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c966:	2b00      	cmp	r3, #0
 800c968:	dd74      	ble.n	800ca54 <_dtoa_r+0x334>
 800c96a:	4698      	mov	r8, r3
 800c96c:	9304      	str	r3, [sp, #16]
 800c96e:	2200      	movs	r2, #0
 800c970:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c972:	6072      	str	r2, [r6, #4]
 800c974:	2204      	movs	r2, #4
 800c976:	f102 0014 	add.w	r0, r2, #20
 800c97a:	4298      	cmp	r0, r3
 800c97c:	6871      	ldr	r1, [r6, #4]
 800c97e:	d96e      	bls.n	800ca5e <_dtoa_r+0x33e>
 800c980:	4620      	mov	r0, r4
 800c982:	f001 f9ce 	bl	800dd22 <_Balloc>
 800c986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c988:	6030      	str	r0, [r6, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f1b8 0f0e 	cmp.w	r8, #14
 800c990:	9306      	str	r3, [sp, #24]
 800c992:	f200 80ed 	bhi.w	800cb70 <_dtoa_r+0x450>
 800c996:	2d00      	cmp	r5, #0
 800c998:	f000 80ea 	beq.w	800cb70 <_dtoa_r+0x450>
 800c99c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9a0:	f1ba 0f00 	cmp.w	sl, #0
 800c9a4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c9a8:	dd77      	ble.n	800ca9a <_dtoa_r+0x37a>
 800c9aa:	4a28      	ldr	r2, [pc, #160]	; (800ca4c <_dtoa_r+0x32c>)
 800c9ac:	f00a 030f 	and.w	r3, sl, #15
 800c9b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c9b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9b8:	06f0      	lsls	r0, r6, #27
 800c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c9c2:	d568      	bpl.n	800ca96 <_dtoa_r+0x376>
 800c9c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c9c8:	4b21      	ldr	r3, [pc, #132]	; (800ca50 <_dtoa_r+0x330>)
 800c9ca:	2503      	movs	r5, #3
 800c9cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9d0:	f7f3 ff18 	bl	8000804 <__aeabi_ddiv>
 800c9d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9d8:	f006 060f 	and.w	r6, r6, #15
 800c9dc:	4f1c      	ldr	r7, [pc, #112]	; (800ca50 <_dtoa_r+0x330>)
 800c9de:	e04f      	b.n	800ca80 <_dtoa_r+0x360>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c9e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c9e6:	4453      	add	r3, sl
 800c9e8:	f103 0801 	add.w	r8, r3, #1
 800c9ec:	9304      	str	r3, [sp, #16]
 800c9ee:	4643      	mov	r3, r8
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	bfb8      	it	lt
 800c9f4:	2301      	movlt	r3, #1
 800c9f6:	e7ba      	b.n	800c96e <_dtoa_r+0x24e>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	e7b2      	b.n	800c962 <_dtoa_r+0x242>
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e7f0      	b.n	800c9e2 <_dtoa_r+0x2c2>
 800ca00:	2501      	movs	r5, #1
 800ca02:	2300      	movs	r3, #0
 800ca04:	9509      	str	r5, [sp, #36]	; 0x24
 800ca06:	931e      	str	r3, [sp, #120]	; 0x78
 800ca08:	f04f 33ff 	mov.w	r3, #4294967295
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	9304      	str	r3, [sp, #16]
 800ca10:	4698      	mov	r8, r3
 800ca12:	2312      	movs	r3, #18
 800ca14:	921f      	str	r2, [sp, #124]	; 0x7c
 800ca16:	e7aa      	b.n	800c96e <_dtoa_r+0x24e>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1c:	e7f4      	b.n	800ca08 <_dtoa_r+0x2e8>
 800ca1e:	bf00      	nop
 800ca20:	636f4361 	.word	0x636f4361
 800ca24:	3fd287a7 	.word	0x3fd287a7
 800ca28:	8b60c8b3 	.word	0x8b60c8b3
 800ca2c:	3fc68a28 	.word	0x3fc68a28
 800ca30:	509f79fb 	.word	0x509f79fb
 800ca34:	3fd34413 	.word	0x3fd34413
 800ca38:	7ff00000 	.word	0x7ff00000
 800ca3c:	0800ffb9 	.word	0x0800ffb9
 800ca40:	0800ffb0 	.word	0x0800ffb0
 800ca44:	0800ff31 	.word	0x0800ff31
 800ca48:	3ff80000 	.word	0x3ff80000
 800ca4c:	08010058 	.word	0x08010058
 800ca50:	08010030 	.word	0x08010030
 800ca54:	2301      	movs	r3, #1
 800ca56:	9304      	str	r3, [sp, #16]
 800ca58:	4698      	mov	r8, r3
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	e7da      	b.n	800ca14 <_dtoa_r+0x2f4>
 800ca5e:	3101      	adds	r1, #1
 800ca60:	6071      	str	r1, [r6, #4]
 800ca62:	0052      	lsls	r2, r2, #1
 800ca64:	e787      	b.n	800c976 <_dtoa_r+0x256>
 800ca66:	07f1      	lsls	r1, r6, #31
 800ca68:	d508      	bpl.n	800ca7c <_dtoa_r+0x35c>
 800ca6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ca6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca72:	f7f3 fd9d 	bl	80005b0 <__aeabi_dmul>
 800ca76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ca7a:	3501      	adds	r5, #1
 800ca7c:	1076      	asrs	r6, r6, #1
 800ca7e:	3708      	adds	r7, #8
 800ca80:	2e00      	cmp	r6, #0
 800ca82:	d1f0      	bne.n	800ca66 <_dtoa_r+0x346>
 800ca84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ca88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca8c:	f7f3 feba 	bl	8000804 <__aeabi_ddiv>
 800ca90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca94:	e01b      	b.n	800cace <_dtoa_r+0x3ae>
 800ca96:	2502      	movs	r5, #2
 800ca98:	e7a0      	b.n	800c9dc <_dtoa_r+0x2bc>
 800ca9a:	f000 80a4 	beq.w	800cbe6 <_dtoa_r+0x4c6>
 800ca9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800caa2:	f1ca 0600 	rsb	r6, sl, #0
 800caa6:	4ba0      	ldr	r3, [pc, #640]	; (800cd28 <_dtoa_r+0x608>)
 800caa8:	f006 020f 	and.w	r2, r6, #15
 800caac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f7f3 fd7c 	bl	80005b0 <__aeabi_dmul>
 800cab8:	2502      	movs	r5, #2
 800caba:	2300      	movs	r3, #0
 800cabc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cac0:	4f9a      	ldr	r7, [pc, #616]	; (800cd2c <_dtoa_r+0x60c>)
 800cac2:	1136      	asrs	r6, r6, #4
 800cac4:	2e00      	cmp	r6, #0
 800cac6:	f040 8083 	bne.w	800cbd0 <_dtoa_r+0x4b0>
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1e0      	bne.n	800ca90 <_dtoa_r+0x370>
 800cace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f000 808a 	beq.w	800cbea <_dtoa_r+0x4ca>
 800cad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cada:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cae2:	2200      	movs	r2, #0
 800cae4:	4b92      	ldr	r3, [pc, #584]	; (800cd30 <_dtoa_r+0x610>)
 800cae6:	f7f3 ffd5 	bl	8000a94 <__aeabi_dcmplt>
 800caea:	2800      	cmp	r0, #0
 800caec:	d07d      	beq.n	800cbea <_dtoa_r+0x4ca>
 800caee:	f1b8 0f00 	cmp.w	r8, #0
 800caf2:	d07a      	beq.n	800cbea <_dtoa_r+0x4ca>
 800caf4:	9b04      	ldr	r3, [sp, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	dd36      	ble.n	800cb68 <_dtoa_r+0x448>
 800cafa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cafe:	2200      	movs	r2, #0
 800cb00:	4b8c      	ldr	r3, [pc, #560]	; (800cd34 <_dtoa_r+0x614>)
 800cb02:	f7f3 fd55 	bl	80005b0 <__aeabi_dmul>
 800cb06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb0a:	9e04      	ldr	r6, [sp, #16]
 800cb0c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800cb10:	3501      	adds	r5, #1
 800cb12:	4628      	mov	r0, r5
 800cb14:	f7f3 fce2 	bl	80004dc <__aeabi_i2d>
 800cb18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb1c:	f7f3 fd48 	bl	80005b0 <__aeabi_dmul>
 800cb20:	2200      	movs	r2, #0
 800cb22:	4b85      	ldr	r3, [pc, #532]	; (800cd38 <_dtoa_r+0x618>)
 800cb24:	f7f3 fb8e 	bl	8000244 <__adddf3>
 800cb28:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800cb2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cb30:	950b      	str	r5, [sp, #44]	; 0x2c
 800cb32:	2e00      	cmp	r6, #0
 800cb34:	d15c      	bne.n	800cbf0 <_dtoa_r+0x4d0>
 800cb36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	4b7f      	ldr	r3, [pc, #508]	; (800cd3c <_dtoa_r+0x61c>)
 800cb3e:	f7f3 fb7f 	bl	8000240 <__aeabi_dsub>
 800cb42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb44:	462b      	mov	r3, r5
 800cb46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb4a:	f7f3 ffc1 	bl	8000ad0 <__aeabi_dcmpgt>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f040 8281 	bne.w	800d056 <_dtoa_r+0x936>
 800cb54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb5a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cb5e:	f7f3 ff99 	bl	8000a94 <__aeabi_dcmplt>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	f040 8275 	bne.w	800d052 <_dtoa_r+0x932>
 800cb68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cb6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f2c0 814b 	blt.w	800ce0e <_dtoa_r+0x6ee>
 800cb78:	f1ba 0f0e 	cmp.w	sl, #14
 800cb7c:	f300 8147 	bgt.w	800ce0e <_dtoa_r+0x6ee>
 800cb80:	4b69      	ldr	r3, [pc, #420]	; (800cd28 <_dtoa_r+0x608>)
 800cb82:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cb8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f280 80d7 	bge.w	800cd44 <_dtoa_r+0x624>
 800cb96:	f1b8 0f00 	cmp.w	r8, #0
 800cb9a:	f300 80d3 	bgt.w	800cd44 <_dtoa_r+0x624>
 800cb9e:	f040 8257 	bne.w	800d050 <_dtoa_r+0x930>
 800cba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cba6:	2200      	movs	r2, #0
 800cba8:	4b64      	ldr	r3, [pc, #400]	; (800cd3c <_dtoa_r+0x61c>)
 800cbaa:	f7f3 fd01 	bl	80005b0 <__aeabi_dmul>
 800cbae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbb2:	f7f3 ff83 	bl	8000abc <__aeabi_dcmpge>
 800cbb6:	4646      	mov	r6, r8
 800cbb8:	4647      	mov	r7, r8
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	f040 822d 	bne.w	800d01a <_dtoa_r+0x8fa>
 800cbc0:	9b06      	ldr	r3, [sp, #24]
 800cbc2:	9a06      	ldr	r2, [sp, #24]
 800cbc4:	1c5d      	adds	r5, r3, #1
 800cbc6:	2331      	movs	r3, #49	; 0x31
 800cbc8:	f10a 0a01 	add.w	sl, sl, #1
 800cbcc:	7013      	strb	r3, [r2, #0]
 800cbce:	e228      	b.n	800d022 <_dtoa_r+0x902>
 800cbd0:	07f2      	lsls	r2, r6, #31
 800cbd2:	d505      	bpl.n	800cbe0 <_dtoa_r+0x4c0>
 800cbd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbd8:	f7f3 fcea 	bl	80005b0 <__aeabi_dmul>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	3501      	adds	r5, #1
 800cbe0:	1076      	asrs	r6, r6, #1
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	e76e      	b.n	800cac4 <_dtoa_r+0x3a4>
 800cbe6:	2502      	movs	r5, #2
 800cbe8:	e771      	b.n	800cace <_dtoa_r+0x3ae>
 800cbea:	4657      	mov	r7, sl
 800cbec:	4646      	mov	r6, r8
 800cbee:	e790      	b.n	800cb12 <_dtoa_r+0x3f2>
 800cbf0:	4b4d      	ldr	r3, [pc, #308]	; (800cd28 <_dtoa_r+0x608>)
 800cbf2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cbf6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d048      	beq.n	800cc92 <_dtoa_r+0x572>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	2000      	movs	r0, #0
 800cc06:	494e      	ldr	r1, [pc, #312]	; (800cd40 <_dtoa_r+0x620>)
 800cc08:	f7f3 fdfc 	bl	8000804 <__aeabi_ddiv>
 800cc0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc10:	f7f3 fb16 	bl	8000240 <__aeabi_dsub>
 800cc14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cc18:	9d06      	ldr	r5, [sp, #24]
 800cc1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc1e:	f7f3 ff77 	bl	8000b10 <__aeabi_d2iz>
 800cc22:	9011      	str	r0, [sp, #68]	; 0x44
 800cc24:	f7f3 fc5a 	bl	80004dc <__aeabi_i2d>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc30:	f7f3 fb06 	bl	8000240 <__aeabi_dsub>
 800cc34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc3a:	3330      	adds	r3, #48	; 0x30
 800cc3c:	f805 3b01 	strb.w	r3, [r5], #1
 800cc40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc44:	f7f3 ff26 	bl	8000a94 <__aeabi_dcmplt>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d163      	bne.n	800cd14 <_dtoa_r+0x5f4>
 800cc4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc50:	2000      	movs	r0, #0
 800cc52:	4937      	ldr	r1, [pc, #220]	; (800cd30 <_dtoa_r+0x610>)
 800cc54:	f7f3 faf4 	bl	8000240 <__aeabi_dsub>
 800cc58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc5c:	f7f3 ff1a 	bl	8000a94 <__aeabi_dcmplt>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	f040 80b5 	bne.w	800cdd0 <_dtoa_r+0x6b0>
 800cc66:	9b06      	ldr	r3, [sp, #24]
 800cc68:	1aeb      	subs	r3, r5, r3
 800cc6a:	429e      	cmp	r6, r3
 800cc6c:	f77f af7c 	ble.w	800cb68 <_dtoa_r+0x448>
 800cc70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cc74:	2200      	movs	r2, #0
 800cc76:	4b2f      	ldr	r3, [pc, #188]	; (800cd34 <_dtoa_r+0x614>)
 800cc78:	f7f3 fc9a 	bl	80005b0 <__aeabi_dmul>
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cc82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc86:	4b2b      	ldr	r3, [pc, #172]	; (800cd34 <_dtoa_r+0x614>)
 800cc88:	f7f3 fc92 	bl	80005b0 <__aeabi_dmul>
 800cc8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc90:	e7c3      	b.n	800cc1a <_dtoa_r+0x4fa>
 800cc92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc96:	f7f3 fc8b 	bl	80005b0 <__aeabi_dmul>
 800cc9a:	9b06      	ldr	r3, [sp, #24]
 800cc9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cca0:	199d      	adds	r5, r3, r6
 800cca2:	461e      	mov	r6, r3
 800cca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cca8:	f7f3 ff32 	bl	8000b10 <__aeabi_d2iz>
 800ccac:	9011      	str	r0, [sp, #68]	; 0x44
 800ccae:	f7f3 fc15 	bl	80004dc <__aeabi_i2d>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccba:	f7f3 fac1 	bl	8000240 <__aeabi_dsub>
 800ccbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccc4:	3330      	adds	r3, #48	; 0x30
 800ccc6:	f806 3b01 	strb.w	r3, [r6], #1
 800ccca:	42ae      	cmp	r6, r5
 800cccc:	f04f 0200 	mov.w	r2, #0
 800ccd0:	d124      	bne.n	800cd1c <_dtoa_r+0x5fc>
 800ccd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ccd6:	4b1a      	ldr	r3, [pc, #104]	; (800cd40 <_dtoa_r+0x620>)
 800ccd8:	f7f3 fab4 	bl	8000244 <__adddf3>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cce4:	f7f3 fef4 	bl	8000ad0 <__aeabi_dcmpgt>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d171      	bne.n	800cdd0 <_dtoa_r+0x6b0>
 800ccec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	4913      	ldr	r1, [pc, #76]	; (800cd40 <_dtoa_r+0x620>)
 800ccf4:	f7f3 faa4 	bl	8000240 <__aeabi_dsub>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd00:	f7f3 fec8 	bl	8000a94 <__aeabi_dcmplt>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	f43f af2f 	beq.w	800cb68 <_dtoa_r+0x448>
 800cd0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd0e:	1e6a      	subs	r2, r5, #1
 800cd10:	2b30      	cmp	r3, #48	; 0x30
 800cd12:	d001      	beq.n	800cd18 <_dtoa_r+0x5f8>
 800cd14:	46ba      	mov	sl, r7
 800cd16:	e04a      	b.n	800cdae <_dtoa_r+0x68e>
 800cd18:	4615      	mov	r5, r2
 800cd1a:	e7f6      	b.n	800cd0a <_dtoa_r+0x5ea>
 800cd1c:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <_dtoa_r+0x614>)
 800cd1e:	f7f3 fc47 	bl	80005b0 <__aeabi_dmul>
 800cd22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd26:	e7bd      	b.n	800cca4 <_dtoa_r+0x584>
 800cd28:	08010058 	.word	0x08010058
 800cd2c:	08010030 	.word	0x08010030
 800cd30:	3ff00000 	.word	0x3ff00000
 800cd34:	40240000 	.word	0x40240000
 800cd38:	401c0000 	.word	0x401c0000
 800cd3c:	40140000 	.word	0x40140000
 800cd40:	3fe00000 	.word	0x3fe00000
 800cd44:	9d06      	ldr	r5, [sp, #24]
 800cd46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd4e:	4630      	mov	r0, r6
 800cd50:	4639      	mov	r1, r7
 800cd52:	f7f3 fd57 	bl	8000804 <__aeabi_ddiv>
 800cd56:	f7f3 fedb 	bl	8000b10 <__aeabi_d2iz>
 800cd5a:	4681      	mov	r9, r0
 800cd5c:	f7f3 fbbe 	bl	80004dc <__aeabi_i2d>
 800cd60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd64:	f7f3 fc24 	bl	80005b0 <__aeabi_dmul>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4630      	mov	r0, r6
 800cd6e:	4639      	mov	r1, r7
 800cd70:	f7f3 fa66 	bl	8000240 <__aeabi_dsub>
 800cd74:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800cd78:	f805 6b01 	strb.w	r6, [r5], #1
 800cd7c:	9e06      	ldr	r6, [sp, #24]
 800cd7e:	4602      	mov	r2, r0
 800cd80:	1bae      	subs	r6, r5, r6
 800cd82:	45b0      	cmp	r8, r6
 800cd84:	460b      	mov	r3, r1
 800cd86:	d135      	bne.n	800cdf4 <_dtoa_r+0x6d4>
 800cd88:	f7f3 fa5c 	bl	8000244 <__adddf3>
 800cd8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd90:	4606      	mov	r6, r0
 800cd92:	460f      	mov	r7, r1
 800cd94:	f7f3 fe9c 	bl	8000ad0 <__aeabi_dcmpgt>
 800cd98:	b9c8      	cbnz	r0, 800cdce <_dtoa_r+0x6ae>
 800cd9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd9e:	4630      	mov	r0, r6
 800cda0:	4639      	mov	r1, r7
 800cda2:	f7f3 fe6d 	bl	8000a80 <__aeabi_dcmpeq>
 800cda6:	b110      	cbz	r0, 800cdae <_dtoa_r+0x68e>
 800cda8:	f019 0f01 	tst.w	r9, #1
 800cdac:	d10f      	bne.n	800cdce <_dtoa_r+0x6ae>
 800cdae:	4659      	mov	r1, fp
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f000 ffea 	bl	800dd8a <_Bfree>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cdba:	702b      	strb	r3, [r5, #0]
 800cdbc:	f10a 0301 	add.w	r3, sl, #1
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f43f acf3 	beq.w	800c7b0 <_dtoa_r+0x90>
 800cdca:	601d      	str	r5, [r3, #0]
 800cdcc:	e4f0      	b.n	800c7b0 <_dtoa_r+0x90>
 800cdce:	4657      	mov	r7, sl
 800cdd0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cdd4:	1e6b      	subs	r3, r5, #1
 800cdd6:	2a39      	cmp	r2, #57	; 0x39
 800cdd8:	d106      	bne.n	800cde8 <_dtoa_r+0x6c8>
 800cdda:	9a06      	ldr	r2, [sp, #24]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d107      	bne.n	800cdf0 <_dtoa_r+0x6d0>
 800cde0:	2330      	movs	r3, #48	; 0x30
 800cde2:	7013      	strb	r3, [r2, #0]
 800cde4:	4613      	mov	r3, r2
 800cde6:	3701      	adds	r7, #1
 800cde8:	781a      	ldrb	r2, [r3, #0]
 800cdea:	3201      	adds	r2, #1
 800cdec:	701a      	strb	r2, [r3, #0]
 800cdee:	e791      	b.n	800cd14 <_dtoa_r+0x5f4>
 800cdf0:	461d      	mov	r5, r3
 800cdf2:	e7ed      	b.n	800cdd0 <_dtoa_r+0x6b0>
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4b99      	ldr	r3, [pc, #612]	; (800d05c <_dtoa_r+0x93c>)
 800cdf8:	f7f3 fbda 	bl	80005b0 <__aeabi_dmul>
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2300      	movs	r3, #0
 800ce00:	4606      	mov	r6, r0
 800ce02:	460f      	mov	r7, r1
 800ce04:	f7f3 fe3c 	bl	8000a80 <__aeabi_dcmpeq>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d09e      	beq.n	800cd4a <_dtoa_r+0x62a>
 800ce0c:	e7cf      	b.n	800cdae <_dtoa_r+0x68e>
 800ce0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce10:	2a00      	cmp	r2, #0
 800ce12:	f000 8088 	beq.w	800cf26 <_dtoa_r+0x806>
 800ce16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ce18:	2a01      	cmp	r2, #1
 800ce1a:	dc6d      	bgt.n	800cef8 <_dtoa_r+0x7d8>
 800ce1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce1e:	2a00      	cmp	r2, #0
 800ce20:	d066      	beq.n	800cef0 <_dtoa_r+0x7d0>
 800ce22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce26:	464d      	mov	r5, r9
 800ce28:	9e08      	ldr	r6, [sp, #32]
 800ce2a:	9a07      	ldr	r2, [sp, #28]
 800ce2c:	2101      	movs	r1, #1
 800ce2e:	441a      	add	r2, r3
 800ce30:	4620      	mov	r0, r4
 800ce32:	4499      	add	r9, r3
 800ce34:	9207      	str	r2, [sp, #28]
 800ce36:	f001 f886 	bl	800df46 <__i2b>
 800ce3a:	4607      	mov	r7, r0
 800ce3c:	2d00      	cmp	r5, #0
 800ce3e:	dd0b      	ble.n	800ce58 <_dtoa_r+0x738>
 800ce40:	9b07      	ldr	r3, [sp, #28]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	dd08      	ble.n	800ce58 <_dtoa_r+0x738>
 800ce46:	42ab      	cmp	r3, r5
 800ce48:	bfa8      	it	ge
 800ce4a:	462b      	movge	r3, r5
 800ce4c:	9a07      	ldr	r2, [sp, #28]
 800ce4e:	eba9 0903 	sub.w	r9, r9, r3
 800ce52:	1aed      	subs	r5, r5, r3
 800ce54:	1ad3      	subs	r3, r2, r3
 800ce56:	9307      	str	r3, [sp, #28]
 800ce58:	9b08      	ldr	r3, [sp, #32]
 800ce5a:	b1eb      	cbz	r3, 800ce98 <_dtoa_r+0x778>
 800ce5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d065      	beq.n	800cf2e <_dtoa_r+0x80e>
 800ce62:	b18e      	cbz	r6, 800ce88 <_dtoa_r+0x768>
 800ce64:	4639      	mov	r1, r7
 800ce66:	4632      	mov	r2, r6
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f001 f90b 	bl	800e084 <__pow5mult>
 800ce6e:	465a      	mov	r2, fp
 800ce70:	4601      	mov	r1, r0
 800ce72:	4607      	mov	r7, r0
 800ce74:	4620      	mov	r0, r4
 800ce76:	f001 f86f 	bl	800df58 <__multiply>
 800ce7a:	4659      	mov	r1, fp
 800ce7c:	900a      	str	r0, [sp, #40]	; 0x28
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 ff83 	bl	800dd8a <_Bfree>
 800ce84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce86:	469b      	mov	fp, r3
 800ce88:	9b08      	ldr	r3, [sp, #32]
 800ce8a:	1b9a      	subs	r2, r3, r6
 800ce8c:	d004      	beq.n	800ce98 <_dtoa_r+0x778>
 800ce8e:	4659      	mov	r1, fp
 800ce90:	4620      	mov	r0, r4
 800ce92:	f001 f8f7 	bl	800e084 <__pow5mult>
 800ce96:	4683      	mov	fp, r0
 800ce98:	2101      	movs	r1, #1
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f001 f853 	bl	800df46 <__i2b>
 800cea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cea2:	4606      	mov	r6, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f000 81c6 	beq.w	800d236 <_dtoa_r+0xb16>
 800ceaa:	461a      	mov	r2, r3
 800ceac:	4601      	mov	r1, r0
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f001 f8e8 	bl	800e084 <__pow5mult>
 800ceb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	dc3e      	bgt.n	800cf3a <_dtoa_r+0x81a>
 800cebc:	9b02      	ldr	r3, [sp, #8]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d137      	bne.n	800cf32 <_dtoa_r+0x812>
 800cec2:	9b03      	ldr	r3, [sp, #12]
 800cec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d134      	bne.n	800cf36 <_dtoa_r+0x816>
 800cecc:	9b03      	ldr	r3, [sp, #12]
 800cece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ced2:	0d1b      	lsrs	r3, r3, #20
 800ced4:	051b      	lsls	r3, r3, #20
 800ced6:	b12b      	cbz	r3, 800cee4 <_dtoa_r+0x7c4>
 800ced8:	9b07      	ldr	r3, [sp, #28]
 800ceda:	f109 0901 	add.w	r9, r9, #1
 800cede:	3301      	adds	r3, #1
 800cee0:	9307      	str	r3, [sp, #28]
 800cee2:	2301      	movs	r3, #1
 800cee4:	9308      	str	r3, [sp, #32]
 800cee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d128      	bne.n	800cf3e <_dtoa_r+0x81e>
 800ceec:	2001      	movs	r0, #1
 800ceee:	e02e      	b.n	800cf4e <_dtoa_r+0x82e>
 800cef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cef2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cef6:	e796      	b.n	800ce26 <_dtoa_r+0x706>
 800cef8:	9b08      	ldr	r3, [sp, #32]
 800cefa:	f108 36ff 	add.w	r6, r8, #4294967295
 800cefe:	42b3      	cmp	r3, r6
 800cf00:	bfb7      	itett	lt
 800cf02:	9b08      	ldrlt	r3, [sp, #32]
 800cf04:	1b9e      	subge	r6, r3, r6
 800cf06:	1af2      	sublt	r2, r6, r3
 800cf08:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800cf0a:	bfbf      	itttt	lt
 800cf0c:	9608      	strlt	r6, [sp, #32]
 800cf0e:	189b      	addlt	r3, r3, r2
 800cf10:	930c      	strlt	r3, [sp, #48]	; 0x30
 800cf12:	2600      	movlt	r6, #0
 800cf14:	f1b8 0f00 	cmp.w	r8, #0
 800cf18:	bfb9      	ittee	lt
 800cf1a:	eba9 0508 	sublt.w	r5, r9, r8
 800cf1e:	2300      	movlt	r3, #0
 800cf20:	464d      	movge	r5, r9
 800cf22:	4643      	movge	r3, r8
 800cf24:	e781      	b.n	800ce2a <_dtoa_r+0x70a>
 800cf26:	9e08      	ldr	r6, [sp, #32]
 800cf28:	464d      	mov	r5, r9
 800cf2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cf2c:	e786      	b.n	800ce3c <_dtoa_r+0x71c>
 800cf2e:	9a08      	ldr	r2, [sp, #32]
 800cf30:	e7ad      	b.n	800ce8e <_dtoa_r+0x76e>
 800cf32:	2300      	movs	r3, #0
 800cf34:	e7d6      	b.n	800cee4 <_dtoa_r+0x7c4>
 800cf36:	9b02      	ldr	r3, [sp, #8]
 800cf38:	e7d4      	b.n	800cee4 <_dtoa_r+0x7c4>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	9308      	str	r3, [sp, #32]
 800cf3e:	6933      	ldr	r3, [r6, #16]
 800cf40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf44:	6918      	ldr	r0, [r3, #16]
 800cf46:	f000 ffb0 	bl	800deaa <__hi0bits>
 800cf4a:	f1c0 0020 	rsb	r0, r0, #32
 800cf4e:	9b07      	ldr	r3, [sp, #28]
 800cf50:	4418      	add	r0, r3
 800cf52:	f010 001f 	ands.w	r0, r0, #31
 800cf56:	d047      	beq.n	800cfe8 <_dtoa_r+0x8c8>
 800cf58:	f1c0 0320 	rsb	r3, r0, #32
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	dd3b      	ble.n	800cfd8 <_dtoa_r+0x8b8>
 800cf60:	9b07      	ldr	r3, [sp, #28]
 800cf62:	f1c0 001c 	rsb	r0, r0, #28
 800cf66:	4481      	add	r9, r0
 800cf68:	4405      	add	r5, r0
 800cf6a:	4403      	add	r3, r0
 800cf6c:	9307      	str	r3, [sp, #28]
 800cf6e:	f1b9 0f00 	cmp.w	r9, #0
 800cf72:	dd05      	ble.n	800cf80 <_dtoa_r+0x860>
 800cf74:	4659      	mov	r1, fp
 800cf76:	464a      	mov	r2, r9
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f001 f8d1 	bl	800e120 <__lshift>
 800cf7e:	4683      	mov	fp, r0
 800cf80:	9b07      	ldr	r3, [sp, #28]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dd05      	ble.n	800cf92 <_dtoa_r+0x872>
 800cf86:	4631      	mov	r1, r6
 800cf88:	461a      	mov	r2, r3
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f001 f8c8 	bl	800e120 <__lshift>
 800cf90:	4606      	mov	r6, r0
 800cf92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf94:	b353      	cbz	r3, 800cfec <_dtoa_r+0x8cc>
 800cf96:	4631      	mov	r1, r6
 800cf98:	4658      	mov	r0, fp
 800cf9a:	f001 f915 	bl	800e1c8 <__mcmp>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	da24      	bge.n	800cfec <_dtoa_r+0x8cc>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	4659      	mov	r1, fp
 800cfa6:	220a      	movs	r2, #10
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f000 ff05 	bl	800ddb8 <__multadd>
 800cfae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfb4:	4683      	mov	fp, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	f000 8144 	beq.w	800d244 <_dtoa_r+0xb24>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	220a      	movs	r2, #10
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f000 fef8 	bl	800ddb8 <__multadd>
 800cfc8:	9b04      	ldr	r3, [sp, #16]
 800cfca:	4607      	mov	r7, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	dc4d      	bgt.n	800d06c <_dtoa_r+0x94c>
 800cfd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	dd4a      	ble.n	800d06c <_dtoa_r+0x94c>
 800cfd6:	e011      	b.n	800cffc <_dtoa_r+0x8dc>
 800cfd8:	d0c9      	beq.n	800cf6e <_dtoa_r+0x84e>
 800cfda:	9a07      	ldr	r2, [sp, #28]
 800cfdc:	331c      	adds	r3, #28
 800cfde:	441a      	add	r2, r3
 800cfe0:	4499      	add	r9, r3
 800cfe2:	441d      	add	r5, r3
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	e7c1      	b.n	800cf6c <_dtoa_r+0x84c>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	e7f6      	b.n	800cfda <_dtoa_r+0x8ba>
 800cfec:	f1b8 0f00 	cmp.w	r8, #0
 800cff0:	dc36      	bgt.n	800d060 <_dtoa_r+0x940>
 800cff2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	dd33      	ble.n	800d060 <_dtoa_r+0x940>
 800cff8:	f8cd 8010 	str.w	r8, [sp, #16]
 800cffc:	9b04      	ldr	r3, [sp, #16]
 800cffe:	b963      	cbnz	r3, 800d01a <_dtoa_r+0x8fa>
 800d000:	4631      	mov	r1, r6
 800d002:	2205      	movs	r2, #5
 800d004:	4620      	mov	r0, r4
 800d006:	f000 fed7 	bl	800ddb8 <__multadd>
 800d00a:	4601      	mov	r1, r0
 800d00c:	4606      	mov	r6, r0
 800d00e:	4658      	mov	r0, fp
 800d010:	f001 f8da 	bl	800e1c8 <__mcmp>
 800d014:	2800      	cmp	r0, #0
 800d016:	f73f add3 	bgt.w	800cbc0 <_dtoa_r+0x4a0>
 800d01a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d01c:	9d06      	ldr	r5, [sp, #24]
 800d01e:	ea6f 0a03 	mvn.w	sl, r3
 800d022:	f04f 0900 	mov.w	r9, #0
 800d026:	4631      	mov	r1, r6
 800d028:	4620      	mov	r0, r4
 800d02a:	f000 feae 	bl	800dd8a <_Bfree>
 800d02e:	2f00      	cmp	r7, #0
 800d030:	f43f aebd 	beq.w	800cdae <_dtoa_r+0x68e>
 800d034:	f1b9 0f00 	cmp.w	r9, #0
 800d038:	d005      	beq.n	800d046 <_dtoa_r+0x926>
 800d03a:	45b9      	cmp	r9, r7
 800d03c:	d003      	beq.n	800d046 <_dtoa_r+0x926>
 800d03e:	4649      	mov	r1, r9
 800d040:	4620      	mov	r0, r4
 800d042:	f000 fea2 	bl	800dd8a <_Bfree>
 800d046:	4639      	mov	r1, r7
 800d048:	4620      	mov	r0, r4
 800d04a:	f000 fe9e 	bl	800dd8a <_Bfree>
 800d04e:	e6ae      	b.n	800cdae <_dtoa_r+0x68e>
 800d050:	2600      	movs	r6, #0
 800d052:	4637      	mov	r7, r6
 800d054:	e7e1      	b.n	800d01a <_dtoa_r+0x8fa>
 800d056:	46ba      	mov	sl, r7
 800d058:	4637      	mov	r7, r6
 800d05a:	e5b1      	b.n	800cbc0 <_dtoa_r+0x4a0>
 800d05c:	40240000 	.word	0x40240000
 800d060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d062:	f8cd 8010 	str.w	r8, [sp, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	f000 80f3 	beq.w	800d252 <_dtoa_r+0xb32>
 800d06c:	2d00      	cmp	r5, #0
 800d06e:	dd05      	ble.n	800d07c <_dtoa_r+0x95c>
 800d070:	4639      	mov	r1, r7
 800d072:	462a      	mov	r2, r5
 800d074:	4620      	mov	r0, r4
 800d076:	f001 f853 	bl	800e120 <__lshift>
 800d07a:	4607      	mov	r7, r0
 800d07c:	9b08      	ldr	r3, [sp, #32]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d04c      	beq.n	800d11c <_dtoa_r+0x9fc>
 800d082:	6879      	ldr	r1, [r7, #4]
 800d084:	4620      	mov	r0, r4
 800d086:	f000 fe4c 	bl	800dd22 <_Balloc>
 800d08a:	4605      	mov	r5, r0
 800d08c:	693a      	ldr	r2, [r7, #16]
 800d08e:	f107 010c 	add.w	r1, r7, #12
 800d092:	3202      	adds	r2, #2
 800d094:	0092      	lsls	r2, r2, #2
 800d096:	300c      	adds	r0, #12
 800d098:	f000 fe38 	bl	800dd0c <memcpy>
 800d09c:	2201      	movs	r2, #1
 800d09e:	4629      	mov	r1, r5
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f001 f83d 	bl	800e120 <__lshift>
 800d0a6:	46b9      	mov	r9, r7
 800d0a8:	4607      	mov	r7, r0
 800d0aa:	9b06      	ldr	r3, [sp, #24]
 800d0ac:	9307      	str	r3, [sp, #28]
 800d0ae:	9b02      	ldr	r3, [sp, #8]
 800d0b0:	f003 0301 	and.w	r3, r3, #1
 800d0b4:	9308      	str	r3, [sp, #32]
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	4658      	mov	r0, fp
 800d0ba:	f7ff faa3 	bl	800c604 <quorem>
 800d0be:	4649      	mov	r1, r9
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d0c6:	4658      	mov	r0, fp
 800d0c8:	f001 f87e 	bl	800e1c8 <__mcmp>
 800d0cc:	463a      	mov	r2, r7
 800d0ce:	9002      	str	r0, [sp, #8]
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f001 f892 	bl	800e1fc <__mdiff>
 800d0d8:	68c3      	ldr	r3, [r0, #12]
 800d0da:	4602      	mov	r2, r0
 800d0dc:	bb03      	cbnz	r3, 800d120 <_dtoa_r+0xa00>
 800d0de:	4601      	mov	r1, r0
 800d0e0:	9009      	str	r0, [sp, #36]	; 0x24
 800d0e2:	4658      	mov	r0, fp
 800d0e4:	f001 f870 	bl	800e1c8 <__mcmp>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0ec:	4611      	mov	r1, r2
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f2:	f000 fe4a 	bl	800dd8a <_Bfree>
 800d0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f8:	b9a3      	cbnz	r3, 800d124 <_dtoa_r+0xa04>
 800d0fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d0fc:	b992      	cbnz	r2, 800d124 <_dtoa_r+0xa04>
 800d0fe:	9a08      	ldr	r2, [sp, #32]
 800d100:	b982      	cbnz	r2, 800d124 <_dtoa_r+0xa04>
 800d102:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d106:	d029      	beq.n	800d15c <_dtoa_r+0xa3c>
 800d108:	9b02      	ldr	r3, [sp, #8]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	dd01      	ble.n	800d112 <_dtoa_r+0x9f2>
 800d10e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d112:	9b07      	ldr	r3, [sp, #28]
 800d114:	1c5d      	adds	r5, r3, #1
 800d116:	f883 8000 	strb.w	r8, [r3]
 800d11a:	e784      	b.n	800d026 <_dtoa_r+0x906>
 800d11c:	4638      	mov	r0, r7
 800d11e:	e7c2      	b.n	800d0a6 <_dtoa_r+0x986>
 800d120:	2301      	movs	r3, #1
 800d122:	e7e3      	b.n	800d0ec <_dtoa_r+0x9cc>
 800d124:	9a02      	ldr	r2, [sp, #8]
 800d126:	2a00      	cmp	r2, #0
 800d128:	db04      	blt.n	800d134 <_dtoa_r+0xa14>
 800d12a:	d123      	bne.n	800d174 <_dtoa_r+0xa54>
 800d12c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d12e:	bb0a      	cbnz	r2, 800d174 <_dtoa_r+0xa54>
 800d130:	9a08      	ldr	r2, [sp, #32]
 800d132:	b9fa      	cbnz	r2, 800d174 <_dtoa_r+0xa54>
 800d134:	2b00      	cmp	r3, #0
 800d136:	ddec      	ble.n	800d112 <_dtoa_r+0x9f2>
 800d138:	4659      	mov	r1, fp
 800d13a:	2201      	movs	r2, #1
 800d13c:	4620      	mov	r0, r4
 800d13e:	f000 ffef 	bl	800e120 <__lshift>
 800d142:	4631      	mov	r1, r6
 800d144:	4683      	mov	fp, r0
 800d146:	f001 f83f 	bl	800e1c8 <__mcmp>
 800d14a:	2800      	cmp	r0, #0
 800d14c:	dc03      	bgt.n	800d156 <_dtoa_r+0xa36>
 800d14e:	d1e0      	bne.n	800d112 <_dtoa_r+0x9f2>
 800d150:	f018 0f01 	tst.w	r8, #1
 800d154:	d0dd      	beq.n	800d112 <_dtoa_r+0x9f2>
 800d156:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d15a:	d1d8      	bne.n	800d10e <_dtoa_r+0x9ee>
 800d15c:	9b07      	ldr	r3, [sp, #28]
 800d15e:	9a07      	ldr	r2, [sp, #28]
 800d160:	1c5d      	adds	r5, r3, #1
 800d162:	2339      	movs	r3, #57	; 0x39
 800d164:	7013      	strb	r3, [r2, #0]
 800d166:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d16a:	1e6a      	subs	r2, r5, #1
 800d16c:	2b39      	cmp	r3, #57	; 0x39
 800d16e:	d04d      	beq.n	800d20c <_dtoa_r+0xaec>
 800d170:	3301      	adds	r3, #1
 800d172:	e052      	b.n	800d21a <_dtoa_r+0xafa>
 800d174:	9a07      	ldr	r2, [sp, #28]
 800d176:	2b00      	cmp	r3, #0
 800d178:	f102 0501 	add.w	r5, r2, #1
 800d17c:	dd06      	ble.n	800d18c <_dtoa_r+0xa6c>
 800d17e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d182:	d0eb      	beq.n	800d15c <_dtoa_r+0xa3c>
 800d184:	f108 0801 	add.w	r8, r8, #1
 800d188:	9b07      	ldr	r3, [sp, #28]
 800d18a:	e7c4      	b.n	800d116 <_dtoa_r+0x9f6>
 800d18c:	9b06      	ldr	r3, [sp, #24]
 800d18e:	9a04      	ldr	r2, [sp, #16]
 800d190:	1aeb      	subs	r3, r5, r3
 800d192:	4293      	cmp	r3, r2
 800d194:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d198:	d021      	beq.n	800d1de <_dtoa_r+0xabe>
 800d19a:	4659      	mov	r1, fp
 800d19c:	2300      	movs	r3, #0
 800d19e:	220a      	movs	r2, #10
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f000 fe09 	bl	800ddb8 <__multadd>
 800d1a6:	45b9      	cmp	r9, r7
 800d1a8:	4683      	mov	fp, r0
 800d1aa:	f04f 0300 	mov.w	r3, #0
 800d1ae:	f04f 020a 	mov.w	r2, #10
 800d1b2:	4649      	mov	r1, r9
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	d105      	bne.n	800d1c4 <_dtoa_r+0xaa4>
 800d1b8:	f000 fdfe 	bl	800ddb8 <__multadd>
 800d1bc:	4681      	mov	r9, r0
 800d1be:	4607      	mov	r7, r0
 800d1c0:	9507      	str	r5, [sp, #28]
 800d1c2:	e778      	b.n	800d0b6 <_dtoa_r+0x996>
 800d1c4:	f000 fdf8 	bl	800ddb8 <__multadd>
 800d1c8:	4639      	mov	r1, r7
 800d1ca:	4681      	mov	r9, r0
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	220a      	movs	r2, #10
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 fdf1 	bl	800ddb8 <__multadd>
 800d1d6:	4607      	mov	r7, r0
 800d1d8:	e7f2      	b.n	800d1c0 <_dtoa_r+0xaa0>
 800d1da:	f04f 0900 	mov.w	r9, #0
 800d1de:	4659      	mov	r1, fp
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 ff9c 	bl	800e120 <__lshift>
 800d1e8:	4631      	mov	r1, r6
 800d1ea:	4683      	mov	fp, r0
 800d1ec:	f000 ffec 	bl	800e1c8 <__mcmp>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	dcb8      	bgt.n	800d166 <_dtoa_r+0xa46>
 800d1f4:	d102      	bne.n	800d1fc <_dtoa_r+0xadc>
 800d1f6:	f018 0f01 	tst.w	r8, #1
 800d1fa:	d1b4      	bne.n	800d166 <_dtoa_r+0xa46>
 800d1fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d200:	1e6a      	subs	r2, r5, #1
 800d202:	2b30      	cmp	r3, #48	; 0x30
 800d204:	f47f af0f 	bne.w	800d026 <_dtoa_r+0x906>
 800d208:	4615      	mov	r5, r2
 800d20a:	e7f7      	b.n	800d1fc <_dtoa_r+0xadc>
 800d20c:	9b06      	ldr	r3, [sp, #24]
 800d20e:	4293      	cmp	r3, r2
 800d210:	d105      	bne.n	800d21e <_dtoa_r+0xafe>
 800d212:	2331      	movs	r3, #49	; 0x31
 800d214:	9a06      	ldr	r2, [sp, #24]
 800d216:	f10a 0a01 	add.w	sl, sl, #1
 800d21a:	7013      	strb	r3, [r2, #0]
 800d21c:	e703      	b.n	800d026 <_dtoa_r+0x906>
 800d21e:	4615      	mov	r5, r2
 800d220:	e7a1      	b.n	800d166 <_dtoa_r+0xa46>
 800d222:	4b17      	ldr	r3, [pc, #92]	; (800d280 <_dtoa_r+0xb60>)
 800d224:	f7ff bae1 	b.w	800c7ea <_dtoa_r+0xca>
 800d228:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f47f aabb 	bne.w	800c7a6 <_dtoa_r+0x86>
 800d230:	4b14      	ldr	r3, [pc, #80]	; (800d284 <_dtoa_r+0xb64>)
 800d232:	f7ff bada 	b.w	800c7ea <_dtoa_r+0xca>
 800d236:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d238:	2b01      	cmp	r3, #1
 800d23a:	f77f ae3f 	ble.w	800cebc <_dtoa_r+0x79c>
 800d23e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d240:	9308      	str	r3, [sp, #32]
 800d242:	e653      	b.n	800ceec <_dtoa_r+0x7cc>
 800d244:	9b04      	ldr	r3, [sp, #16]
 800d246:	2b00      	cmp	r3, #0
 800d248:	dc03      	bgt.n	800d252 <_dtoa_r+0xb32>
 800d24a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	f73f aed5 	bgt.w	800cffc <_dtoa_r+0x8dc>
 800d252:	9d06      	ldr	r5, [sp, #24]
 800d254:	4631      	mov	r1, r6
 800d256:	4658      	mov	r0, fp
 800d258:	f7ff f9d4 	bl	800c604 <quorem>
 800d25c:	9b06      	ldr	r3, [sp, #24]
 800d25e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d262:	f805 8b01 	strb.w	r8, [r5], #1
 800d266:	9a04      	ldr	r2, [sp, #16]
 800d268:	1aeb      	subs	r3, r5, r3
 800d26a:	429a      	cmp	r2, r3
 800d26c:	ddb5      	ble.n	800d1da <_dtoa_r+0xaba>
 800d26e:	4659      	mov	r1, fp
 800d270:	2300      	movs	r3, #0
 800d272:	220a      	movs	r2, #10
 800d274:	4620      	mov	r0, r4
 800d276:	f000 fd9f 	bl	800ddb8 <__multadd>
 800d27a:	4683      	mov	fp, r0
 800d27c:	e7ea      	b.n	800d254 <_dtoa_r+0xb34>
 800d27e:	bf00      	nop
 800d280:	0800ff30 	.word	0x0800ff30
 800d284:	0800ffb0 	.word	0x0800ffb0

0800d288 <__sflush_r>:
 800d288:	898a      	ldrh	r2, [r1, #12]
 800d28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d28e:	4605      	mov	r5, r0
 800d290:	0710      	lsls	r0, r2, #28
 800d292:	460c      	mov	r4, r1
 800d294:	d458      	bmi.n	800d348 <__sflush_r+0xc0>
 800d296:	684b      	ldr	r3, [r1, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	dc05      	bgt.n	800d2a8 <__sflush_r+0x20>
 800d29c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	dc02      	bgt.n	800d2a8 <__sflush_r+0x20>
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2aa:	2e00      	cmp	r6, #0
 800d2ac:	d0f9      	beq.n	800d2a2 <__sflush_r+0x1a>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d2b4:	682f      	ldr	r7, [r5, #0]
 800d2b6:	6a21      	ldr	r1, [r4, #32]
 800d2b8:	602b      	str	r3, [r5, #0]
 800d2ba:	d032      	beq.n	800d322 <__sflush_r+0x9a>
 800d2bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2be:	89a3      	ldrh	r3, [r4, #12]
 800d2c0:	075a      	lsls	r2, r3, #29
 800d2c2:	d505      	bpl.n	800d2d0 <__sflush_r+0x48>
 800d2c4:	6863      	ldr	r3, [r4, #4]
 800d2c6:	1ac0      	subs	r0, r0, r3
 800d2c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2ca:	b10b      	cbz	r3, 800d2d0 <__sflush_r+0x48>
 800d2cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2ce:	1ac0      	subs	r0, r0, r3
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2d6:	6a21      	ldr	r1, [r4, #32]
 800d2d8:	4628      	mov	r0, r5
 800d2da:	47b0      	blx	r6
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	89a3      	ldrh	r3, [r4, #12]
 800d2e0:	d106      	bne.n	800d2f0 <__sflush_r+0x68>
 800d2e2:	6829      	ldr	r1, [r5, #0]
 800d2e4:	291d      	cmp	r1, #29
 800d2e6:	d848      	bhi.n	800d37a <__sflush_r+0xf2>
 800d2e8:	4a29      	ldr	r2, [pc, #164]	; (800d390 <__sflush_r+0x108>)
 800d2ea:	40ca      	lsrs	r2, r1
 800d2ec:	07d6      	lsls	r6, r2, #31
 800d2ee:	d544      	bpl.n	800d37a <__sflush_r+0xf2>
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	6062      	str	r2, [r4, #4]
 800d2f4:	6922      	ldr	r2, [r4, #16]
 800d2f6:	04d9      	lsls	r1, r3, #19
 800d2f8:	6022      	str	r2, [r4, #0]
 800d2fa:	d504      	bpl.n	800d306 <__sflush_r+0x7e>
 800d2fc:	1c42      	adds	r2, r0, #1
 800d2fe:	d101      	bne.n	800d304 <__sflush_r+0x7c>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b903      	cbnz	r3, 800d306 <__sflush_r+0x7e>
 800d304:	6560      	str	r0, [r4, #84]	; 0x54
 800d306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d308:	602f      	str	r7, [r5, #0]
 800d30a:	2900      	cmp	r1, #0
 800d30c:	d0c9      	beq.n	800d2a2 <__sflush_r+0x1a>
 800d30e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d312:	4299      	cmp	r1, r3
 800d314:	d002      	beq.n	800d31c <__sflush_r+0x94>
 800d316:	4628      	mov	r0, r5
 800d318:	f001 f90a 	bl	800e530 <_free_r>
 800d31c:	2000      	movs	r0, #0
 800d31e:	6360      	str	r0, [r4, #52]	; 0x34
 800d320:	e7c0      	b.n	800d2a4 <__sflush_r+0x1c>
 800d322:	2301      	movs	r3, #1
 800d324:	4628      	mov	r0, r5
 800d326:	47b0      	blx	r6
 800d328:	1c41      	adds	r1, r0, #1
 800d32a:	d1c8      	bne.n	800d2be <__sflush_r+0x36>
 800d32c:	682b      	ldr	r3, [r5, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0c5      	beq.n	800d2be <__sflush_r+0x36>
 800d332:	2b1d      	cmp	r3, #29
 800d334:	d001      	beq.n	800d33a <__sflush_r+0xb2>
 800d336:	2b16      	cmp	r3, #22
 800d338:	d101      	bne.n	800d33e <__sflush_r+0xb6>
 800d33a:	602f      	str	r7, [r5, #0]
 800d33c:	e7b1      	b.n	800d2a2 <__sflush_r+0x1a>
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d344:	81a3      	strh	r3, [r4, #12]
 800d346:	e7ad      	b.n	800d2a4 <__sflush_r+0x1c>
 800d348:	690f      	ldr	r7, [r1, #16]
 800d34a:	2f00      	cmp	r7, #0
 800d34c:	d0a9      	beq.n	800d2a2 <__sflush_r+0x1a>
 800d34e:	0793      	lsls	r3, r2, #30
 800d350:	bf18      	it	ne
 800d352:	2300      	movne	r3, #0
 800d354:	680e      	ldr	r6, [r1, #0]
 800d356:	bf08      	it	eq
 800d358:	694b      	ldreq	r3, [r1, #20]
 800d35a:	eba6 0807 	sub.w	r8, r6, r7
 800d35e:	600f      	str	r7, [r1, #0]
 800d360:	608b      	str	r3, [r1, #8]
 800d362:	f1b8 0f00 	cmp.w	r8, #0
 800d366:	dd9c      	ble.n	800d2a2 <__sflush_r+0x1a>
 800d368:	4643      	mov	r3, r8
 800d36a:	463a      	mov	r2, r7
 800d36c:	6a21      	ldr	r1, [r4, #32]
 800d36e:	4628      	mov	r0, r5
 800d370:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d372:	47b0      	blx	r6
 800d374:	2800      	cmp	r0, #0
 800d376:	dc06      	bgt.n	800d386 <__sflush_r+0xfe>
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d37e:	81a3      	strh	r3, [r4, #12]
 800d380:	f04f 30ff 	mov.w	r0, #4294967295
 800d384:	e78e      	b.n	800d2a4 <__sflush_r+0x1c>
 800d386:	4407      	add	r7, r0
 800d388:	eba8 0800 	sub.w	r8, r8, r0
 800d38c:	e7e9      	b.n	800d362 <__sflush_r+0xda>
 800d38e:	bf00      	nop
 800d390:	20400001 	.word	0x20400001

0800d394 <_fflush_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	690b      	ldr	r3, [r1, #16]
 800d398:	4605      	mov	r5, r0
 800d39a:	460c      	mov	r4, r1
 800d39c:	b1db      	cbz	r3, 800d3d6 <_fflush_r+0x42>
 800d39e:	b118      	cbz	r0, 800d3a8 <_fflush_r+0x14>
 800d3a0:	6983      	ldr	r3, [r0, #24]
 800d3a2:	b90b      	cbnz	r3, 800d3a8 <_fflush_r+0x14>
 800d3a4:	f000 f860 	bl	800d468 <__sinit>
 800d3a8:	4b0c      	ldr	r3, [pc, #48]	; (800d3dc <_fflush_r+0x48>)
 800d3aa:	429c      	cmp	r4, r3
 800d3ac:	d109      	bne.n	800d3c2 <_fflush_r+0x2e>
 800d3ae:	686c      	ldr	r4, [r5, #4]
 800d3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3b4:	b17b      	cbz	r3, 800d3d6 <_fflush_r+0x42>
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3be:	f7ff bf63 	b.w	800d288 <__sflush_r>
 800d3c2:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <_fflush_r+0x4c>)
 800d3c4:	429c      	cmp	r4, r3
 800d3c6:	d101      	bne.n	800d3cc <_fflush_r+0x38>
 800d3c8:	68ac      	ldr	r4, [r5, #8]
 800d3ca:	e7f1      	b.n	800d3b0 <_fflush_r+0x1c>
 800d3cc:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <_fflush_r+0x50>)
 800d3ce:	429c      	cmp	r4, r3
 800d3d0:	bf08      	it	eq
 800d3d2:	68ec      	ldreq	r4, [r5, #12]
 800d3d4:	e7ec      	b.n	800d3b0 <_fflush_r+0x1c>
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	bd38      	pop	{r3, r4, r5, pc}
 800d3da:	bf00      	nop
 800d3dc:	0800ffe0 	.word	0x0800ffe0
 800d3e0:	08010000 	.word	0x08010000
 800d3e4:	0800ffc0 	.word	0x0800ffc0

0800d3e8 <std>:
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	b510      	push	{r4, lr}
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d3f2:	6083      	str	r3, [r0, #8]
 800d3f4:	8181      	strh	r1, [r0, #12]
 800d3f6:	6643      	str	r3, [r0, #100]	; 0x64
 800d3f8:	81c2      	strh	r2, [r0, #14]
 800d3fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3fe:	6183      	str	r3, [r0, #24]
 800d400:	4619      	mov	r1, r3
 800d402:	2208      	movs	r2, #8
 800d404:	305c      	adds	r0, #92	; 0x5c
 800d406:	f7fd fabe 	bl	800a986 <memset>
 800d40a:	4b05      	ldr	r3, [pc, #20]	; (800d420 <std+0x38>)
 800d40c:	6224      	str	r4, [r4, #32]
 800d40e:	6263      	str	r3, [r4, #36]	; 0x24
 800d410:	4b04      	ldr	r3, [pc, #16]	; (800d424 <std+0x3c>)
 800d412:	62a3      	str	r3, [r4, #40]	; 0x28
 800d414:	4b04      	ldr	r3, [pc, #16]	; (800d428 <std+0x40>)
 800d416:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d418:	4b04      	ldr	r3, [pc, #16]	; (800d42c <std+0x44>)
 800d41a:	6323      	str	r3, [r4, #48]	; 0x30
 800d41c:	bd10      	pop	{r4, pc}
 800d41e:	bf00      	nop
 800d420:	0800e941 	.word	0x0800e941
 800d424:	0800e963 	.word	0x0800e963
 800d428:	0800e99b 	.word	0x0800e99b
 800d42c:	0800e9bf 	.word	0x0800e9bf

0800d430 <_cleanup_r>:
 800d430:	4901      	ldr	r1, [pc, #4]	; (800d438 <_cleanup_r+0x8>)
 800d432:	f000 b885 	b.w	800d540 <_fwalk_reent>
 800d436:	bf00      	nop
 800d438:	0800d395 	.word	0x0800d395

0800d43c <__sfmoreglue>:
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	2568      	movs	r5, #104	; 0x68
 800d440:	1e4a      	subs	r2, r1, #1
 800d442:	4355      	muls	r5, r2
 800d444:	460e      	mov	r6, r1
 800d446:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d44a:	f001 f8bd 	bl	800e5c8 <_malloc_r>
 800d44e:	4604      	mov	r4, r0
 800d450:	b140      	cbz	r0, 800d464 <__sfmoreglue+0x28>
 800d452:	2100      	movs	r1, #0
 800d454:	e9c0 1600 	strd	r1, r6, [r0]
 800d458:	300c      	adds	r0, #12
 800d45a:	60a0      	str	r0, [r4, #8]
 800d45c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d460:	f7fd fa91 	bl	800a986 <memset>
 800d464:	4620      	mov	r0, r4
 800d466:	bd70      	pop	{r4, r5, r6, pc}

0800d468 <__sinit>:
 800d468:	6983      	ldr	r3, [r0, #24]
 800d46a:	b510      	push	{r4, lr}
 800d46c:	4604      	mov	r4, r0
 800d46e:	bb33      	cbnz	r3, 800d4be <__sinit+0x56>
 800d470:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d474:	6503      	str	r3, [r0, #80]	; 0x50
 800d476:	4b12      	ldr	r3, [pc, #72]	; (800d4c0 <__sinit+0x58>)
 800d478:	4a12      	ldr	r2, [pc, #72]	; (800d4c4 <__sinit+0x5c>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	6282      	str	r2, [r0, #40]	; 0x28
 800d47e:	4298      	cmp	r0, r3
 800d480:	bf04      	itt	eq
 800d482:	2301      	moveq	r3, #1
 800d484:	6183      	streq	r3, [r0, #24]
 800d486:	f000 f81f 	bl	800d4c8 <__sfp>
 800d48a:	6060      	str	r0, [r4, #4]
 800d48c:	4620      	mov	r0, r4
 800d48e:	f000 f81b 	bl	800d4c8 <__sfp>
 800d492:	60a0      	str	r0, [r4, #8]
 800d494:	4620      	mov	r0, r4
 800d496:	f000 f817 	bl	800d4c8 <__sfp>
 800d49a:	2200      	movs	r2, #0
 800d49c:	60e0      	str	r0, [r4, #12]
 800d49e:	2104      	movs	r1, #4
 800d4a0:	6860      	ldr	r0, [r4, #4]
 800d4a2:	f7ff ffa1 	bl	800d3e8 <std>
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	2109      	movs	r1, #9
 800d4aa:	68a0      	ldr	r0, [r4, #8]
 800d4ac:	f7ff ff9c 	bl	800d3e8 <std>
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	2112      	movs	r1, #18
 800d4b4:	68e0      	ldr	r0, [r4, #12]
 800d4b6:	f7ff ff97 	bl	800d3e8 <std>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	61a3      	str	r3, [r4, #24]
 800d4be:	bd10      	pop	{r4, pc}
 800d4c0:	0800ff1c 	.word	0x0800ff1c
 800d4c4:	0800d431 	.word	0x0800d431

0800d4c8 <__sfp>:
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	4b1b      	ldr	r3, [pc, #108]	; (800d538 <__sfp+0x70>)
 800d4cc:	4607      	mov	r7, r0
 800d4ce:	681e      	ldr	r6, [r3, #0]
 800d4d0:	69b3      	ldr	r3, [r6, #24]
 800d4d2:	b913      	cbnz	r3, 800d4da <__sfp+0x12>
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f7ff ffc7 	bl	800d468 <__sinit>
 800d4da:	3648      	adds	r6, #72	; 0x48
 800d4dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	d503      	bpl.n	800d4ec <__sfp+0x24>
 800d4e4:	6833      	ldr	r3, [r6, #0]
 800d4e6:	b133      	cbz	r3, 800d4f6 <__sfp+0x2e>
 800d4e8:	6836      	ldr	r6, [r6, #0]
 800d4ea:	e7f7      	b.n	800d4dc <__sfp+0x14>
 800d4ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4f0:	b16d      	cbz	r5, 800d50e <__sfp+0x46>
 800d4f2:	3468      	adds	r4, #104	; 0x68
 800d4f4:	e7f4      	b.n	800d4e0 <__sfp+0x18>
 800d4f6:	2104      	movs	r1, #4
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	f7ff ff9f 	bl	800d43c <__sfmoreglue>
 800d4fe:	6030      	str	r0, [r6, #0]
 800d500:	2800      	cmp	r0, #0
 800d502:	d1f1      	bne.n	800d4e8 <__sfp+0x20>
 800d504:	230c      	movs	r3, #12
 800d506:	4604      	mov	r4, r0
 800d508:	603b      	str	r3, [r7, #0]
 800d50a:	4620      	mov	r0, r4
 800d50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d50e:	4b0b      	ldr	r3, [pc, #44]	; (800d53c <__sfp+0x74>)
 800d510:	6665      	str	r5, [r4, #100]	; 0x64
 800d512:	e9c4 5500 	strd	r5, r5, [r4]
 800d516:	60a5      	str	r5, [r4, #8]
 800d518:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d51c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d520:	2208      	movs	r2, #8
 800d522:	4629      	mov	r1, r5
 800d524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d528:	f7fd fa2d 	bl	800a986 <memset>
 800d52c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d534:	e7e9      	b.n	800d50a <__sfp+0x42>
 800d536:	bf00      	nop
 800d538:	0800ff1c 	.word	0x0800ff1c
 800d53c:	ffff0001 	.word	0xffff0001

0800d540 <_fwalk_reent>:
 800d540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d544:	4680      	mov	r8, r0
 800d546:	4689      	mov	r9, r1
 800d548:	2600      	movs	r6, #0
 800d54a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d54e:	b914      	cbnz	r4, 800d556 <_fwalk_reent+0x16>
 800d550:	4630      	mov	r0, r6
 800d552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d556:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d55a:	3f01      	subs	r7, #1
 800d55c:	d501      	bpl.n	800d562 <_fwalk_reent+0x22>
 800d55e:	6824      	ldr	r4, [r4, #0]
 800d560:	e7f5      	b.n	800d54e <_fwalk_reent+0xe>
 800d562:	89ab      	ldrh	r3, [r5, #12]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d907      	bls.n	800d578 <_fwalk_reent+0x38>
 800d568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d56c:	3301      	adds	r3, #1
 800d56e:	d003      	beq.n	800d578 <_fwalk_reent+0x38>
 800d570:	4629      	mov	r1, r5
 800d572:	4640      	mov	r0, r8
 800d574:	47c8      	blx	r9
 800d576:	4306      	orrs	r6, r0
 800d578:	3568      	adds	r5, #104	; 0x68
 800d57a:	e7ee      	b.n	800d55a <_fwalk_reent+0x1a>

0800d57c <rshift>:
 800d57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d57e:	6906      	ldr	r6, [r0, #16]
 800d580:	114b      	asrs	r3, r1, #5
 800d582:	429e      	cmp	r6, r3
 800d584:	f100 0414 	add.w	r4, r0, #20
 800d588:	dd31      	ble.n	800d5ee <rshift+0x72>
 800d58a:	f011 011f 	ands.w	r1, r1, #31
 800d58e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d592:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d596:	d108      	bne.n	800d5aa <rshift+0x2e>
 800d598:	4621      	mov	r1, r4
 800d59a:	42b2      	cmp	r2, r6
 800d59c:	460b      	mov	r3, r1
 800d59e:	d211      	bcs.n	800d5c4 <rshift+0x48>
 800d5a0:	f852 3b04 	ldr.w	r3, [r2], #4
 800d5a4:	f841 3b04 	str.w	r3, [r1], #4
 800d5a8:	e7f7      	b.n	800d59a <rshift+0x1e>
 800d5aa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d5ae:	4623      	mov	r3, r4
 800d5b0:	f1c1 0c20 	rsb	ip, r1, #32
 800d5b4:	40cd      	lsrs	r5, r1
 800d5b6:	3204      	adds	r2, #4
 800d5b8:	42b2      	cmp	r2, r6
 800d5ba:	4617      	mov	r7, r2
 800d5bc:	d30d      	bcc.n	800d5da <rshift+0x5e>
 800d5be:	601d      	str	r5, [r3, #0]
 800d5c0:	b105      	cbz	r5, 800d5c4 <rshift+0x48>
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	42a3      	cmp	r3, r4
 800d5c6:	eba3 0204 	sub.w	r2, r3, r4
 800d5ca:	bf08      	it	eq
 800d5cc:	2300      	moveq	r3, #0
 800d5ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d5d2:	6102      	str	r2, [r0, #16]
 800d5d4:	bf08      	it	eq
 800d5d6:	6143      	streq	r3, [r0, #20]
 800d5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5da:	683f      	ldr	r7, [r7, #0]
 800d5dc:	fa07 f70c 	lsl.w	r7, r7, ip
 800d5e0:	433d      	orrs	r5, r7
 800d5e2:	f843 5b04 	str.w	r5, [r3], #4
 800d5e6:	f852 5b04 	ldr.w	r5, [r2], #4
 800d5ea:	40cd      	lsrs	r5, r1
 800d5ec:	e7e4      	b.n	800d5b8 <rshift+0x3c>
 800d5ee:	4623      	mov	r3, r4
 800d5f0:	e7e8      	b.n	800d5c4 <rshift+0x48>

0800d5f2 <__hexdig_fun>:
 800d5f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d5f6:	2b09      	cmp	r3, #9
 800d5f8:	d802      	bhi.n	800d600 <__hexdig_fun+0xe>
 800d5fa:	3820      	subs	r0, #32
 800d5fc:	b2c0      	uxtb	r0, r0
 800d5fe:	4770      	bx	lr
 800d600:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d604:	2b05      	cmp	r3, #5
 800d606:	d801      	bhi.n	800d60c <__hexdig_fun+0x1a>
 800d608:	3847      	subs	r0, #71	; 0x47
 800d60a:	e7f7      	b.n	800d5fc <__hexdig_fun+0xa>
 800d60c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d610:	2b05      	cmp	r3, #5
 800d612:	d801      	bhi.n	800d618 <__hexdig_fun+0x26>
 800d614:	3827      	subs	r0, #39	; 0x27
 800d616:	e7f1      	b.n	800d5fc <__hexdig_fun+0xa>
 800d618:	2000      	movs	r0, #0
 800d61a:	4770      	bx	lr

0800d61c <__gethex>:
 800d61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d620:	b08b      	sub	sp, #44	; 0x2c
 800d622:	9002      	str	r0, [sp, #8]
 800d624:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d626:	468a      	mov	sl, r1
 800d628:	4690      	mov	r8, r2
 800d62a:	9306      	str	r3, [sp, #24]
 800d62c:	f000 fad1 	bl	800dbd2 <__localeconv_l>
 800d630:	6803      	ldr	r3, [r0, #0]
 800d632:	f04f 0b00 	mov.w	fp, #0
 800d636:	4618      	mov	r0, r3
 800d638:	9303      	str	r3, [sp, #12]
 800d63a:	f7f2 fdf5 	bl	8000228 <strlen>
 800d63e:	9b03      	ldr	r3, [sp, #12]
 800d640:	9001      	str	r0, [sp, #4]
 800d642:	4403      	add	r3, r0
 800d644:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d648:	9307      	str	r3, [sp, #28]
 800d64a:	f8da 3000 	ldr.w	r3, [sl]
 800d64e:	3302      	adds	r3, #2
 800d650:	461f      	mov	r7, r3
 800d652:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d656:	2830      	cmp	r0, #48	; 0x30
 800d658:	d06c      	beq.n	800d734 <__gethex+0x118>
 800d65a:	f7ff ffca 	bl	800d5f2 <__hexdig_fun>
 800d65e:	4604      	mov	r4, r0
 800d660:	2800      	cmp	r0, #0
 800d662:	d16a      	bne.n	800d73a <__gethex+0x11e>
 800d664:	9a01      	ldr	r2, [sp, #4]
 800d666:	9903      	ldr	r1, [sp, #12]
 800d668:	4638      	mov	r0, r7
 800d66a:	f001 f9ac 	bl	800e9c6 <strncmp>
 800d66e:	2800      	cmp	r0, #0
 800d670:	d166      	bne.n	800d740 <__gethex+0x124>
 800d672:	9b01      	ldr	r3, [sp, #4]
 800d674:	5cf8      	ldrb	r0, [r7, r3]
 800d676:	18fe      	adds	r6, r7, r3
 800d678:	f7ff ffbb 	bl	800d5f2 <__hexdig_fun>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d062      	beq.n	800d746 <__gethex+0x12a>
 800d680:	4633      	mov	r3, r6
 800d682:	7818      	ldrb	r0, [r3, #0]
 800d684:	461f      	mov	r7, r3
 800d686:	2830      	cmp	r0, #48	; 0x30
 800d688:	f103 0301 	add.w	r3, r3, #1
 800d68c:	d0f9      	beq.n	800d682 <__gethex+0x66>
 800d68e:	f7ff ffb0 	bl	800d5f2 <__hexdig_fun>
 800d692:	fab0 f580 	clz	r5, r0
 800d696:	4634      	mov	r4, r6
 800d698:	f04f 0b01 	mov.w	fp, #1
 800d69c:	096d      	lsrs	r5, r5, #5
 800d69e:	463a      	mov	r2, r7
 800d6a0:	4616      	mov	r6, r2
 800d6a2:	7830      	ldrb	r0, [r6, #0]
 800d6a4:	3201      	adds	r2, #1
 800d6a6:	f7ff ffa4 	bl	800d5f2 <__hexdig_fun>
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d1f8      	bne.n	800d6a0 <__gethex+0x84>
 800d6ae:	9a01      	ldr	r2, [sp, #4]
 800d6b0:	9903      	ldr	r1, [sp, #12]
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f001 f987 	bl	800e9c6 <strncmp>
 800d6b8:	b950      	cbnz	r0, 800d6d0 <__gethex+0xb4>
 800d6ba:	b954      	cbnz	r4, 800d6d2 <__gethex+0xb6>
 800d6bc:	9b01      	ldr	r3, [sp, #4]
 800d6be:	18f4      	adds	r4, r6, r3
 800d6c0:	4622      	mov	r2, r4
 800d6c2:	4616      	mov	r6, r2
 800d6c4:	7830      	ldrb	r0, [r6, #0]
 800d6c6:	3201      	adds	r2, #1
 800d6c8:	f7ff ff93 	bl	800d5f2 <__hexdig_fun>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d1f8      	bne.n	800d6c2 <__gethex+0xa6>
 800d6d0:	b10c      	cbz	r4, 800d6d6 <__gethex+0xba>
 800d6d2:	1ba4      	subs	r4, r4, r6
 800d6d4:	00a4      	lsls	r4, r4, #2
 800d6d6:	7833      	ldrb	r3, [r6, #0]
 800d6d8:	2b50      	cmp	r3, #80	; 0x50
 800d6da:	d001      	beq.n	800d6e0 <__gethex+0xc4>
 800d6dc:	2b70      	cmp	r3, #112	; 0x70
 800d6de:	d140      	bne.n	800d762 <__gethex+0x146>
 800d6e0:	7873      	ldrb	r3, [r6, #1]
 800d6e2:	2b2b      	cmp	r3, #43	; 0x2b
 800d6e4:	d031      	beq.n	800d74a <__gethex+0x12e>
 800d6e6:	2b2d      	cmp	r3, #45	; 0x2d
 800d6e8:	d033      	beq.n	800d752 <__gethex+0x136>
 800d6ea:	f04f 0900 	mov.w	r9, #0
 800d6ee:	1c71      	adds	r1, r6, #1
 800d6f0:	7808      	ldrb	r0, [r1, #0]
 800d6f2:	f7ff ff7e 	bl	800d5f2 <__hexdig_fun>
 800d6f6:	1e43      	subs	r3, r0, #1
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	2b18      	cmp	r3, #24
 800d6fc:	d831      	bhi.n	800d762 <__gethex+0x146>
 800d6fe:	f1a0 0210 	sub.w	r2, r0, #16
 800d702:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d706:	f7ff ff74 	bl	800d5f2 <__hexdig_fun>
 800d70a:	1e43      	subs	r3, r0, #1
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b18      	cmp	r3, #24
 800d710:	d922      	bls.n	800d758 <__gethex+0x13c>
 800d712:	f1b9 0f00 	cmp.w	r9, #0
 800d716:	d000      	beq.n	800d71a <__gethex+0xfe>
 800d718:	4252      	negs	r2, r2
 800d71a:	4414      	add	r4, r2
 800d71c:	f8ca 1000 	str.w	r1, [sl]
 800d720:	b30d      	cbz	r5, 800d766 <__gethex+0x14a>
 800d722:	f1bb 0f00 	cmp.w	fp, #0
 800d726:	bf0c      	ite	eq
 800d728:	2706      	moveq	r7, #6
 800d72a:	2700      	movne	r7, #0
 800d72c:	4638      	mov	r0, r7
 800d72e:	b00b      	add	sp, #44	; 0x2c
 800d730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d734:	f10b 0b01 	add.w	fp, fp, #1
 800d738:	e78a      	b.n	800d650 <__gethex+0x34>
 800d73a:	2500      	movs	r5, #0
 800d73c:	462c      	mov	r4, r5
 800d73e:	e7ae      	b.n	800d69e <__gethex+0x82>
 800d740:	463e      	mov	r6, r7
 800d742:	2501      	movs	r5, #1
 800d744:	e7c7      	b.n	800d6d6 <__gethex+0xba>
 800d746:	4604      	mov	r4, r0
 800d748:	e7fb      	b.n	800d742 <__gethex+0x126>
 800d74a:	f04f 0900 	mov.w	r9, #0
 800d74e:	1cb1      	adds	r1, r6, #2
 800d750:	e7ce      	b.n	800d6f0 <__gethex+0xd4>
 800d752:	f04f 0901 	mov.w	r9, #1
 800d756:	e7fa      	b.n	800d74e <__gethex+0x132>
 800d758:	230a      	movs	r3, #10
 800d75a:	fb03 0202 	mla	r2, r3, r2, r0
 800d75e:	3a10      	subs	r2, #16
 800d760:	e7cf      	b.n	800d702 <__gethex+0xe6>
 800d762:	4631      	mov	r1, r6
 800d764:	e7da      	b.n	800d71c <__gethex+0x100>
 800d766:	4629      	mov	r1, r5
 800d768:	1bf3      	subs	r3, r6, r7
 800d76a:	3b01      	subs	r3, #1
 800d76c:	2b07      	cmp	r3, #7
 800d76e:	dc49      	bgt.n	800d804 <__gethex+0x1e8>
 800d770:	9802      	ldr	r0, [sp, #8]
 800d772:	f000 fad6 	bl	800dd22 <_Balloc>
 800d776:	f04f 0b00 	mov.w	fp, #0
 800d77a:	4605      	mov	r5, r0
 800d77c:	46da      	mov	sl, fp
 800d77e:	9b01      	ldr	r3, [sp, #4]
 800d780:	f100 0914 	add.w	r9, r0, #20
 800d784:	f1c3 0301 	rsb	r3, r3, #1
 800d788:	f8cd 9010 	str.w	r9, [sp, #16]
 800d78c:	9308      	str	r3, [sp, #32]
 800d78e:	42b7      	cmp	r7, r6
 800d790:	d33b      	bcc.n	800d80a <__gethex+0x1ee>
 800d792:	9804      	ldr	r0, [sp, #16]
 800d794:	f840 ab04 	str.w	sl, [r0], #4
 800d798:	eba0 0009 	sub.w	r0, r0, r9
 800d79c:	1080      	asrs	r0, r0, #2
 800d79e:	6128      	str	r0, [r5, #16]
 800d7a0:	0147      	lsls	r7, r0, #5
 800d7a2:	4650      	mov	r0, sl
 800d7a4:	f000 fb81 	bl	800deaa <__hi0bits>
 800d7a8:	f8d8 6000 	ldr.w	r6, [r8]
 800d7ac:	1a3f      	subs	r7, r7, r0
 800d7ae:	42b7      	cmp	r7, r6
 800d7b0:	dd64      	ble.n	800d87c <__gethex+0x260>
 800d7b2:	1bbf      	subs	r7, r7, r6
 800d7b4:	4639      	mov	r1, r7
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	f000 fe8b 	bl	800e4d2 <__any_on>
 800d7bc:	4682      	mov	sl, r0
 800d7be:	b178      	cbz	r0, 800d7e0 <__gethex+0x1c4>
 800d7c0:	f04f 0a01 	mov.w	sl, #1
 800d7c4:	1e7b      	subs	r3, r7, #1
 800d7c6:	1159      	asrs	r1, r3, #5
 800d7c8:	f003 021f 	and.w	r2, r3, #31
 800d7cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d7d0:	fa0a f202 	lsl.w	r2, sl, r2
 800d7d4:	420a      	tst	r2, r1
 800d7d6:	d003      	beq.n	800d7e0 <__gethex+0x1c4>
 800d7d8:	4553      	cmp	r3, sl
 800d7da:	dc46      	bgt.n	800d86a <__gethex+0x24e>
 800d7dc:	f04f 0a02 	mov.w	sl, #2
 800d7e0:	4639      	mov	r1, r7
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	f7ff feca 	bl	800d57c <rshift>
 800d7e8:	443c      	add	r4, r7
 800d7ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7ee:	42a3      	cmp	r3, r4
 800d7f0:	da52      	bge.n	800d898 <__gethex+0x27c>
 800d7f2:	4629      	mov	r1, r5
 800d7f4:	9802      	ldr	r0, [sp, #8]
 800d7f6:	f000 fac8 	bl	800dd8a <_Bfree>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d7fe:	27a3      	movs	r7, #163	; 0xa3
 800d800:	6013      	str	r3, [r2, #0]
 800d802:	e793      	b.n	800d72c <__gethex+0x110>
 800d804:	3101      	adds	r1, #1
 800d806:	105b      	asrs	r3, r3, #1
 800d808:	e7b0      	b.n	800d76c <__gethex+0x150>
 800d80a:	1e73      	subs	r3, r6, #1
 800d80c:	9305      	str	r3, [sp, #20]
 800d80e:	9a07      	ldr	r2, [sp, #28]
 800d810:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d814:	4293      	cmp	r3, r2
 800d816:	d018      	beq.n	800d84a <__gethex+0x22e>
 800d818:	f1bb 0f20 	cmp.w	fp, #32
 800d81c:	d107      	bne.n	800d82e <__gethex+0x212>
 800d81e:	9b04      	ldr	r3, [sp, #16]
 800d820:	f8c3 a000 	str.w	sl, [r3]
 800d824:	f04f 0a00 	mov.w	sl, #0
 800d828:	46d3      	mov	fp, sl
 800d82a:	3304      	adds	r3, #4
 800d82c:	9304      	str	r3, [sp, #16]
 800d82e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d832:	f7ff fede 	bl	800d5f2 <__hexdig_fun>
 800d836:	f000 000f 	and.w	r0, r0, #15
 800d83a:	fa00 f00b 	lsl.w	r0, r0, fp
 800d83e:	ea4a 0a00 	orr.w	sl, sl, r0
 800d842:	f10b 0b04 	add.w	fp, fp, #4
 800d846:	9b05      	ldr	r3, [sp, #20]
 800d848:	e00d      	b.n	800d866 <__gethex+0x24a>
 800d84a:	9b05      	ldr	r3, [sp, #20]
 800d84c:	9a08      	ldr	r2, [sp, #32]
 800d84e:	4413      	add	r3, r2
 800d850:	42bb      	cmp	r3, r7
 800d852:	d3e1      	bcc.n	800d818 <__gethex+0x1fc>
 800d854:	4618      	mov	r0, r3
 800d856:	9a01      	ldr	r2, [sp, #4]
 800d858:	9903      	ldr	r1, [sp, #12]
 800d85a:	9309      	str	r3, [sp, #36]	; 0x24
 800d85c:	f001 f8b3 	bl	800e9c6 <strncmp>
 800d860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d862:	2800      	cmp	r0, #0
 800d864:	d1d8      	bne.n	800d818 <__gethex+0x1fc>
 800d866:	461e      	mov	r6, r3
 800d868:	e791      	b.n	800d78e <__gethex+0x172>
 800d86a:	1eb9      	subs	r1, r7, #2
 800d86c:	4628      	mov	r0, r5
 800d86e:	f000 fe30 	bl	800e4d2 <__any_on>
 800d872:	2800      	cmp	r0, #0
 800d874:	d0b2      	beq.n	800d7dc <__gethex+0x1c0>
 800d876:	f04f 0a03 	mov.w	sl, #3
 800d87a:	e7b1      	b.n	800d7e0 <__gethex+0x1c4>
 800d87c:	da09      	bge.n	800d892 <__gethex+0x276>
 800d87e:	1bf7      	subs	r7, r6, r7
 800d880:	4629      	mov	r1, r5
 800d882:	463a      	mov	r2, r7
 800d884:	9802      	ldr	r0, [sp, #8]
 800d886:	f000 fc4b 	bl	800e120 <__lshift>
 800d88a:	4605      	mov	r5, r0
 800d88c:	1be4      	subs	r4, r4, r7
 800d88e:	f100 0914 	add.w	r9, r0, #20
 800d892:	f04f 0a00 	mov.w	sl, #0
 800d896:	e7a8      	b.n	800d7ea <__gethex+0x1ce>
 800d898:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d89c:	42a0      	cmp	r0, r4
 800d89e:	dd6b      	ble.n	800d978 <__gethex+0x35c>
 800d8a0:	1b04      	subs	r4, r0, r4
 800d8a2:	42a6      	cmp	r6, r4
 800d8a4:	dc2e      	bgt.n	800d904 <__gethex+0x2e8>
 800d8a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8aa:	2b02      	cmp	r3, #2
 800d8ac:	d022      	beq.n	800d8f4 <__gethex+0x2d8>
 800d8ae:	2b03      	cmp	r3, #3
 800d8b0:	d024      	beq.n	800d8fc <__gethex+0x2e0>
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d115      	bne.n	800d8e2 <__gethex+0x2c6>
 800d8b6:	42a6      	cmp	r6, r4
 800d8b8:	d113      	bne.n	800d8e2 <__gethex+0x2c6>
 800d8ba:	2e01      	cmp	r6, #1
 800d8bc:	dc0b      	bgt.n	800d8d6 <__gethex+0x2ba>
 800d8be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d8c2:	9a06      	ldr	r2, [sp, #24]
 800d8c4:	2762      	movs	r7, #98	; 0x62
 800d8c6:	6013      	str	r3, [r2, #0]
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	612b      	str	r3, [r5, #16]
 800d8cc:	f8c9 3000 	str.w	r3, [r9]
 800d8d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8d2:	601d      	str	r5, [r3, #0]
 800d8d4:	e72a      	b.n	800d72c <__gethex+0x110>
 800d8d6:	1e71      	subs	r1, r6, #1
 800d8d8:	4628      	mov	r0, r5
 800d8da:	f000 fdfa 	bl	800e4d2 <__any_on>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d1ed      	bne.n	800d8be <__gethex+0x2a2>
 800d8e2:	4629      	mov	r1, r5
 800d8e4:	9802      	ldr	r0, [sp, #8]
 800d8e6:	f000 fa50 	bl	800dd8a <_Bfree>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d8ee:	2750      	movs	r7, #80	; 0x50
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	e71b      	b.n	800d72c <__gethex+0x110>
 800d8f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d0e1      	beq.n	800d8be <__gethex+0x2a2>
 800d8fa:	e7f2      	b.n	800d8e2 <__gethex+0x2c6>
 800d8fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1dd      	bne.n	800d8be <__gethex+0x2a2>
 800d902:	e7ee      	b.n	800d8e2 <__gethex+0x2c6>
 800d904:	1e67      	subs	r7, r4, #1
 800d906:	f1ba 0f00 	cmp.w	sl, #0
 800d90a:	d132      	bne.n	800d972 <__gethex+0x356>
 800d90c:	b127      	cbz	r7, 800d918 <__gethex+0x2fc>
 800d90e:	4639      	mov	r1, r7
 800d910:	4628      	mov	r0, r5
 800d912:	f000 fdde 	bl	800e4d2 <__any_on>
 800d916:	4682      	mov	sl, r0
 800d918:	2301      	movs	r3, #1
 800d91a:	117a      	asrs	r2, r7, #5
 800d91c:	f007 071f 	and.w	r7, r7, #31
 800d920:	fa03 f707 	lsl.w	r7, r3, r7
 800d924:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d928:	4621      	mov	r1, r4
 800d92a:	421f      	tst	r7, r3
 800d92c:	f04f 0702 	mov.w	r7, #2
 800d930:	4628      	mov	r0, r5
 800d932:	bf18      	it	ne
 800d934:	f04a 0a02 	orrne.w	sl, sl, #2
 800d938:	1b36      	subs	r6, r6, r4
 800d93a:	f7ff fe1f 	bl	800d57c <rshift>
 800d93e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d942:	f1ba 0f00 	cmp.w	sl, #0
 800d946:	d048      	beq.n	800d9da <__gethex+0x3be>
 800d948:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d015      	beq.n	800d97c <__gethex+0x360>
 800d950:	2b03      	cmp	r3, #3
 800d952:	d017      	beq.n	800d984 <__gethex+0x368>
 800d954:	2b01      	cmp	r3, #1
 800d956:	d109      	bne.n	800d96c <__gethex+0x350>
 800d958:	f01a 0f02 	tst.w	sl, #2
 800d95c:	d006      	beq.n	800d96c <__gethex+0x350>
 800d95e:	f8d9 3000 	ldr.w	r3, [r9]
 800d962:	ea4a 0a03 	orr.w	sl, sl, r3
 800d966:	f01a 0f01 	tst.w	sl, #1
 800d96a:	d10e      	bne.n	800d98a <__gethex+0x36e>
 800d96c:	f047 0710 	orr.w	r7, r7, #16
 800d970:	e033      	b.n	800d9da <__gethex+0x3be>
 800d972:	f04f 0a01 	mov.w	sl, #1
 800d976:	e7cf      	b.n	800d918 <__gethex+0x2fc>
 800d978:	2701      	movs	r7, #1
 800d97a:	e7e2      	b.n	800d942 <__gethex+0x326>
 800d97c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d97e:	f1c3 0301 	rsb	r3, r3, #1
 800d982:	9315      	str	r3, [sp, #84]	; 0x54
 800d984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0f0      	beq.n	800d96c <__gethex+0x350>
 800d98a:	f04f 0c00 	mov.w	ip, #0
 800d98e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d992:	f105 0314 	add.w	r3, r5, #20
 800d996:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d99a:	eb03 010a 	add.w	r1, r3, sl
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d9a8:	d01c      	beq.n	800d9e4 <__gethex+0x3c8>
 800d9aa:	3201      	adds	r2, #1
 800d9ac:	6002      	str	r2, [r0, #0]
 800d9ae:	2f02      	cmp	r7, #2
 800d9b0:	f105 0314 	add.w	r3, r5, #20
 800d9b4:	d138      	bne.n	800da28 <__gethex+0x40c>
 800d9b6:	f8d8 2000 	ldr.w	r2, [r8]
 800d9ba:	3a01      	subs	r2, #1
 800d9bc:	42b2      	cmp	r2, r6
 800d9be:	d10a      	bne.n	800d9d6 <__gethex+0x3ba>
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	1171      	asrs	r1, r6, #5
 800d9c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d9c8:	f006 061f 	and.w	r6, r6, #31
 800d9cc:	fa02 f606 	lsl.w	r6, r2, r6
 800d9d0:	421e      	tst	r6, r3
 800d9d2:	bf18      	it	ne
 800d9d4:	4617      	movne	r7, r2
 800d9d6:	f047 0720 	orr.w	r7, r7, #32
 800d9da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9dc:	601d      	str	r5, [r3, #0]
 800d9de:	9b06      	ldr	r3, [sp, #24]
 800d9e0:	601c      	str	r4, [r3, #0]
 800d9e2:	e6a3      	b.n	800d72c <__gethex+0x110>
 800d9e4:	4299      	cmp	r1, r3
 800d9e6:	f843 cc04 	str.w	ip, [r3, #-4]
 800d9ea:	d8d8      	bhi.n	800d99e <__gethex+0x382>
 800d9ec:	68ab      	ldr	r3, [r5, #8]
 800d9ee:	4599      	cmp	r9, r3
 800d9f0:	db12      	blt.n	800da18 <__gethex+0x3fc>
 800d9f2:	6869      	ldr	r1, [r5, #4]
 800d9f4:	9802      	ldr	r0, [sp, #8]
 800d9f6:	3101      	adds	r1, #1
 800d9f8:	f000 f993 	bl	800dd22 <_Balloc>
 800d9fc:	4683      	mov	fp, r0
 800d9fe:	692a      	ldr	r2, [r5, #16]
 800da00:	f105 010c 	add.w	r1, r5, #12
 800da04:	3202      	adds	r2, #2
 800da06:	0092      	lsls	r2, r2, #2
 800da08:	300c      	adds	r0, #12
 800da0a:	f000 f97f 	bl	800dd0c <memcpy>
 800da0e:	4629      	mov	r1, r5
 800da10:	9802      	ldr	r0, [sp, #8]
 800da12:	f000 f9ba 	bl	800dd8a <_Bfree>
 800da16:	465d      	mov	r5, fp
 800da18:	692b      	ldr	r3, [r5, #16]
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	612a      	str	r2, [r5, #16]
 800da1e:	2201      	movs	r2, #1
 800da20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800da24:	615a      	str	r2, [r3, #20]
 800da26:	e7c2      	b.n	800d9ae <__gethex+0x392>
 800da28:	692a      	ldr	r2, [r5, #16]
 800da2a:	454a      	cmp	r2, r9
 800da2c:	dd0b      	ble.n	800da46 <__gethex+0x42a>
 800da2e:	2101      	movs	r1, #1
 800da30:	4628      	mov	r0, r5
 800da32:	f7ff fda3 	bl	800d57c <rshift>
 800da36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da3a:	3401      	adds	r4, #1
 800da3c:	42a3      	cmp	r3, r4
 800da3e:	f6ff aed8 	blt.w	800d7f2 <__gethex+0x1d6>
 800da42:	2701      	movs	r7, #1
 800da44:	e7c7      	b.n	800d9d6 <__gethex+0x3ba>
 800da46:	f016 061f 	ands.w	r6, r6, #31
 800da4a:	d0fa      	beq.n	800da42 <__gethex+0x426>
 800da4c:	449a      	add	sl, r3
 800da4e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800da52:	f000 fa2a 	bl	800deaa <__hi0bits>
 800da56:	f1c6 0620 	rsb	r6, r6, #32
 800da5a:	42b0      	cmp	r0, r6
 800da5c:	dbe7      	blt.n	800da2e <__gethex+0x412>
 800da5e:	e7f0      	b.n	800da42 <__gethex+0x426>

0800da60 <L_shift>:
 800da60:	f1c2 0208 	rsb	r2, r2, #8
 800da64:	0092      	lsls	r2, r2, #2
 800da66:	b570      	push	{r4, r5, r6, lr}
 800da68:	f1c2 0620 	rsb	r6, r2, #32
 800da6c:	6843      	ldr	r3, [r0, #4]
 800da6e:	6804      	ldr	r4, [r0, #0]
 800da70:	fa03 f506 	lsl.w	r5, r3, r6
 800da74:	432c      	orrs	r4, r5
 800da76:	40d3      	lsrs	r3, r2
 800da78:	6004      	str	r4, [r0, #0]
 800da7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800da7e:	4288      	cmp	r0, r1
 800da80:	d3f4      	bcc.n	800da6c <L_shift+0xc>
 800da82:	bd70      	pop	{r4, r5, r6, pc}

0800da84 <__match>:
 800da84:	b530      	push	{r4, r5, lr}
 800da86:	6803      	ldr	r3, [r0, #0]
 800da88:	3301      	adds	r3, #1
 800da8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da8e:	b914      	cbnz	r4, 800da96 <__match+0x12>
 800da90:	6003      	str	r3, [r0, #0]
 800da92:	2001      	movs	r0, #1
 800da94:	bd30      	pop	{r4, r5, pc}
 800da96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800da9e:	2d19      	cmp	r5, #25
 800daa0:	bf98      	it	ls
 800daa2:	3220      	addls	r2, #32
 800daa4:	42a2      	cmp	r2, r4
 800daa6:	d0f0      	beq.n	800da8a <__match+0x6>
 800daa8:	2000      	movs	r0, #0
 800daaa:	e7f3      	b.n	800da94 <__match+0x10>

0800daac <__hexnan>:
 800daac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab0:	2500      	movs	r5, #0
 800dab2:	680b      	ldr	r3, [r1, #0]
 800dab4:	4682      	mov	sl, r0
 800dab6:	115f      	asrs	r7, r3, #5
 800dab8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800dabc:	f013 031f 	ands.w	r3, r3, #31
 800dac0:	bf18      	it	ne
 800dac2:	3704      	addne	r7, #4
 800dac4:	1f3e      	subs	r6, r7, #4
 800dac6:	4690      	mov	r8, r2
 800dac8:	46b1      	mov	r9, r6
 800daca:	4634      	mov	r4, r6
 800dacc:	46ab      	mov	fp, r5
 800dace:	b087      	sub	sp, #28
 800dad0:	6801      	ldr	r1, [r0, #0]
 800dad2:	9301      	str	r3, [sp, #4]
 800dad4:	f847 5c04 	str.w	r5, [r7, #-4]
 800dad8:	9502      	str	r5, [sp, #8]
 800dada:	784a      	ldrb	r2, [r1, #1]
 800dadc:	1c4b      	adds	r3, r1, #1
 800dade:	9303      	str	r3, [sp, #12]
 800dae0:	b342      	cbz	r2, 800db34 <__hexnan+0x88>
 800dae2:	4610      	mov	r0, r2
 800dae4:	9105      	str	r1, [sp, #20]
 800dae6:	9204      	str	r2, [sp, #16]
 800dae8:	f7ff fd83 	bl	800d5f2 <__hexdig_fun>
 800daec:	2800      	cmp	r0, #0
 800daee:	d143      	bne.n	800db78 <__hexnan+0xcc>
 800daf0:	9a04      	ldr	r2, [sp, #16]
 800daf2:	9905      	ldr	r1, [sp, #20]
 800daf4:	2a20      	cmp	r2, #32
 800daf6:	d818      	bhi.n	800db2a <__hexnan+0x7e>
 800daf8:	9b02      	ldr	r3, [sp, #8]
 800dafa:	459b      	cmp	fp, r3
 800dafc:	dd13      	ble.n	800db26 <__hexnan+0x7a>
 800dafe:	454c      	cmp	r4, r9
 800db00:	d206      	bcs.n	800db10 <__hexnan+0x64>
 800db02:	2d07      	cmp	r5, #7
 800db04:	dc04      	bgt.n	800db10 <__hexnan+0x64>
 800db06:	462a      	mov	r2, r5
 800db08:	4649      	mov	r1, r9
 800db0a:	4620      	mov	r0, r4
 800db0c:	f7ff ffa8 	bl	800da60 <L_shift>
 800db10:	4544      	cmp	r4, r8
 800db12:	d944      	bls.n	800db9e <__hexnan+0xf2>
 800db14:	2300      	movs	r3, #0
 800db16:	f1a4 0904 	sub.w	r9, r4, #4
 800db1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800db1e:	461d      	mov	r5, r3
 800db20:	464c      	mov	r4, r9
 800db22:	f8cd b008 	str.w	fp, [sp, #8]
 800db26:	9903      	ldr	r1, [sp, #12]
 800db28:	e7d7      	b.n	800dada <__hexnan+0x2e>
 800db2a:	2a29      	cmp	r2, #41	; 0x29
 800db2c:	d14a      	bne.n	800dbc4 <__hexnan+0x118>
 800db2e:	3102      	adds	r1, #2
 800db30:	f8ca 1000 	str.w	r1, [sl]
 800db34:	f1bb 0f00 	cmp.w	fp, #0
 800db38:	d044      	beq.n	800dbc4 <__hexnan+0x118>
 800db3a:	454c      	cmp	r4, r9
 800db3c:	d206      	bcs.n	800db4c <__hexnan+0xa0>
 800db3e:	2d07      	cmp	r5, #7
 800db40:	dc04      	bgt.n	800db4c <__hexnan+0xa0>
 800db42:	462a      	mov	r2, r5
 800db44:	4649      	mov	r1, r9
 800db46:	4620      	mov	r0, r4
 800db48:	f7ff ff8a 	bl	800da60 <L_shift>
 800db4c:	4544      	cmp	r4, r8
 800db4e:	d928      	bls.n	800dba2 <__hexnan+0xf6>
 800db50:	4643      	mov	r3, r8
 800db52:	f854 2b04 	ldr.w	r2, [r4], #4
 800db56:	42a6      	cmp	r6, r4
 800db58:	f843 2b04 	str.w	r2, [r3], #4
 800db5c:	d2f9      	bcs.n	800db52 <__hexnan+0xa6>
 800db5e:	2200      	movs	r2, #0
 800db60:	f843 2b04 	str.w	r2, [r3], #4
 800db64:	429e      	cmp	r6, r3
 800db66:	d2fb      	bcs.n	800db60 <__hexnan+0xb4>
 800db68:	6833      	ldr	r3, [r6, #0]
 800db6a:	b91b      	cbnz	r3, 800db74 <__hexnan+0xc8>
 800db6c:	4546      	cmp	r6, r8
 800db6e:	d127      	bne.n	800dbc0 <__hexnan+0x114>
 800db70:	2301      	movs	r3, #1
 800db72:	6033      	str	r3, [r6, #0]
 800db74:	2005      	movs	r0, #5
 800db76:	e026      	b.n	800dbc6 <__hexnan+0x11a>
 800db78:	3501      	adds	r5, #1
 800db7a:	2d08      	cmp	r5, #8
 800db7c:	f10b 0b01 	add.w	fp, fp, #1
 800db80:	dd06      	ble.n	800db90 <__hexnan+0xe4>
 800db82:	4544      	cmp	r4, r8
 800db84:	d9cf      	bls.n	800db26 <__hexnan+0x7a>
 800db86:	2300      	movs	r3, #0
 800db88:	2501      	movs	r5, #1
 800db8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800db8e:	3c04      	subs	r4, #4
 800db90:	6822      	ldr	r2, [r4, #0]
 800db92:	f000 000f 	and.w	r0, r0, #15
 800db96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db9a:	6020      	str	r0, [r4, #0]
 800db9c:	e7c3      	b.n	800db26 <__hexnan+0x7a>
 800db9e:	2508      	movs	r5, #8
 800dba0:	e7c1      	b.n	800db26 <__hexnan+0x7a>
 800dba2:	9b01      	ldr	r3, [sp, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d0df      	beq.n	800db68 <__hexnan+0xbc>
 800dba8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbac:	f1c3 0320 	rsb	r3, r3, #32
 800dbb0:	fa22 f303 	lsr.w	r3, r2, r3
 800dbb4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800dbb8:	401a      	ands	r2, r3
 800dbba:	f847 2c04 	str.w	r2, [r7, #-4]
 800dbbe:	e7d3      	b.n	800db68 <__hexnan+0xbc>
 800dbc0:	3e04      	subs	r6, #4
 800dbc2:	e7d1      	b.n	800db68 <__hexnan+0xbc>
 800dbc4:	2004      	movs	r0, #4
 800dbc6:	b007      	add	sp, #28
 800dbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dbcc <__locale_ctype_ptr_l>:
 800dbcc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800dbd0:	4770      	bx	lr

0800dbd2 <__localeconv_l>:
 800dbd2:	30f0      	adds	r0, #240	; 0xf0
 800dbd4:	4770      	bx	lr
	...

0800dbd8 <_localeconv_r>:
 800dbd8:	4b04      	ldr	r3, [pc, #16]	; (800dbec <_localeconv_r+0x14>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6a18      	ldr	r0, [r3, #32]
 800dbde:	4b04      	ldr	r3, [pc, #16]	; (800dbf0 <_localeconv_r+0x18>)
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	bf08      	it	eq
 800dbe4:	4618      	moveq	r0, r3
 800dbe6:	30f0      	adds	r0, #240	; 0xf0
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	20000414 	.word	0x20000414
 800dbf0:	20000478 	.word	0x20000478

0800dbf4 <__swhatbuf_r>:
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	460e      	mov	r6, r1
 800dbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbfc:	b096      	sub	sp, #88	; 0x58
 800dbfe:	2900      	cmp	r1, #0
 800dc00:	4614      	mov	r4, r2
 800dc02:	461d      	mov	r5, r3
 800dc04:	da07      	bge.n	800dc16 <__swhatbuf_r+0x22>
 800dc06:	2300      	movs	r3, #0
 800dc08:	602b      	str	r3, [r5, #0]
 800dc0a:	89b3      	ldrh	r3, [r6, #12]
 800dc0c:	061a      	lsls	r2, r3, #24
 800dc0e:	d410      	bmi.n	800dc32 <__swhatbuf_r+0x3e>
 800dc10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc14:	e00e      	b.n	800dc34 <__swhatbuf_r+0x40>
 800dc16:	466a      	mov	r2, sp
 800dc18:	f000 ff16 	bl	800ea48 <_fstat_r>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	dbf2      	blt.n	800dc06 <__swhatbuf_r+0x12>
 800dc20:	9a01      	ldr	r2, [sp, #4]
 800dc22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc2a:	425a      	negs	r2, r3
 800dc2c:	415a      	adcs	r2, r3
 800dc2e:	602a      	str	r2, [r5, #0]
 800dc30:	e7ee      	b.n	800dc10 <__swhatbuf_r+0x1c>
 800dc32:	2340      	movs	r3, #64	; 0x40
 800dc34:	2000      	movs	r0, #0
 800dc36:	6023      	str	r3, [r4, #0]
 800dc38:	b016      	add	sp, #88	; 0x58
 800dc3a:	bd70      	pop	{r4, r5, r6, pc}

0800dc3c <__smakebuf_r>:
 800dc3c:	898b      	ldrh	r3, [r1, #12]
 800dc3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc40:	079d      	lsls	r5, r3, #30
 800dc42:	4606      	mov	r6, r0
 800dc44:	460c      	mov	r4, r1
 800dc46:	d507      	bpl.n	800dc58 <__smakebuf_r+0x1c>
 800dc48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	6123      	str	r3, [r4, #16]
 800dc50:	2301      	movs	r3, #1
 800dc52:	6163      	str	r3, [r4, #20]
 800dc54:	b002      	add	sp, #8
 800dc56:	bd70      	pop	{r4, r5, r6, pc}
 800dc58:	ab01      	add	r3, sp, #4
 800dc5a:	466a      	mov	r2, sp
 800dc5c:	f7ff ffca 	bl	800dbf4 <__swhatbuf_r>
 800dc60:	9900      	ldr	r1, [sp, #0]
 800dc62:	4605      	mov	r5, r0
 800dc64:	4630      	mov	r0, r6
 800dc66:	f000 fcaf 	bl	800e5c8 <_malloc_r>
 800dc6a:	b948      	cbnz	r0, 800dc80 <__smakebuf_r+0x44>
 800dc6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc70:	059a      	lsls	r2, r3, #22
 800dc72:	d4ef      	bmi.n	800dc54 <__smakebuf_r+0x18>
 800dc74:	f023 0303 	bic.w	r3, r3, #3
 800dc78:	f043 0302 	orr.w	r3, r3, #2
 800dc7c:	81a3      	strh	r3, [r4, #12]
 800dc7e:	e7e3      	b.n	800dc48 <__smakebuf_r+0xc>
 800dc80:	4b0d      	ldr	r3, [pc, #52]	; (800dcb8 <__smakebuf_r+0x7c>)
 800dc82:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	6020      	str	r0, [r4, #0]
 800dc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc8c:	81a3      	strh	r3, [r4, #12]
 800dc8e:	9b00      	ldr	r3, [sp, #0]
 800dc90:	6120      	str	r0, [r4, #16]
 800dc92:	6163      	str	r3, [r4, #20]
 800dc94:	9b01      	ldr	r3, [sp, #4]
 800dc96:	b15b      	cbz	r3, 800dcb0 <__smakebuf_r+0x74>
 800dc98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	f000 fee5 	bl	800ea6c <_isatty_r>
 800dca2:	b128      	cbz	r0, 800dcb0 <__smakebuf_r+0x74>
 800dca4:	89a3      	ldrh	r3, [r4, #12]
 800dca6:	f023 0303 	bic.w	r3, r3, #3
 800dcaa:	f043 0301 	orr.w	r3, r3, #1
 800dcae:	81a3      	strh	r3, [r4, #12]
 800dcb0:	89a3      	ldrh	r3, [r4, #12]
 800dcb2:	431d      	orrs	r5, r3
 800dcb4:	81a5      	strh	r5, [r4, #12]
 800dcb6:	e7cd      	b.n	800dc54 <__smakebuf_r+0x18>
 800dcb8:	0800d431 	.word	0x0800d431

0800dcbc <malloc>:
 800dcbc:	4b02      	ldr	r3, [pc, #8]	; (800dcc8 <malloc+0xc>)
 800dcbe:	4601      	mov	r1, r0
 800dcc0:	6818      	ldr	r0, [r3, #0]
 800dcc2:	f000 bc81 	b.w	800e5c8 <_malloc_r>
 800dcc6:	bf00      	nop
 800dcc8:	20000414 	.word	0x20000414

0800dccc <__ascii_mbtowc>:
 800dccc:	b082      	sub	sp, #8
 800dcce:	b901      	cbnz	r1, 800dcd2 <__ascii_mbtowc+0x6>
 800dcd0:	a901      	add	r1, sp, #4
 800dcd2:	b142      	cbz	r2, 800dce6 <__ascii_mbtowc+0x1a>
 800dcd4:	b14b      	cbz	r3, 800dcea <__ascii_mbtowc+0x1e>
 800dcd6:	7813      	ldrb	r3, [r2, #0]
 800dcd8:	600b      	str	r3, [r1, #0]
 800dcda:	7812      	ldrb	r2, [r2, #0]
 800dcdc:	1c10      	adds	r0, r2, #0
 800dcde:	bf18      	it	ne
 800dce0:	2001      	movne	r0, #1
 800dce2:	b002      	add	sp, #8
 800dce4:	4770      	bx	lr
 800dce6:	4610      	mov	r0, r2
 800dce8:	e7fb      	b.n	800dce2 <__ascii_mbtowc+0x16>
 800dcea:	f06f 0001 	mvn.w	r0, #1
 800dcee:	e7f8      	b.n	800dce2 <__ascii_mbtowc+0x16>

0800dcf0 <memchr>:
 800dcf0:	b510      	push	{r4, lr}
 800dcf2:	b2c9      	uxtb	r1, r1
 800dcf4:	4402      	add	r2, r0
 800dcf6:	4290      	cmp	r0, r2
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	d101      	bne.n	800dd00 <memchr+0x10>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	e003      	b.n	800dd08 <memchr+0x18>
 800dd00:	781c      	ldrb	r4, [r3, #0]
 800dd02:	3001      	adds	r0, #1
 800dd04:	428c      	cmp	r4, r1
 800dd06:	d1f6      	bne.n	800dcf6 <memchr+0x6>
 800dd08:	4618      	mov	r0, r3
 800dd0a:	bd10      	pop	{r4, pc}

0800dd0c <memcpy>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	1e43      	subs	r3, r0, #1
 800dd10:	440a      	add	r2, r1
 800dd12:	4291      	cmp	r1, r2
 800dd14:	d100      	bne.n	800dd18 <memcpy+0xc>
 800dd16:	bd10      	pop	{r4, pc}
 800dd18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd20:	e7f7      	b.n	800dd12 <memcpy+0x6>

0800dd22 <_Balloc>:
 800dd22:	b570      	push	{r4, r5, r6, lr}
 800dd24:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd26:	4604      	mov	r4, r0
 800dd28:	460e      	mov	r6, r1
 800dd2a:	b93d      	cbnz	r5, 800dd3c <_Balloc+0x1a>
 800dd2c:	2010      	movs	r0, #16
 800dd2e:	f7ff ffc5 	bl	800dcbc <malloc>
 800dd32:	6260      	str	r0, [r4, #36]	; 0x24
 800dd34:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd38:	6005      	str	r5, [r0, #0]
 800dd3a:	60c5      	str	r5, [r0, #12]
 800dd3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dd3e:	68eb      	ldr	r3, [r5, #12]
 800dd40:	b183      	cbz	r3, 800dd64 <_Balloc+0x42>
 800dd42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dd4a:	b9b8      	cbnz	r0, 800dd7c <_Balloc+0x5a>
 800dd4c:	2101      	movs	r1, #1
 800dd4e:	fa01 f506 	lsl.w	r5, r1, r6
 800dd52:	1d6a      	adds	r2, r5, #5
 800dd54:	0092      	lsls	r2, r2, #2
 800dd56:	4620      	mov	r0, r4
 800dd58:	f000 fbdc 	bl	800e514 <_calloc_r>
 800dd5c:	b160      	cbz	r0, 800dd78 <_Balloc+0x56>
 800dd5e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dd62:	e00e      	b.n	800dd82 <_Balloc+0x60>
 800dd64:	2221      	movs	r2, #33	; 0x21
 800dd66:	2104      	movs	r1, #4
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f000 fbd3 	bl	800e514 <_calloc_r>
 800dd6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd70:	60e8      	str	r0, [r5, #12]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1e4      	bne.n	800dd42 <_Balloc+0x20>
 800dd78:	2000      	movs	r0, #0
 800dd7a:	bd70      	pop	{r4, r5, r6, pc}
 800dd7c:	6802      	ldr	r2, [r0, #0]
 800dd7e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dd82:	2300      	movs	r3, #0
 800dd84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd88:	e7f7      	b.n	800dd7a <_Balloc+0x58>

0800dd8a <_Bfree>:
 800dd8a:	b570      	push	{r4, r5, r6, lr}
 800dd8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dd8e:	4606      	mov	r6, r0
 800dd90:	460d      	mov	r5, r1
 800dd92:	b93c      	cbnz	r4, 800dda4 <_Bfree+0x1a>
 800dd94:	2010      	movs	r0, #16
 800dd96:	f7ff ff91 	bl	800dcbc <malloc>
 800dd9a:	6270      	str	r0, [r6, #36]	; 0x24
 800dd9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dda0:	6004      	str	r4, [r0, #0]
 800dda2:	60c4      	str	r4, [r0, #12]
 800dda4:	b13d      	cbz	r5, 800ddb6 <_Bfree+0x2c>
 800dda6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dda8:	686a      	ldr	r2, [r5, #4]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ddb0:	6029      	str	r1, [r5, #0]
 800ddb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ddb6:	bd70      	pop	{r4, r5, r6, pc}

0800ddb8 <__multadd>:
 800ddb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddbc:	461f      	mov	r7, r3
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	690d      	ldr	r5, [r1, #16]
 800ddc6:	f101 0c14 	add.w	ip, r1, #20
 800ddca:	f8dc 0000 	ldr.w	r0, [ip]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	b281      	uxth	r1, r0
 800ddd2:	fb02 7101 	mla	r1, r2, r1, r7
 800ddd6:	0c00      	lsrs	r0, r0, #16
 800ddd8:	0c0f      	lsrs	r7, r1, #16
 800ddda:	fb02 7000 	mla	r0, r2, r0, r7
 800ddde:	b289      	uxth	r1, r1
 800dde0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800dde4:	429d      	cmp	r5, r3
 800dde6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ddea:	f84c 1b04 	str.w	r1, [ip], #4
 800ddee:	dcec      	bgt.n	800ddca <__multadd+0x12>
 800ddf0:	b1d7      	cbz	r7, 800de28 <__multadd+0x70>
 800ddf2:	68a3      	ldr	r3, [r4, #8]
 800ddf4:	42ab      	cmp	r3, r5
 800ddf6:	dc12      	bgt.n	800de1e <__multadd+0x66>
 800ddf8:	6861      	ldr	r1, [r4, #4]
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	3101      	adds	r1, #1
 800ddfe:	f7ff ff90 	bl	800dd22 <_Balloc>
 800de02:	4680      	mov	r8, r0
 800de04:	6922      	ldr	r2, [r4, #16]
 800de06:	f104 010c 	add.w	r1, r4, #12
 800de0a:	3202      	adds	r2, #2
 800de0c:	0092      	lsls	r2, r2, #2
 800de0e:	300c      	adds	r0, #12
 800de10:	f7ff ff7c 	bl	800dd0c <memcpy>
 800de14:	4621      	mov	r1, r4
 800de16:	4630      	mov	r0, r6
 800de18:	f7ff ffb7 	bl	800dd8a <_Bfree>
 800de1c:	4644      	mov	r4, r8
 800de1e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de22:	3501      	adds	r5, #1
 800de24:	615f      	str	r7, [r3, #20]
 800de26:	6125      	str	r5, [r4, #16]
 800de28:	4620      	mov	r0, r4
 800de2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de2e <__s2b>:
 800de2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de32:	4615      	mov	r5, r2
 800de34:	2209      	movs	r2, #9
 800de36:	461f      	mov	r7, r3
 800de38:	3308      	adds	r3, #8
 800de3a:	460c      	mov	r4, r1
 800de3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800de40:	4606      	mov	r6, r0
 800de42:	2201      	movs	r2, #1
 800de44:	2100      	movs	r1, #0
 800de46:	429a      	cmp	r2, r3
 800de48:	db20      	blt.n	800de8c <__s2b+0x5e>
 800de4a:	4630      	mov	r0, r6
 800de4c:	f7ff ff69 	bl	800dd22 <_Balloc>
 800de50:	9b08      	ldr	r3, [sp, #32]
 800de52:	2d09      	cmp	r5, #9
 800de54:	6143      	str	r3, [r0, #20]
 800de56:	f04f 0301 	mov.w	r3, #1
 800de5a:	6103      	str	r3, [r0, #16]
 800de5c:	dd19      	ble.n	800de92 <__s2b+0x64>
 800de5e:	f104 0809 	add.w	r8, r4, #9
 800de62:	46c1      	mov	r9, r8
 800de64:	442c      	add	r4, r5
 800de66:	f819 3b01 	ldrb.w	r3, [r9], #1
 800de6a:	4601      	mov	r1, r0
 800de6c:	3b30      	subs	r3, #48	; 0x30
 800de6e:	220a      	movs	r2, #10
 800de70:	4630      	mov	r0, r6
 800de72:	f7ff ffa1 	bl	800ddb8 <__multadd>
 800de76:	45a1      	cmp	r9, r4
 800de78:	d1f5      	bne.n	800de66 <__s2b+0x38>
 800de7a:	eb08 0405 	add.w	r4, r8, r5
 800de7e:	3c08      	subs	r4, #8
 800de80:	1b2d      	subs	r5, r5, r4
 800de82:	1963      	adds	r3, r4, r5
 800de84:	42bb      	cmp	r3, r7
 800de86:	db07      	blt.n	800de98 <__s2b+0x6a>
 800de88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de8c:	0052      	lsls	r2, r2, #1
 800de8e:	3101      	adds	r1, #1
 800de90:	e7d9      	b.n	800de46 <__s2b+0x18>
 800de92:	340a      	adds	r4, #10
 800de94:	2509      	movs	r5, #9
 800de96:	e7f3      	b.n	800de80 <__s2b+0x52>
 800de98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800de9c:	4601      	mov	r1, r0
 800de9e:	3b30      	subs	r3, #48	; 0x30
 800dea0:	220a      	movs	r2, #10
 800dea2:	4630      	mov	r0, r6
 800dea4:	f7ff ff88 	bl	800ddb8 <__multadd>
 800dea8:	e7eb      	b.n	800de82 <__s2b+0x54>

0800deaa <__hi0bits>:
 800deaa:	0c02      	lsrs	r2, r0, #16
 800deac:	0412      	lsls	r2, r2, #16
 800deae:	4603      	mov	r3, r0
 800deb0:	b9b2      	cbnz	r2, 800dee0 <__hi0bits+0x36>
 800deb2:	0403      	lsls	r3, r0, #16
 800deb4:	2010      	movs	r0, #16
 800deb6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800deba:	bf04      	itt	eq
 800debc:	021b      	lsleq	r3, r3, #8
 800debe:	3008      	addeq	r0, #8
 800dec0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dec4:	bf04      	itt	eq
 800dec6:	011b      	lsleq	r3, r3, #4
 800dec8:	3004      	addeq	r0, #4
 800deca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dece:	bf04      	itt	eq
 800ded0:	009b      	lsleq	r3, r3, #2
 800ded2:	3002      	addeq	r0, #2
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	db06      	blt.n	800dee6 <__hi0bits+0x3c>
 800ded8:	005b      	lsls	r3, r3, #1
 800deda:	d503      	bpl.n	800dee4 <__hi0bits+0x3a>
 800dedc:	3001      	adds	r0, #1
 800dede:	4770      	bx	lr
 800dee0:	2000      	movs	r0, #0
 800dee2:	e7e8      	b.n	800deb6 <__hi0bits+0xc>
 800dee4:	2020      	movs	r0, #32
 800dee6:	4770      	bx	lr

0800dee8 <__lo0bits>:
 800dee8:	6803      	ldr	r3, [r0, #0]
 800deea:	4601      	mov	r1, r0
 800deec:	f013 0207 	ands.w	r2, r3, #7
 800def0:	d00b      	beq.n	800df0a <__lo0bits+0x22>
 800def2:	07da      	lsls	r2, r3, #31
 800def4:	d423      	bmi.n	800df3e <__lo0bits+0x56>
 800def6:	0798      	lsls	r0, r3, #30
 800def8:	bf49      	itett	mi
 800defa:	085b      	lsrmi	r3, r3, #1
 800defc:	089b      	lsrpl	r3, r3, #2
 800defe:	2001      	movmi	r0, #1
 800df00:	600b      	strmi	r3, [r1, #0]
 800df02:	bf5c      	itt	pl
 800df04:	600b      	strpl	r3, [r1, #0]
 800df06:	2002      	movpl	r0, #2
 800df08:	4770      	bx	lr
 800df0a:	b298      	uxth	r0, r3
 800df0c:	b9a8      	cbnz	r0, 800df3a <__lo0bits+0x52>
 800df0e:	2010      	movs	r0, #16
 800df10:	0c1b      	lsrs	r3, r3, #16
 800df12:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df16:	bf04      	itt	eq
 800df18:	0a1b      	lsreq	r3, r3, #8
 800df1a:	3008      	addeq	r0, #8
 800df1c:	071a      	lsls	r2, r3, #28
 800df1e:	bf04      	itt	eq
 800df20:	091b      	lsreq	r3, r3, #4
 800df22:	3004      	addeq	r0, #4
 800df24:	079a      	lsls	r2, r3, #30
 800df26:	bf04      	itt	eq
 800df28:	089b      	lsreq	r3, r3, #2
 800df2a:	3002      	addeq	r0, #2
 800df2c:	07da      	lsls	r2, r3, #31
 800df2e:	d402      	bmi.n	800df36 <__lo0bits+0x4e>
 800df30:	085b      	lsrs	r3, r3, #1
 800df32:	d006      	beq.n	800df42 <__lo0bits+0x5a>
 800df34:	3001      	adds	r0, #1
 800df36:	600b      	str	r3, [r1, #0]
 800df38:	4770      	bx	lr
 800df3a:	4610      	mov	r0, r2
 800df3c:	e7e9      	b.n	800df12 <__lo0bits+0x2a>
 800df3e:	2000      	movs	r0, #0
 800df40:	4770      	bx	lr
 800df42:	2020      	movs	r0, #32
 800df44:	4770      	bx	lr

0800df46 <__i2b>:
 800df46:	b510      	push	{r4, lr}
 800df48:	460c      	mov	r4, r1
 800df4a:	2101      	movs	r1, #1
 800df4c:	f7ff fee9 	bl	800dd22 <_Balloc>
 800df50:	2201      	movs	r2, #1
 800df52:	6144      	str	r4, [r0, #20]
 800df54:	6102      	str	r2, [r0, #16]
 800df56:	bd10      	pop	{r4, pc}

0800df58 <__multiply>:
 800df58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5c:	4614      	mov	r4, r2
 800df5e:	690a      	ldr	r2, [r1, #16]
 800df60:	6923      	ldr	r3, [r4, #16]
 800df62:	4688      	mov	r8, r1
 800df64:	429a      	cmp	r2, r3
 800df66:	bfbe      	ittt	lt
 800df68:	460b      	movlt	r3, r1
 800df6a:	46a0      	movlt	r8, r4
 800df6c:	461c      	movlt	r4, r3
 800df6e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800df76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df7e:	eb07 0609 	add.w	r6, r7, r9
 800df82:	42b3      	cmp	r3, r6
 800df84:	bfb8      	it	lt
 800df86:	3101      	addlt	r1, #1
 800df88:	f7ff fecb 	bl	800dd22 <_Balloc>
 800df8c:	f100 0514 	add.w	r5, r0, #20
 800df90:	462b      	mov	r3, r5
 800df92:	2200      	movs	r2, #0
 800df94:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800df98:	4573      	cmp	r3, lr
 800df9a:	d316      	bcc.n	800dfca <__multiply+0x72>
 800df9c:	f104 0214 	add.w	r2, r4, #20
 800dfa0:	f108 0114 	add.w	r1, r8, #20
 800dfa4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dfa8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	9b00      	ldr	r3, [sp, #0]
 800dfb0:	9201      	str	r2, [sp, #4]
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d80c      	bhi.n	800dfd0 <__multiply+0x78>
 800dfb6:	2e00      	cmp	r6, #0
 800dfb8:	dd03      	ble.n	800dfc2 <__multiply+0x6a>
 800dfba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d05d      	beq.n	800e07e <__multiply+0x126>
 800dfc2:	6106      	str	r6, [r0, #16]
 800dfc4:	b003      	add	sp, #12
 800dfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfca:	f843 2b04 	str.w	r2, [r3], #4
 800dfce:	e7e3      	b.n	800df98 <__multiply+0x40>
 800dfd0:	f8b2 b000 	ldrh.w	fp, [r2]
 800dfd4:	f1bb 0f00 	cmp.w	fp, #0
 800dfd8:	d023      	beq.n	800e022 <__multiply+0xca>
 800dfda:	4689      	mov	r9, r1
 800dfdc:	46ac      	mov	ip, r5
 800dfde:	f04f 0800 	mov.w	r8, #0
 800dfe2:	f859 4b04 	ldr.w	r4, [r9], #4
 800dfe6:	f8dc a000 	ldr.w	sl, [ip]
 800dfea:	b2a3      	uxth	r3, r4
 800dfec:	fa1f fa8a 	uxth.w	sl, sl
 800dff0:	fb0b a303 	mla	r3, fp, r3, sl
 800dff4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dff8:	f8dc 4000 	ldr.w	r4, [ip]
 800dffc:	4443      	add	r3, r8
 800dffe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e002:	fb0b 840a 	mla	r4, fp, sl, r8
 800e006:	46e2      	mov	sl, ip
 800e008:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e012:	454f      	cmp	r7, r9
 800e014:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e018:	f84a 3b04 	str.w	r3, [sl], #4
 800e01c:	d82b      	bhi.n	800e076 <__multiply+0x11e>
 800e01e:	f8cc 8004 	str.w	r8, [ip, #4]
 800e022:	9b01      	ldr	r3, [sp, #4]
 800e024:	3204      	adds	r2, #4
 800e026:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e02a:	f1ba 0f00 	cmp.w	sl, #0
 800e02e:	d020      	beq.n	800e072 <__multiply+0x11a>
 800e030:	4689      	mov	r9, r1
 800e032:	46a8      	mov	r8, r5
 800e034:	f04f 0b00 	mov.w	fp, #0
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	f8b9 c000 	ldrh.w	ip, [r9]
 800e03e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e042:	b29b      	uxth	r3, r3
 800e044:	fb0a 440c 	mla	r4, sl, ip, r4
 800e048:	46c4      	mov	ip, r8
 800e04a:	445c      	add	r4, fp
 800e04c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e050:	f84c 3b04 	str.w	r3, [ip], #4
 800e054:	f859 3b04 	ldr.w	r3, [r9], #4
 800e058:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e05c:	0c1b      	lsrs	r3, r3, #16
 800e05e:	fb0a b303 	mla	r3, sl, r3, fp
 800e062:	454f      	cmp	r7, r9
 800e064:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e068:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e06c:	d805      	bhi.n	800e07a <__multiply+0x122>
 800e06e:	f8c8 3004 	str.w	r3, [r8, #4]
 800e072:	3504      	adds	r5, #4
 800e074:	e79b      	b.n	800dfae <__multiply+0x56>
 800e076:	46d4      	mov	ip, sl
 800e078:	e7b3      	b.n	800dfe2 <__multiply+0x8a>
 800e07a:	46e0      	mov	r8, ip
 800e07c:	e7dd      	b.n	800e03a <__multiply+0xe2>
 800e07e:	3e01      	subs	r6, #1
 800e080:	e799      	b.n	800dfb6 <__multiply+0x5e>
	...

0800e084 <__pow5mult>:
 800e084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e088:	4615      	mov	r5, r2
 800e08a:	f012 0203 	ands.w	r2, r2, #3
 800e08e:	4606      	mov	r6, r0
 800e090:	460f      	mov	r7, r1
 800e092:	d007      	beq.n	800e0a4 <__pow5mult+0x20>
 800e094:	4c21      	ldr	r4, [pc, #132]	; (800e11c <__pow5mult+0x98>)
 800e096:	3a01      	subs	r2, #1
 800e098:	2300      	movs	r3, #0
 800e09a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e09e:	f7ff fe8b 	bl	800ddb8 <__multadd>
 800e0a2:	4607      	mov	r7, r0
 800e0a4:	10ad      	asrs	r5, r5, #2
 800e0a6:	d035      	beq.n	800e114 <__pow5mult+0x90>
 800e0a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e0aa:	b93c      	cbnz	r4, 800e0bc <__pow5mult+0x38>
 800e0ac:	2010      	movs	r0, #16
 800e0ae:	f7ff fe05 	bl	800dcbc <malloc>
 800e0b2:	6270      	str	r0, [r6, #36]	; 0x24
 800e0b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e0b8:	6004      	str	r4, [r0, #0]
 800e0ba:	60c4      	str	r4, [r0, #12]
 800e0bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e0c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e0c4:	b94c      	cbnz	r4, 800e0da <__pow5mult+0x56>
 800e0c6:	f240 2171 	movw	r1, #625	; 0x271
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	f7ff ff3b 	bl	800df46 <__i2b>
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	f8c8 0008 	str.w	r0, [r8, #8]
 800e0d8:	6003      	str	r3, [r0, #0]
 800e0da:	f04f 0800 	mov.w	r8, #0
 800e0de:	07eb      	lsls	r3, r5, #31
 800e0e0:	d50a      	bpl.n	800e0f8 <__pow5mult+0x74>
 800e0e2:	4639      	mov	r1, r7
 800e0e4:	4622      	mov	r2, r4
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	f7ff ff36 	bl	800df58 <__multiply>
 800e0ec:	4681      	mov	r9, r0
 800e0ee:	4639      	mov	r1, r7
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	f7ff fe4a 	bl	800dd8a <_Bfree>
 800e0f6:	464f      	mov	r7, r9
 800e0f8:	106d      	asrs	r5, r5, #1
 800e0fa:	d00b      	beq.n	800e114 <__pow5mult+0x90>
 800e0fc:	6820      	ldr	r0, [r4, #0]
 800e0fe:	b938      	cbnz	r0, 800e110 <__pow5mult+0x8c>
 800e100:	4622      	mov	r2, r4
 800e102:	4621      	mov	r1, r4
 800e104:	4630      	mov	r0, r6
 800e106:	f7ff ff27 	bl	800df58 <__multiply>
 800e10a:	6020      	str	r0, [r4, #0]
 800e10c:	f8c0 8000 	str.w	r8, [r0]
 800e110:	4604      	mov	r4, r0
 800e112:	e7e4      	b.n	800e0de <__pow5mult+0x5a>
 800e114:	4638      	mov	r0, r7
 800e116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e11a:	bf00      	nop
 800e11c:	08010120 	.word	0x08010120

0800e120 <__lshift>:
 800e120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e124:	460c      	mov	r4, r1
 800e126:	4607      	mov	r7, r0
 800e128:	4616      	mov	r6, r2
 800e12a:	6923      	ldr	r3, [r4, #16]
 800e12c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e130:	eb0a 0903 	add.w	r9, sl, r3
 800e134:	6849      	ldr	r1, [r1, #4]
 800e136:	68a3      	ldr	r3, [r4, #8]
 800e138:	f109 0501 	add.w	r5, r9, #1
 800e13c:	42ab      	cmp	r3, r5
 800e13e:	db32      	blt.n	800e1a6 <__lshift+0x86>
 800e140:	4638      	mov	r0, r7
 800e142:	f7ff fdee 	bl	800dd22 <_Balloc>
 800e146:	2300      	movs	r3, #0
 800e148:	4680      	mov	r8, r0
 800e14a:	461a      	mov	r2, r3
 800e14c:	f100 0114 	add.w	r1, r0, #20
 800e150:	4553      	cmp	r3, sl
 800e152:	db2b      	blt.n	800e1ac <__lshift+0x8c>
 800e154:	6920      	ldr	r0, [r4, #16]
 800e156:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e15a:	f104 0314 	add.w	r3, r4, #20
 800e15e:	f016 021f 	ands.w	r2, r6, #31
 800e162:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e166:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e16a:	d025      	beq.n	800e1b8 <__lshift+0x98>
 800e16c:	2000      	movs	r0, #0
 800e16e:	f1c2 0e20 	rsb	lr, r2, #32
 800e172:	468a      	mov	sl, r1
 800e174:	681e      	ldr	r6, [r3, #0]
 800e176:	4096      	lsls	r6, r2
 800e178:	4330      	orrs	r0, r6
 800e17a:	f84a 0b04 	str.w	r0, [sl], #4
 800e17e:	f853 0b04 	ldr.w	r0, [r3], #4
 800e182:	459c      	cmp	ip, r3
 800e184:	fa20 f00e 	lsr.w	r0, r0, lr
 800e188:	d814      	bhi.n	800e1b4 <__lshift+0x94>
 800e18a:	6048      	str	r0, [r1, #4]
 800e18c:	b108      	cbz	r0, 800e192 <__lshift+0x72>
 800e18e:	f109 0502 	add.w	r5, r9, #2
 800e192:	3d01      	subs	r5, #1
 800e194:	4638      	mov	r0, r7
 800e196:	f8c8 5010 	str.w	r5, [r8, #16]
 800e19a:	4621      	mov	r1, r4
 800e19c:	f7ff fdf5 	bl	800dd8a <_Bfree>
 800e1a0:	4640      	mov	r0, r8
 800e1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1a6:	3101      	adds	r1, #1
 800e1a8:	005b      	lsls	r3, r3, #1
 800e1aa:	e7c7      	b.n	800e13c <__lshift+0x1c>
 800e1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	e7cd      	b.n	800e150 <__lshift+0x30>
 800e1b4:	4651      	mov	r1, sl
 800e1b6:	e7dc      	b.n	800e172 <__lshift+0x52>
 800e1b8:	3904      	subs	r1, #4
 800e1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1be:	459c      	cmp	ip, r3
 800e1c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e1c4:	d8f9      	bhi.n	800e1ba <__lshift+0x9a>
 800e1c6:	e7e4      	b.n	800e192 <__lshift+0x72>

0800e1c8 <__mcmp>:
 800e1c8:	6903      	ldr	r3, [r0, #16]
 800e1ca:	690a      	ldr	r2, [r1, #16]
 800e1cc:	b530      	push	{r4, r5, lr}
 800e1ce:	1a9b      	subs	r3, r3, r2
 800e1d0:	d10c      	bne.n	800e1ec <__mcmp+0x24>
 800e1d2:	0092      	lsls	r2, r2, #2
 800e1d4:	3014      	adds	r0, #20
 800e1d6:	3114      	adds	r1, #20
 800e1d8:	1884      	adds	r4, r0, r2
 800e1da:	4411      	add	r1, r2
 800e1dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e1e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e1e4:	4295      	cmp	r5, r2
 800e1e6:	d003      	beq.n	800e1f0 <__mcmp+0x28>
 800e1e8:	d305      	bcc.n	800e1f6 <__mcmp+0x2e>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	bd30      	pop	{r4, r5, pc}
 800e1f0:	42a0      	cmp	r0, r4
 800e1f2:	d3f3      	bcc.n	800e1dc <__mcmp+0x14>
 800e1f4:	e7fa      	b.n	800e1ec <__mcmp+0x24>
 800e1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fa:	e7f7      	b.n	800e1ec <__mcmp+0x24>

0800e1fc <__mdiff>:
 800e1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e200:	460d      	mov	r5, r1
 800e202:	4607      	mov	r7, r0
 800e204:	4611      	mov	r1, r2
 800e206:	4628      	mov	r0, r5
 800e208:	4614      	mov	r4, r2
 800e20a:	f7ff ffdd 	bl	800e1c8 <__mcmp>
 800e20e:	1e06      	subs	r6, r0, #0
 800e210:	d108      	bne.n	800e224 <__mdiff+0x28>
 800e212:	4631      	mov	r1, r6
 800e214:	4638      	mov	r0, r7
 800e216:	f7ff fd84 	bl	800dd22 <_Balloc>
 800e21a:	2301      	movs	r3, #1
 800e21c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e224:	bfa4      	itt	ge
 800e226:	4623      	movge	r3, r4
 800e228:	462c      	movge	r4, r5
 800e22a:	4638      	mov	r0, r7
 800e22c:	6861      	ldr	r1, [r4, #4]
 800e22e:	bfa6      	itte	ge
 800e230:	461d      	movge	r5, r3
 800e232:	2600      	movge	r6, #0
 800e234:	2601      	movlt	r6, #1
 800e236:	f7ff fd74 	bl	800dd22 <_Balloc>
 800e23a:	f04f 0e00 	mov.w	lr, #0
 800e23e:	60c6      	str	r6, [r0, #12]
 800e240:	692b      	ldr	r3, [r5, #16]
 800e242:	6926      	ldr	r6, [r4, #16]
 800e244:	f104 0214 	add.w	r2, r4, #20
 800e248:	f105 0914 	add.w	r9, r5, #20
 800e24c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e250:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e254:	f100 0114 	add.w	r1, r0, #20
 800e258:	f852 ab04 	ldr.w	sl, [r2], #4
 800e25c:	f859 5b04 	ldr.w	r5, [r9], #4
 800e260:	fa1f f38a 	uxth.w	r3, sl
 800e264:	4473      	add	r3, lr
 800e266:	b2ac      	uxth	r4, r5
 800e268:	1b1b      	subs	r3, r3, r4
 800e26a:	0c2c      	lsrs	r4, r5, #16
 800e26c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800e270:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800e274:	b29b      	uxth	r3, r3
 800e276:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800e27a:	45c8      	cmp	r8, r9
 800e27c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800e280:	4694      	mov	ip, r2
 800e282:	f841 4b04 	str.w	r4, [r1], #4
 800e286:	d8e7      	bhi.n	800e258 <__mdiff+0x5c>
 800e288:	45bc      	cmp	ip, r7
 800e28a:	d304      	bcc.n	800e296 <__mdiff+0x9a>
 800e28c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e290:	b183      	cbz	r3, 800e2b4 <__mdiff+0xb8>
 800e292:	6106      	str	r6, [r0, #16]
 800e294:	e7c4      	b.n	800e220 <__mdiff+0x24>
 800e296:	f85c 4b04 	ldr.w	r4, [ip], #4
 800e29a:	b2a2      	uxth	r2, r4
 800e29c:	4472      	add	r2, lr
 800e29e:	1413      	asrs	r3, r2, #16
 800e2a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e2a4:	b292      	uxth	r2, r2
 800e2a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e2aa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e2ae:	f841 2b04 	str.w	r2, [r1], #4
 800e2b2:	e7e9      	b.n	800e288 <__mdiff+0x8c>
 800e2b4:	3e01      	subs	r6, #1
 800e2b6:	e7e9      	b.n	800e28c <__mdiff+0x90>

0800e2b8 <__ulp>:
 800e2b8:	4b10      	ldr	r3, [pc, #64]	; (800e2fc <__ulp+0x44>)
 800e2ba:	400b      	ands	r3, r1
 800e2bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	dd02      	ble.n	800e2ca <__ulp+0x12>
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4770      	bx	lr
 800e2ca:	425b      	negs	r3, r3
 800e2cc:	151b      	asrs	r3, r3, #20
 800e2ce:	2b13      	cmp	r3, #19
 800e2d0:	f04f 0000 	mov.w	r0, #0
 800e2d4:	f04f 0100 	mov.w	r1, #0
 800e2d8:	dc04      	bgt.n	800e2e4 <__ulp+0x2c>
 800e2da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e2de:	fa42 f103 	asr.w	r1, r2, r3
 800e2e2:	4770      	bx	lr
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	3b14      	subs	r3, #20
 800e2e8:	2b1e      	cmp	r3, #30
 800e2ea:	bfce      	itee	gt
 800e2ec:	4613      	movgt	r3, r2
 800e2ee:	f1c3 031f 	rsble	r3, r3, #31
 800e2f2:	fa02 f303 	lslle.w	r3, r2, r3
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	7ff00000 	.word	0x7ff00000

0800e300 <__b2d>:
 800e300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e304:	6907      	ldr	r7, [r0, #16]
 800e306:	f100 0914 	add.w	r9, r0, #20
 800e30a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800e30e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800e312:	f1a7 0804 	sub.w	r8, r7, #4
 800e316:	4630      	mov	r0, r6
 800e318:	f7ff fdc7 	bl	800deaa <__hi0bits>
 800e31c:	f1c0 0320 	rsb	r3, r0, #32
 800e320:	280a      	cmp	r0, #10
 800e322:	600b      	str	r3, [r1, #0]
 800e324:	491e      	ldr	r1, [pc, #120]	; (800e3a0 <__b2d+0xa0>)
 800e326:	dc17      	bgt.n	800e358 <__b2d+0x58>
 800e328:	45c1      	cmp	r9, r8
 800e32a:	bf28      	it	cs
 800e32c:	2200      	movcs	r2, #0
 800e32e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e332:	fa26 f30c 	lsr.w	r3, r6, ip
 800e336:	bf38      	it	cc
 800e338:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800e33c:	ea43 0501 	orr.w	r5, r3, r1
 800e340:	f100 0315 	add.w	r3, r0, #21
 800e344:	fa06 f303 	lsl.w	r3, r6, r3
 800e348:	fa22 f20c 	lsr.w	r2, r2, ip
 800e34c:	ea43 0402 	orr.w	r4, r3, r2
 800e350:	4620      	mov	r0, r4
 800e352:	4629      	mov	r1, r5
 800e354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e358:	45c1      	cmp	r9, r8
 800e35a:	bf3a      	itte	cc
 800e35c:	f1a7 0808 	subcc.w	r8, r7, #8
 800e360:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800e364:	2200      	movcs	r2, #0
 800e366:	f1b0 030b 	subs.w	r3, r0, #11
 800e36a:	d015      	beq.n	800e398 <__b2d+0x98>
 800e36c:	409e      	lsls	r6, r3
 800e36e:	f1c3 0720 	rsb	r7, r3, #32
 800e372:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800e376:	fa22 f107 	lsr.w	r1, r2, r7
 800e37a:	45c8      	cmp	r8, r9
 800e37c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800e380:	ea46 0501 	orr.w	r5, r6, r1
 800e384:	bf94      	ite	ls
 800e386:	2100      	movls	r1, #0
 800e388:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800e38c:	fa02 f003 	lsl.w	r0, r2, r3
 800e390:	40f9      	lsrs	r1, r7
 800e392:	ea40 0401 	orr.w	r4, r0, r1
 800e396:	e7db      	b.n	800e350 <__b2d+0x50>
 800e398:	ea46 0501 	orr.w	r5, r6, r1
 800e39c:	4614      	mov	r4, r2
 800e39e:	e7d7      	b.n	800e350 <__b2d+0x50>
 800e3a0:	3ff00000 	.word	0x3ff00000

0800e3a4 <__d2b>:
 800e3a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e3a8:	461c      	mov	r4, r3
 800e3aa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800e3ae:	2101      	movs	r1, #1
 800e3b0:	4690      	mov	r8, r2
 800e3b2:	f7ff fcb6 	bl	800dd22 <_Balloc>
 800e3b6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800e3ba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800e3be:	4607      	mov	r7, r0
 800e3c0:	bb34      	cbnz	r4, 800e410 <__d2b+0x6c>
 800e3c2:	9201      	str	r2, [sp, #4]
 800e3c4:	f1b8 0200 	subs.w	r2, r8, #0
 800e3c8:	d027      	beq.n	800e41a <__d2b+0x76>
 800e3ca:	a802      	add	r0, sp, #8
 800e3cc:	f840 2d08 	str.w	r2, [r0, #-8]!
 800e3d0:	f7ff fd8a 	bl	800dee8 <__lo0bits>
 800e3d4:	9900      	ldr	r1, [sp, #0]
 800e3d6:	b1f0      	cbz	r0, 800e416 <__d2b+0x72>
 800e3d8:	9a01      	ldr	r2, [sp, #4]
 800e3da:	f1c0 0320 	rsb	r3, r0, #32
 800e3de:	fa02 f303 	lsl.w	r3, r2, r3
 800e3e2:	430b      	orrs	r3, r1
 800e3e4:	40c2      	lsrs	r2, r0
 800e3e6:	617b      	str	r3, [r7, #20]
 800e3e8:	9201      	str	r2, [sp, #4]
 800e3ea:	9b01      	ldr	r3, [sp, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	bf14      	ite	ne
 800e3f0:	2102      	movne	r1, #2
 800e3f2:	2101      	moveq	r1, #1
 800e3f4:	61bb      	str	r3, [r7, #24]
 800e3f6:	6139      	str	r1, [r7, #16]
 800e3f8:	b1c4      	cbz	r4, 800e42c <__d2b+0x88>
 800e3fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e3fe:	4404      	add	r4, r0
 800e400:	6034      	str	r4, [r6, #0]
 800e402:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e406:	6028      	str	r0, [r5, #0]
 800e408:	4638      	mov	r0, r7
 800e40a:	b002      	add	sp, #8
 800e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e410:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e414:	e7d5      	b.n	800e3c2 <__d2b+0x1e>
 800e416:	6179      	str	r1, [r7, #20]
 800e418:	e7e7      	b.n	800e3ea <__d2b+0x46>
 800e41a:	a801      	add	r0, sp, #4
 800e41c:	f7ff fd64 	bl	800dee8 <__lo0bits>
 800e420:	2101      	movs	r1, #1
 800e422:	9b01      	ldr	r3, [sp, #4]
 800e424:	6139      	str	r1, [r7, #16]
 800e426:	617b      	str	r3, [r7, #20]
 800e428:	3020      	adds	r0, #32
 800e42a:	e7e5      	b.n	800e3f8 <__d2b+0x54>
 800e42c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e430:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e434:	6030      	str	r0, [r6, #0]
 800e436:	6918      	ldr	r0, [r3, #16]
 800e438:	f7ff fd37 	bl	800deaa <__hi0bits>
 800e43c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e440:	e7e1      	b.n	800e406 <__d2b+0x62>

0800e442 <__ratio>:
 800e442:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e446:	4688      	mov	r8, r1
 800e448:	4669      	mov	r1, sp
 800e44a:	4681      	mov	r9, r0
 800e44c:	f7ff ff58 	bl	800e300 <__b2d>
 800e450:	468b      	mov	fp, r1
 800e452:	4606      	mov	r6, r0
 800e454:	460f      	mov	r7, r1
 800e456:	4640      	mov	r0, r8
 800e458:	a901      	add	r1, sp, #4
 800e45a:	f7ff ff51 	bl	800e300 <__b2d>
 800e45e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e462:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e466:	460d      	mov	r5, r1
 800e468:	eba3 0c02 	sub.w	ip, r3, r2
 800e46c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e470:	1a9b      	subs	r3, r3, r2
 800e472:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e476:	2b00      	cmp	r3, #0
 800e478:	bfd5      	itete	le
 800e47a:	460a      	movle	r2, r1
 800e47c:	463a      	movgt	r2, r7
 800e47e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e482:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e486:	bfd8      	it	le
 800e488:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800e48c:	462b      	mov	r3, r5
 800e48e:	4602      	mov	r2, r0
 800e490:	4659      	mov	r1, fp
 800e492:	4630      	mov	r0, r6
 800e494:	f7f2 f9b6 	bl	8000804 <__aeabi_ddiv>
 800e498:	b003      	add	sp, #12
 800e49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e49e <__copybits>:
 800e49e:	3901      	subs	r1, #1
 800e4a0:	b510      	push	{r4, lr}
 800e4a2:	1149      	asrs	r1, r1, #5
 800e4a4:	6914      	ldr	r4, [r2, #16]
 800e4a6:	3101      	adds	r1, #1
 800e4a8:	f102 0314 	add.w	r3, r2, #20
 800e4ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e4b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e4b4:	42a3      	cmp	r3, r4
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	d303      	bcc.n	800e4c2 <__copybits+0x24>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	428a      	cmp	r2, r1
 800e4be:	d305      	bcc.n	800e4cc <__copybits+0x2e>
 800e4c0:	bd10      	pop	{r4, pc}
 800e4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4c6:	f840 2b04 	str.w	r2, [r0], #4
 800e4ca:	e7f3      	b.n	800e4b4 <__copybits+0x16>
 800e4cc:	f842 3b04 	str.w	r3, [r2], #4
 800e4d0:	e7f4      	b.n	800e4bc <__copybits+0x1e>

0800e4d2 <__any_on>:
 800e4d2:	f100 0214 	add.w	r2, r0, #20
 800e4d6:	6900      	ldr	r0, [r0, #16]
 800e4d8:	114b      	asrs	r3, r1, #5
 800e4da:	4298      	cmp	r0, r3
 800e4dc:	b510      	push	{r4, lr}
 800e4de:	db11      	blt.n	800e504 <__any_on+0x32>
 800e4e0:	dd0a      	ble.n	800e4f8 <__any_on+0x26>
 800e4e2:	f011 011f 	ands.w	r1, r1, #31
 800e4e6:	d007      	beq.n	800e4f8 <__any_on+0x26>
 800e4e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e4ec:	fa24 f001 	lsr.w	r0, r4, r1
 800e4f0:	fa00 f101 	lsl.w	r1, r0, r1
 800e4f4:	428c      	cmp	r4, r1
 800e4f6:	d10b      	bne.n	800e510 <__any_on+0x3e>
 800e4f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4fc:	4293      	cmp	r3, r2
 800e4fe:	d803      	bhi.n	800e508 <__any_on+0x36>
 800e500:	2000      	movs	r0, #0
 800e502:	bd10      	pop	{r4, pc}
 800e504:	4603      	mov	r3, r0
 800e506:	e7f7      	b.n	800e4f8 <__any_on+0x26>
 800e508:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e50c:	2900      	cmp	r1, #0
 800e50e:	d0f5      	beq.n	800e4fc <__any_on+0x2a>
 800e510:	2001      	movs	r0, #1
 800e512:	e7f6      	b.n	800e502 <__any_on+0x30>

0800e514 <_calloc_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	fb02 f401 	mul.w	r4, r2, r1
 800e51a:	4621      	mov	r1, r4
 800e51c:	f000 f854 	bl	800e5c8 <_malloc_r>
 800e520:	4605      	mov	r5, r0
 800e522:	b118      	cbz	r0, 800e52c <_calloc_r+0x18>
 800e524:	4622      	mov	r2, r4
 800e526:	2100      	movs	r1, #0
 800e528:	f7fc fa2d 	bl	800a986 <memset>
 800e52c:	4628      	mov	r0, r5
 800e52e:	bd38      	pop	{r3, r4, r5, pc}

0800e530 <_free_r>:
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4605      	mov	r5, r0
 800e534:	2900      	cmp	r1, #0
 800e536:	d043      	beq.n	800e5c0 <_free_r+0x90>
 800e538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e53c:	1f0c      	subs	r4, r1, #4
 800e53e:	2b00      	cmp	r3, #0
 800e540:	bfb8      	it	lt
 800e542:	18e4      	addlt	r4, r4, r3
 800e544:	f000 fab4 	bl	800eab0 <__malloc_lock>
 800e548:	4a1e      	ldr	r2, [pc, #120]	; (800e5c4 <_free_r+0x94>)
 800e54a:	6813      	ldr	r3, [r2, #0]
 800e54c:	4610      	mov	r0, r2
 800e54e:	b933      	cbnz	r3, 800e55e <_free_r+0x2e>
 800e550:	6063      	str	r3, [r4, #4]
 800e552:	6014      	str	r4, [r2, #0]
 800e554:	4628      	mov	r0, r5
 800e556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e55a:	f000 baaa 	b.w	800eab2 <__malloc_unlock>
 800e55e:	42a3      	cmp	r3, r4
 800e560:	d90b      	bls.n	800e57a <_free_r+0x4a>
 800e562:	6821      	ldr	r1, [r4, #0]
 800e564:	1862      	adds	r2, r4, r1
 800e566:	4293      	cmp	r3, r2
 800e568:	bf01      	itttt	eq
 800e56a:	681a      	ldreq	r2, [r3, #0]
 800e56c:	685b      	ldreq	r3, [r3, #4]
 800e56e:	1852      	addeq	r2, r2, r1
 800e570:	6022      	streq	r2, [r4, #0]
 800e572:	6063      	str	r3, [r4, #4]
 800e574:	6004      	str	r4, [r0, #0]
 800e576:	e7ed      	b.n	800e554 <_free_r+0x24>
 800e578:	4613      	mov	r3, r2
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	b10a      	cbz	r2, 800e582 <_free_r+0x52>
 800e57e:	42a2      	cmp	r2, r4
 800e580:	d9fa      	bls.n	800e578 <_free_r+0x48>
 800e582:	6819      	ldr	r1, [r3, #0]
 800e584:	1858      	adds	r0, r3, r1
 800e586:	42a0      	cmp	r0, r4
 800e588:	d10b      	bne.n	800e5a2 <_free_r+0x72>
 800e58a:	6820      	ldr	r0, [r4, #0]
 800e58c:	4401      	add	r1, r0
 800e58e:	1858      	adds	r0, r3, r1
 800e590:	4282      	cmp	r2, r0
 800e592:	6019      	str	r1, [r3, #0]
 800e594:	d1de      	bne.n	800e554 <_free_r+0x24>
 800e596:	6810      	ldr	r0, [r2, #0]
 800e598:	6852      	ldr	r2, [r2, #4]
 800e59a:	4401      	add	r1, r0
 800e59c:	6019      	str	r1, [r3, #0]
 800e59e:	605a      	str	r2, [r3, #4]
 800e5a0:	e7d8      	b.n	800e554 <_free_r+0x24>
 800e5a2:	d902      	bls.n	800e5aa <_free_r+0x7a>
 800e5a4:	230c      	movs	r3, #12
 800e5a6:	602b      	str	r3, [r5, #0]
 800e5a8:	e7d4      	b.n	800e554 <_free_r+0x24>
 800e5aa:	6820      	ldr	r0, [r4, #0]
 800e5ac:	1821      	adds	r1, r4, r0
 800e5ae:	428a      	cmp	r2, r1
 800e5b0:	bf01      	itttt	eq
 800e5b2:	6811      	ldreq	r1, [r2, #0]
 800e5b4:	6852      	ldreq	r2, [r2, #4]
 800e5b6:	1809      	addeq	r1, r1, r0
 800e5b8:	6021      	streq	r1, [r4, #0]
 800e5ba:	6062      	str	r2, [r4, #4]
 800e5bc:	605c      	str	r4, [r3, #4]
 800e5be:	e7c9      	b.n	800e554 <_free_r+0x24>
 800e5c0:	bd38      	pop	{r3, r4, r5, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20000a1c 	.word	0x20000a1c

0800e5c8 <_malloc_r>:
 800e5c8:	b570      	push	{r4, r5, r6, lr}
 800e5ca:	1ccd      	adds	r5, r1, #3
 800e5cc:	f025 0503 	bic.w	r5, r5, #3
 800e5d0:	3508      	adds	r5, #8
 800e5d2:	2d0c      	cmp	r5, #12
 800e5d4:	bf38      	it	cc
 800e5d6:	250c      	movcc	r5, #12
 800e5d8:	2d00      	cmp	r5, #0
 800e5da:	4606      	mov	r6, r0
 800e5dc:	db01      	blt.n	800e5e2 <_malloc_r+0x1a>
 800e5de:	42a9      	cmp	r1, r5
 800e5e0:	d903      	bls.n	800e5ea <_malloc_r+0x22>
 800e5e2:	230c      	movs	r3, #12
 800e5e4:	6033      	str	r3, [r6, #0]
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ea:	f000 fa61 	bl	800eab0 <__malloc_lock>
 800e5ee:	4a21      	ldr	r2, [pc, #132]	; (800e674 <_malloc_r+0xac>)
 800e5f0:	6814      	ldr	r4, [r2, #0]
 800e5f2:	4621      	mov	r1, r4
 800e5f4:	b991      	cbnz	r1, 800e61c <_malloc_r+0x54>
 800e5f6:	4c20      	ldr	r4, [pc, #128]	; (800e678 <_malloc_r+0xb0>)
 800e5f8:	6823      	ldr	r3, [r4, #0]
 800e5fa:	b91b      	cbnz	r3, 800e604 <_malloc_r+0x3c>
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	f000 f98f 	bl	800e920 <_sbrk_r>
 800e602:	6020      	str	r0, [r4, #0]
 800e604:	4629      	mov	r1, r5
 800e606:	4630      	mov	r0, r6
 800e608:	f000 f98a 	bl	800e920 <_sbrk_r>
 800e60c:	1c43      	adds	r3, r0, #1
 800e60e:	d124      	bne.n	800e65a <_malloc_r+0x92>
 800e610:	230c      	movs	r3, #12
 800e612:	4630      	mov	r0, r6
 800e614:	6033      	str	r3, [r6, #0]
 800e616:	f000 fa4c 	bl	800eab2 <__malloc_unlock>
 800e61a:	e7e4      	b.n	800e5e6 <_malloc_r+0x1e>
 800e61c:	680b      	ldr	r3, [r1, #0]
 800e61e:	1b5b      	subs	r3, r3, r5
 800e620:	d418      	bmi.n	800e654 <_malloc_r+0x8c>
 800e622:	2b0b      	cmp	r3, #11
 800e624:	d90f      	bls.n	800e646 <_malloc_r+0x7e>
 800e626:	600b      	str	r3, [r1, #0]
 800e628:	18cc      	adds	r4, r1, r3
 800e62a:	50cd      	str	r5, [r1, r3]
 800e62c:	4630      	mov	r0, r6
 800e62e:	f000 fa40 	bl	800eab2 <__malloc_unlock>
 800e632:	f104 000b 	add.w	r0, r4, #11
 800e636:	1d23      	adds	r3, r4, #4
 800e638:	f020 0007 	bic.w	r0, r0, #7
 800e63c:	1ac3      	subs	r3, r0, r3
 800e63e:	d0d3      	beq.n	800e5e8 <_malloc_r+0x20>
 800e640:	425a      	negs	r2, r3
 800e642:	50e2      	str	r2, [r4, r3]
 800e644:	e7d0      	b.n	800e5e8 <_malloc_r+0x20>
 800e646:	684b      	ldr	r3, [r1, #4]
 800e648:	428c      	cmp	r4, r1
 800e64a:	bf16      	itet	ne
 800e64c:	6063      	strne	r3, [r4, #4]
 800e64e:	6013      	streq	r3, [r2, #0]
 800e650:	460c      	movne	r4, r1
 800e652:	e7eb      	b.n	800e62c <_malloc_r+0x64>
 800e654:	460c      	mov	r4, r1
 800e656:	6849      	ldr	r1, [r1, #4]
 800e658:	e7cc      	b.n	800e5f4 <_malloc_r+0x2c>
 800e65a:	1cc4      	adds	r4, r0, #3
 800e65c:	f024 0403 	bic.w	r4, r4, #3
 800e660:	42a0      	cmp	r0, r4
 800e662:	d005      	beq.n	800e670 <_malloc_r+0xa8>
 800e664:	1a21      	subs	r1, r4, r0
 800e666:	4630      	mov	r0, r6
 800e668:	f000 f95a 	bl	800e920 <_sbrk_r>
 800e66c:	3001      	adds	r0, #1
 800e66e:	d0cf      	beq.n	800e610 <_malloc_r+0x48>
 800e670:	6025      	str	r5, [r4, #0]
 800e672:	e7db      	b.n	800e62c <_malloc_r+0x64>
 800e674:	20000a1c 	.word	0x20000a1c
 800e678:	20000a20 	.word	0x20000a20

0800e67c <__ssputs_r>:
 800e67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e680:	688e      	ldr	r6, [r1, #8]
 800e682:	4682      	mov	sl, r0
 800e684:	429e      	cmp	r6, r3
 800e686:	460c      	mov	r4, r1
 800e688:	4690      	mov	r8, r2
 800e68a:	4699      	mov	r9, r3
 800e68c:	d837      	bhi.n	800e6fe <__ssputs_r+0x82>
 800e68e:	898a      	ldrh	r2, [r1, #12]
 800e690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e694:	d031      	beq.n	800e6fa <__ssputs_r+0x7e>
 800e696:	2302      	movs	r3, #2
 800e698:	6825      	ldr	r5, [r4, #0]
 800e69a:	6909      	ldr	r1, [r1, #16]
 800e69c:	1a6f      	subs	r7, r5, r1
 800e69e:	6965      	ldr	r5, [r4, #20]
 800e6a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6a4:	fb95 f5f3 	sdiv	r5, r5, r3
 800e6a8:	f109 0301 	add.w	r3, r9, #1
 800e6ac:	443b      	add	r3, r7
 800e6ae:	429d      	cmp	r5, r3
 800e6b0:	bf38      	it	cc
 800e6b2:	461d      	movcc	r5, r3
 800e6b4:	0553      	lsls	r3, r2, #21
 800e6b6:	d530      	bpl.n	800e71a <__ssputs_r+0x9e>
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	f7ff ff85 	bl	800e5c8 <_malloc_r>
 800e6be:	4606      	mov	r6, r0
 800e6c0:	b950      	cbnz	r0, 800e6d8 <__ssputs_r+0x5c>
 800e6c2:	230c      	movs	r3, #12
 800e6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c8:	f8ca 3000 	str.w	r3, [sl]
 800e6cc:	89a3      	ldrh	r3, [r4, #12]
 800e6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6d2:	81a3      	strh	r3, [r4, #12]
 800e6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d8:	463a      	mov	r2, r7
 800e6da:	6921      	ldr	r1, [r4, #16]
 800e6dc:	f7ff fb16 	bl	800dd0c <memcpy>
 800e6e0:	89a3      	ldrh	r3, [r4, #12]
 800e6e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e6e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6ea:	81a3      	strh	r3, [r4, #12]
 800e6ec:	6126      	str	r6, [r4, #16]
 800e6ee:	443e      	add	r6, r7
 800e6f0:	6026      	str	r6, [r4, #0]
 800e6f2:	464e      	mov	r6, r9
 800e6f4:	6165      	str	r5, [r4, #20]
 800e6f6:	1bed      	subs	r5, r5, r7
 800e6f8:	60a5      	str	r5, [r4, #8]
 800e6fa:	454e      	cmp	r6, r9
 800e6fc:	d900      	bls.n	800e700 <__ssputs_r+0x84>
 800e6fe:	464e      	mov	r6, r9
 800e700:	4632      	mov	r2, r6
 800e702:	4641      	mov	r1, r8
 800e704:	6820      	ldr	r0, [r4, #0]
 800e706:	f7fc f925 	bl	800a954 <memmove>
 800e70a:	68a3      	ldr	r3, [r4, #8]
 800e70c:	2000      	movs	r0, #0
 800e70e:	1b9b      	subs	r3, r3, r6
 800e710:	60a3      	str	r3, [r4, #8]
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	441e      	add	r6, r3
 800e716:	6026      	str	r6, [r4, #0]
 800e718:	e7dc      	b.n	800e6d4 <__ssputs_r+0x58>
 800e71a:	462a      	mov	r2, r5
 800e71c:	f000 f9ca 	bl	800eab4 <_realloc_r>
 800e720:	4606      	mov	r6, r0
 800e722:	2800      	cmp	r0, #0
 800e724:	d1e2      	bne.n	800e6ec <__ssputs_r+0x70>
 800e726:	6921      	ldr	r1, [r4, #16]
 800e728:	4650      	mov	r0, sl
 800e72a:	f7ff ff01 	bl	800e530 <_free_r>
 800e72e:	e7c8      	b.n	800e6c2 <__ssputs_r+0x46>

0800e730 <_svfiprintf_r>:
 800e730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e734:	461d      	mov	r5, r3
 800e736:	898b      	ldrh	r3, [r1, #12]
 800e738:	b09d      	sub	sp, #116	; 0x74
 800e73a:	061f      	lsls	r7, r3, #24
 800e73c:	4680      	mov	r8, r0
 800e73e:	460c      	mov	r4, r1
 800e740:	4616      	mov	r6, r2
 800e742:	d50f      	bpl.n	800e764 <_svfiprintf_r+0x34>
 800e744:	690b      	ldr	r3, [r1, #16]
 800e746:	b96b      	cbnz	r3, 800e764 <_svfiprintf_r+0x34>
 800e748:	2140      	movs	r1, #64	; 0x40
 800e74a:	f7ff ff3d 	bl	800e5c8 <_malloc_r>
 800e74e:	6020      	str	r0, [r4, #0]
 800e750:	6120      	str	r0, [r4, #16]
 800e752:	b928      	cbnz	r0, 800e760 <_svfiprintf_r+0x30>
 800e754:	230c      	movs	r3, #12
 800e756:	f8c8 3000 	str.w	r3, [r8]
 800e75a:	f04f 30ff 	mov.w	r0, #4294967295
 800e75e:	e0c8      	b.n	800e8f2 <_svfiprintf_r+0x1c2>
 800e760:	2340      	movs	r3, #64	; 0x40
 800e762:	6163      	str	r3, [r4, #20]
 800e764:	2300      	movs	r3, #0
 800e766:	9309      	str	r3, [sp, #36]	; 0x24
 800e768:	2320      	movs	r3, #32
 800e76a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e76e:	2330      	movs	r3, #48	; 0x30
 800e770:	f04f 0b01 	mov.w	fp, #1
 800e774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e778:	9503      	str	r5, [sp, #12]
 800e77a:	4637      	mov	r7, r6
 800e77c:	463d      	mov	r5, r7
 800e77e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e782:	b10b      	cbz	r3, 800e788 <_svfiprintf_r+0x58>
 800e784:	2b25      	cmp	r3, #37	; 0x25
 800e786:	d13e      	bne.n	800e806 <_svfiprintf_r+0xd6>
 800e788:	ebb7 0a06 	subs.w	sl, r7, r6
 800e78c:	d00b      	beq.n	800e7a6 <_svfiprintf_r+0x76>
 800e78e:	4653      	mov	r3, sl
 800e790:	4632      	mov	r2, r6
 800e792:	4621      	mov	r1, r4
 800e794:	4640      	mov	r0, r8
 800e796:	f7ff ff71 	bl	800e67c <__ssputs_r>
 800e79a:	3001      	adds	r0, #1
 800e79c:	f000 80a4 	beq.w	800e8e8 <_svfiprintf_r+0x1b8>
 800e7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7a2:	4453      	add	r3, sl
 800e7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7a6:	783b      	ldrb	r3, [r7, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f000 809d 	beq.w	800e8e8 <_svfiprintf_r+0x1b8>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7b8:	9304      	str	r3, [sp, #16]
 800e7ba:	9307      	str	r3, [sp, #28]
 800e7bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7c0:	931a      	str	r3, [sp, #104]	; 0x68
 800e7c2:	462f      	mov	r7, r5
 800e7c4:	2205      	movs	r2, #5
 800e7c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e7ca:	4850      	ldr	r0, [pc, #320]	; (800e90c <_svfiprintf_r+0x1dc>)
 800e7cc:	f7ff fa90 	bl	800dcf0 <memchr>
 800e7d0:	9b04      	ldr	r3, [sp, #16]
 800e7d2:	b9d0      	cbnz	r0, 800e80a <_svfiprintf_r+0xda>
 800e7d4:	06d9      	lsls	r1, r3, #27
 800e7d6:	bf44      	itt	mi
 800e7d8:	2220      	movmi	r2, #32
 800e7da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e7de:	071a      	lsls	r2, r3, #28
 800e7e0:	bf44      	itt	mi
 800e7e2:	222b      	movmi	r2, #43	; 0x2b
 800e7e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e7e8:	782a      	ldrb	r2, [r5, #0]
 800e7ea:	2a2a      	cmp	r2, #42	; 0x2a
 800e7ec:	d015      	beq.n	800e81a <_svfiprintf_r+0xea>
 800e7ee:	462f      	mov	r7, r5
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	250a      	movs	r5, #10
 800e7f4:	9a07      	ldr	r2, [sp, #28]
 800e7f6:	4639      	mov	r1, r7
 800e7f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7fc:	3b30      	subs	r3, #48	; 0x30
 800e7fe:	2b09      	cmp	r3, #9
 800e800:	d94d      	bls.n	800e89e <_svfiprintf_r+0x16e>
 800e802:	b1b8      	cbz	r0, 800e834 <_svfiprintf_r+0x104>
 800e804:	e00f      	b.n	800e826 <_svfiprintf_r+0xf6>
 800e806:	462f      	mov	r7, r5
 800e808:	e7b8      	b.n	800e77c <_svfiprintf_r+0x4c>
 800e80a:	4a40      	ldr	r2, [pc, #256]	; (800e90c <_svfiprintf_r+0x1dc>)
 800e80c:	463d      	mov	r5, r7
 800e80e:	1a80      	subs	r0, r0, r2
 800e810:	fa0b f000 	lsl.w	r0, fp, r0
 800e814:	4318      	orrs	r0, r3
 800e816:	9004      	str	r0, [sp, #16]
 800e818:	e7d3      	b.n	800e7c2 <_svfiprintf_r+0x92>
 800e81a:	9a03      	ldr	r2, [sp, #12]
 800e81c:	1d11      	adds	r1, r2, #4
 800e81e:	6812      	ldr	r2, [r2, #0]
 800e820:	9103      	str	r1, [sp, #12]
 800e822:	2a00      	cmp	r2, #0
 800e824:	db01      	blt.n	800e82a <_svfiprintf_r+0xfa>
 800e826:	9207      	str	r2, [sp, #28]
 800e828:	e004      	b.n	800e834 <_svfiprintf_r+0x104>
 800e82a:	4252      	negs	r2, r2
 800e82c:	f043 0302 	orr.w	r3, r3, #2
 800e830:	9207      	str	r2, [sp, #28]
 800e832:	9304      	str	r3, [sp, #16]
 800e834:	783b      	ldrb	r3, [r7, #0]
 800e836:	2b2e      	cmp	r3, #46	; 0x2e
 800e838:	d10c      	bne.n	800e854 <_svfiprintf_r+0x124>
 800e83a:	787b      	ldrb	r3, [r7, #1]
 800e83c:	2b2a      	cmp	r3, #42	; 0x2a
 800e83e:	d133      	bne.n	800e8a8 <_svfiprintf_r+0x178>
 800e840:	9b03      	ldr	r3, [sp, #12]
 800e842:	3702      	adds	r7, #2
 800e844:	1d1a      	adds	r2, r3, #4
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	9203      	str	r2, [sp, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	bfb8      	it	lt
 800e84e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e852:	9305      	str	r3, [sp, #20]
 800e854:	4d2e      	ldr	r5, [pc, #184]	; (800e910 <_svfiprintf_r+0x1e0>)
 800e856:	2203      	movs	r2, #3
 800e858:	7839      	ldrb	r1, [r7, #0]
 800e85a:	4628      	mov	r0, r5
 800e85c:	f7ff fa48 	bl	800dcf0 <memchr>
 800e860:	b138      	cbz	r0, 800e872 <_svfiprintf_r+0x142>
 800e862:	2340      	movs	r3, #64	; 0x40
 800e864:	1b40      	subs	r0, r0, r5
 800e866:	fa03 f000 	lsl.w	r0, r3, r0
 800e86a:	9b04      	ldr	r3, [sp, #16]
 800e86c:	3701      	adds	r7, #1
 800e86e:	4303      	orrs	r3, r0
 800e870:	9304      	str	r3, [sp, #16]
 800e872:	7839      	ldrb	r1, [r7, #0]
 800e874:	2206      	movs	r2, #6
 800e876:	4827      	ldr	r0, [pc, #156]	; (800e914 <_svfiprintf_r+0x1e4>)
 800e878:	1c7e      	adds	r6, r7, #1
 800e87a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e87e:	f7ff fa37 	bl	800dcf0 <memchr>
 800e882:	2800      	cmp	r0, #0
 800e884:	d038      	beq.n	800e8f8 <_svfiprintf_r+0x1c8>
 800e886:	4b24      	ldr	r3, [pc, #144]	; (800e918 <_svfiprintf_r+0x1e8>)
 800e888:	bb13      	cbnz	r3, 800e8d0 <_svfiprintf_r+0x1a0>
 800e88a:	9b03      	ldr	r3, [sp, #12]
 800e88c:	3307      	adds	r3, #7
 800e88e:	f023 0307 	bic.w	r3, r3, #7
 800e892:	3308      	adds	r3, #8
 800e894:	9303      	str	r3, [sp, #12]
 800e896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e898:	444b      	add	r3, r9
 800e89a:	9309      	str	r3, [sp, #36]	; 0x24
 800e89c:	e76d      	b.n	800e77a <_svfiprintf_r+0x4a>
 800e89e:	fb05 3202 	mla	r2, r5, r2, r3
 800e8a2:	2001      	movs	r0, #1
 800e8a4:	460f      	mov	r7, r1
 800e8a6:	e7a6      	b.n	800e7f6 <_svfiprintf_r+0xc6>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	250a      	movs	r5, #10
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	3701      	adds	r7, #1
 800e8b0:	9305      	str	r3, [sp, #20]
 800e8b2:	4638      	mov	r0, r7
 800e8b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8b8:	3a30      	subs	r2, #48	; 0x30
 800e8ba:	2a09      	cmp	r2, #9
 800e8bc:	d903      	bls.n	800e8c6 <_svfiprintf_r+0x196>
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d0c8      	beq.n	800e854 <_svfiprintf_r+0x124>
 800e8c2:	9105      	str	r1, [sp, #20]
 800e8c4:	e7c6      	b.n	800e854 <_svfiprintf_r+0x124>
 800e8c6:	fb05 2101 	mla	r1, r5, r1, r2
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	4607      	mov	r7, r0
 800e8ce:	e7f0      	b.n	800e8b2 <_svfiprintf_r+0x182>
 800e8d0:	ab03      	add	r3, sp, #12
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	4622      	mov	r2, r4
 800e8d6:	4b11      	ldr	r3, [pc, #68]	; (800e91c <_svfiprintf_r+0x1ec>)
 800e8d8:	a904      	add	r1, sp, #16
 800e8da:	4640      	mov	r0, r8
 800e8dc:	f7fc f8ec 	bl	800aab8 <_printf_float>
 800e8e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e8e4:	4681      	mov	r9, r0
 800e8e6:	d1d6      	bne.n	800e896 <_svfiprintf_r+0x166>
 800e8e8:	89a3      	ldrh	r3, [r4, #12]
 800e8ea:	065b      	lsls	r3, r3, #25
 800e8ec:	f53f af35 	bmi.w	800e75a <_svfiprintf_r+0x2a>
 800e8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8f2:	b01d      	add	sp, #116	; 0x74
 800e8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f8:	ab03      	add	r3, sp, #12
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	4622      	mov	r2, r4
 800e8fe:	4b07      	ldr	r3, [pc, #28]	; (800e91c <_svfiprintf_r+0x1ec>)
 800e900:	a904      	add	r1, sp, #16
 800e902:	4640      	mov	r0, r8
 800e904:	f7fc fb84 	bl	800b010 <_printf_i>
 800e908:	e7ea      	b.n	800e8e0 <_svfiprintf_r+0x1b0>
 800e90a:	bf00      	nop
 800e90c:	0801012c 	.word	0x0801012c
 800e910:	08010132 	.word	0x08010132
 800e914:	08010136 	.word	0x08010136
 800e918:	0800aab9 	.word	0x0800aab9
 800e91c:	0800e67d 	.word	0x0800e67d

0800e920 <_sbrk_r>:
 800e920:	b538      	push	{r3, r4, r5, lr}
 800e922:	2300      	movs	r3, #0
 800e924:	4c05      	ldr	r4, [pc, #20]	; (800e93c <_sbrk_r+0x1c>)
 800e926:	4605      	mov	r5, r0
 800e928:	4608      	mov	r0, r1
 800e92a:	6023      	str	r3, [r4, #0]
 800e92c:	f7f3 fbb6 	bl	800209c <_sbrk>
 800e930:	1c43      	adds	r3, r0, #1
 800e932:	d102      	bne.n	800e93a <_sbrk_r+0x1a>
 800e934:	6823      	ldr	r3, [r4, #0]
 800e936:	b103      	cbz	r3, 800e93a <_sbrk_r+0x1a>
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	bd38      	pop	{r3, r4, r5, pc}
 800e93c:	200022f8 	.word	0x200022f8

0800e940 <__sread>:
 800e940:	b510      	push	{r4, lr}
 800e942:	460c      	mov	r4, r1
 800e944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e948:	f000 f8da 	bl	800eb00 <_read_r>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	bfab      	itete	ge
 800e950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e952:	89a3      	ldrhlt	r3, [r4, #12]
 800e954:	181b      	addge	r3, r3, r0
 800e956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e95a:	bfac      	ite	ge
 800e95c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e95e:	81a3      	strhlt	r3, [r4, #12]
 800e960:	bd10      	pop	{r4, pc}

0800e962 <__swrite>:
 800e962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e966:	461f      	mov	r7, r3
 800e968:	898b      	ldrh	r3, [r1, #12]
 800e96a:	4605      	mov	r5, r0
 800e96c:	05db      	lsls	r3, r3, #23
 800e96e:	460c      	mov	r4, r1
 800e970:	4616      	mov	r6, r2
 800e972:	d505      	bpl.n	800e980 <__swrite+0x1e>
 800e974:	2302      	movs	r3, #2
 800e976:	2200      	movs	r2, #0
 800e978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e97c:	f000 f886 	bl	800ea8c <_lseek_r>
 800e980:	89a3      	ldrh	r3, [r4, #12]
 800e982:	4632      	mov	r2, r6
 800e984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e988:	81a3      	strh	r3, [r4, #12]
 800e98a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e98e:	463b      	mov	r3, r7
 800e990:	4628      	mov	r0, r5
 800e992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e996:	f000 b835 	b.w	800ea04 <_write_r>

0800e99a <__sseek>:
 800e99a:	b510      	push	{r4, lr}
 800e99c:	460c      	mov	r4, r1
 800e99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a2:	f000 f873 	bl	800ea8c <_lseek_r>
 800e9a6:	1c43      	adds	r3, r0, #1
 800e9a8:	89a3      	ldrh	r3, [r4, #12]
 800e9aa:	bf15      	itete	ne
 800e9ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e9ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9b6:	81a3      	strheq	r3, [r4, #12]
 800e9b8:	bf18      	it	ne
 800e9ba:	81a3      	strhne	r3, [r4, #12]
 800e9bc:	bd10      	pop	{r4, pc}

0800e9be <__sclose>:
 800e9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c2:	f000 b831 	b.w	800ea28 <_close_r>

0800e9c6 <strncmp>:
 800e9c6:	b510      	push	{r4, lr}
 800e9c8:	b16a      	cbz	r2, 800e9e6 <strncmp+0x20>
 800e9ca:	3901      	subs	r1, #1
 800e9cc:	1884      	adds	r4, r0, r2
 800e9ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e9d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d103      	bne.n	800e9e2 <strncmp+0x1c>
 800e9da:	42a0      	cmp	r0, r4
 800e9dc:	d001      	beq.n	800e9e2 <strncmp+0x1c>
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1f5      	bne.n	800e9ce <strncmp+0x8>
 800e9e2:	1a98      	subs	r0, r3, r2
 800e9e4:	bd10      	pop	{r4, pc}
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	e7fc      	b.n	800e9e4 <strncmp+0x1e>

0800e9ea <__ascii_wctomb>:
 800e9ea:	b149      	cbz	r1, 800ea00 <__ascii_wctomb+0x16>
 800e9ec:	2aff      	cmp	r2, #255	; 0xff
 800e9ee:	bf8b      	itete	hi
 800e9f0:	238a      	movhi	r3, #138	; 0x8a
 800e9f2:	700a      	strbls	r2, [r1, #0]
 800e9f4:	6003      	strhi	r3, [r0, #0]
 800e9f6:	2001      	movls	r0, #1
 800e9f8:	bf88      	it	hi
 800e9fa:	f04f 30ff 	movhi.w	r0, #4294967295
 800e9fe:	4770      	bx	lr
 800ea00:	4608      	mov	r0, r1
 800ea02:	4770      	bx	lr

0800ea04 <_write_r>:
 800ea04:	b538      	push	{r3, r4, r5, lr}
 800ea06:	4605      	mov	r5, r0
 800ea08:	4608      	mov	r0, r1
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	4c05      	ldr	r4, [pc, #20]	; (800ea24 <_write_r+0x20>)
 800ea10:	6022      	str	r2, [r4, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	f7f3 faf5 	bl	8002002 <_write>
 800ea18:	1c43      	adds	r3, r0, #1
 800ea1a:	d102      	bne.n	800ea22 <_write_r+0x1e>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	b103      	cbz	r3, 800ea22 <_write_r+0x1e>
 800ea20:	602b      	str	r3, [r5, #0]
 800ea22:	bd38      	pop	{r3, r4, r5, pc}
 800ea24:	200022f8 	.word	0x200022f8

0800ea28 <_close_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	4c05      	ldr	r4, [pc, #20]	; (800ea44 <_close_r+0x1c>)
 800ea2e:	4605      	mov	r5, r0
 800ea30:	4608      	mov	r0, r1
 800ea32:	6023      	str	r3, [r4, #0]
 800ea34:	f7f3 fb01 	bl	800203a <_close>
 800ea38:	1c43      	adds	r3, r0, #1
 800ea3a:	d102      	bne.n	800ea42 <_close_r+0x1a>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	b103      	cbz	r3, 800ea42 <_close_r+0x1a>
 800ea40:	602b      	str	r3, [r5, #0]
 800ea42:	bd38      	pop	{r3, r4, r5, pc}
 800ea44:	200022f8 	.word	0x200022f8

0800ea48 <_fstat_r>:
 800ea48:	b538      	push	{r3, r4, r5, lr}
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	4c06      	ldr	r4, [pc, #24]	; (800ea68 <_fstat_r+0x20>)
 800ea4e:	4605      	mov	r5, r0
 800ea50:	4608      	mov	r0, r1
 800ea52:	4611      	mov	r1, r2
 800ea54:	6023      	str	r3, [r4, #0]
 800ea56:	f7f3 fafb 	bl	8002050 <_fstat>
 800ea5a:	1c43      	adds	r3, r0, #1
 800ea5c:	d102      	bne.n	800ea64 <_fstat_r+0x1c>
 800ea5e:	6823      	ldr	r3, [r4, #0]
 800ea60:	b103      	cbz	r3, 800ea64 <_fstat_r+0x1c>
 800ea62:	602b      	str	r3, [r5, #0]
 800ea64:	bd38      	pop	{r3, r4, r5, pc}
 800ea66:	bf00      	nop
 800ea68:	200022f8 	.word	0x200022f8

0800ea6c <_isatty_r>:
 800ea6c:	b538      	push	{r3, r4, r5, lr}
 800ea6e:	2300      	movs	r3, #0
 800ea70:	4c05      	ldr	r4, [pc, #20]	; (800ea88 <_isatty_r+0x1c>)
 800ea72:	4605      	mov	r5, r0
 800ea74:	4608      	mov	r0, r1
 800ea76:	6023      	str	r3, [r4, #0]
 800ea78:	f7f3 faf9 	bl	800206e <_isatty>
 800ea7c:	1c43      	adds	r3, r0, #1
 800ea7e:	d102      	bne.n	800ea86 <_isatty_r+0x1a>
 800ea80:	6823      	ldr	r3, [r4, #0]
 800ea82:	b103      	cbz	r3, 800ea86 <_isatty_r+0x1a>
 800ea84:	602b      	str	r3, [r5, #0]
 800ea86:	bd38      	pop	{r3, r4, r5, pc}
 800ea88:	200022f8 	.word	0x200022f8

0800ea8c <_lseek_r>:
 800ea8c:	b538      	push	{r3, r4, r5, lr}
 800ea8e:	4605      	mov	r5, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	4611      	mov	r1, r2
 800ea94:	2200      	movs	r2, #0
 800ea96:	4c05      	ldr	r4, [pc, #20]	; (800eaac <_lseek_r+0x20>)
 800ea98:	6022      	str	r2, [r4, #0]
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	f7f3 faf1 	bl	8002082 <_lseek>
 800eaa0:	1c43      	adds	r3, r0, #1
 800eaa2:	d102      	bne.n	800eaaa <_lseek_r+0x1e>
 800eaa4:	6823      	ldr	r3, [r4, #0]
 800eaa6:	b103      	cbz	r3, 800eaaa <_lseek_r+0x1e>
 800eaa8:	602b      	str	r3, [r5, #0]
 800eaaa:	bd38      	pop	{r3, r4, r5, pc}
 800eaac:	200022f8 	.word	0x200022f8

0800eab0 <__malloc_lock>:
 800eab0:	4770      	bx	lr

0800eab2 <__malloc_unlock>:
 800eab2:	4770      	bx	lr

0800eab4 <_realloc_r>:
 800eab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab6:	4607      	mov	r7, r0
 800eab8:	4614      	mov	r4, r2
 800eaba:	460e      	mov	r6, r1
 800eabc:	b921      	cbnz	r1, 800eac8 <_realloc_r+0x14>
 800eabe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eac2:	4611      	mov	r1, r2
 800eac4:	f7ff bd80 	b.w	800e5c8 <_malloc_r>
 800eac8:	b922      	cbnz	r2, 800ead4 <_realloc_r+0x20>
 800eaca:	f7ff fd31 	bl	800e530 <_free_r>
 800eace:	4625      	mov	r5, r4
 800ead0:	4628      	mov	r0, r5
 800ead2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ead4:	f000 f826 	bl	800eb24 <_malloc_usable_size_r>
 800ead8:	42a0      	cmp	r0, r4
 800eada:	d20f      	bcs.n	800eafc <_realloc_r+0x48>
 800eadc:	4621      	mov	r1, r4
 800eade:	4638      	mov	r0, r7
 800eae0:	f7ff fd72 	bl	800e5c8 <_malloc_r>
 800eae4:	4605      	mov	r5, r0
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d0f2      	beq.n	800ead0 <_realloc_r+0x1c>
 800eaea:	4631      	mov	r1, r6
 800eaec:	4622      	mov	r2, r4
 800eaee:	f7ff f90d 	bl	800dd0c <memcpy>
 800eaf2:	4631      	mov	r1, r6
 800eaf4:	4638      	mov	r0, r7
 800eaf6:	f7ff fd1b 	bl	800e530 <_free_r>
 800eafa:	e7e9      	b.n	800ead0 <_realloc_r+0x1c>
 800eafc:	4635      	mov	r5, r6
 800eafe:	e7e7      	b.n	800ead0 <_realloc_r+0x1c>

0800eb00 <_read_r>:
 800eb00:	b538      	push	{r3, r4, r5, lr}
 800eb02:	4605      	mov	r5, r0
 800eb04:	4608      	mov	r0, r1
 800eb06:	4611      	mov	r1, r2
 800eb08:	2200      	movs	r2, #0
 800eb0a:	4c05      	ldr	r4, [pc, #20]	; (800eb20 <_read_r+0x20>)
 800eb0c:	6022      	str	r2, [r4, #0]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	f7f3 fa5a 	bl	8001fc8 <_read>
 800eb14:	1c43      	adds	r3, r0, #1
 800eb16:	d102      	bne.n	800eb1e <_read_r+0x1e>
 800eb18:	6823      	ldr	r3, [r4, #0]
 800eb1a:	b103      	cbz	r3, 800eb1e <_read_r+0x1e>
 800eb1c:	602b      	str	r3, [r5, #0]
 800eb1e:	bd38      	pop	{r3, r4, r5, pc}
 800eb20:	200022f8 	.word	0x200022f8

0800eb24 <_malloc_usable_size_r>:
 800eb24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb28:	1f18      	subs	r0, r3, #4
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	bfbc      	itt	lt
 800eb2e:	580b      	ldrlt	r3, [r1, r0]
 800eb30:	18c0      	addlt	r0, r0, r3
 800eb32:	4770      	bx	lr

0800eb34 <cosf>:
 800eb34:	b507      	push	{r0, r1, r2, lr}
 800eb36:	4a18      	ldr	r2, [pc, #96]	; (800eb98 <cosf+0x64>)
 800eb38:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	4601      	mov	r1, r0
 800eb40:	dc03      	bgt.n	800eb4a <cosf+0x16>
 800eb42:	2100      	movs	r1, #0
 800eb44:	f000 f9b8 	bl	800eeb8 <__kernel_cosf>
 800eb48:	e004      	b.n	800eb54 <cosf+0x20>
 800eb4a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eb4e:	db04      	blt.n	800eb5a <cosf+0x26>
 800eb50:	f7f2 f87a 	bl	8000c48 <__aeabi_fsub>
 800eb54:	b003      	add	sp, #12
 800eb56:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb5a:	4669      	mov	r1, sp
 800eb5c:	f000 f854 	bl	800ec08 <__ieee754_rem_pio2f>
 800eb60:	f000 0203 	and.w	r2, r0, #3
 800eb64:	2a01      	cmp	r2, #1
 800eb66:	d005      	beq.n	800eb74 <cosf+0x40>
 800eb68:	2a02      	cmp	r2, #2
 800eb6a:	d00a      	beq.n	800eb82 <cosf+0x4e>
 800eb6c:	b972      	cbnz	r2, 800eb8c <cosf+0x58>
 800eb6e:	9901      	ldr	r1, [sp, #4]
 800eb70:	9800      	ldr	r0, [sp, #0]
 800eb72:	e7e7      	b.n	800eb44 <cosf+0x10>
 800eb74:	9901      	ldr	r1, [sp, #4]
 800eb76:	9800      	ldr	r0, [sp, #0]
 800eb78:	f000 fcbc 	bl	800f4f4 <__kernel_sinf>
 800eb7c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800eb80:	e7e8      	b.n	800eb54 <cosf+0x20>
 800eb82:	9901      	ldr	r1, [sp, #4]
 800eb84:	9800      	ldr	r0, [sp, #0]
 800eb86:	f000 f997 	bl	800eeb8 <__kernel_cosf>
 800eb8a:	e7f7      	b.n	800eb7c <cosf+0x48>
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	9901      	ldr	r1, [sp, #4]
 800eb90:	9800      	ldr	r0, [sp, #0]
 800eb92:	f000 fcaf 	bl	800f4f4 <__kernel_sinf>
 800eb96:	e7dd      	b.n	800eb54 <cosf+0x20>
 800eb98:	3f490fd8 	.word	0x3f490fd8

0800eb9c <sinf>:
 800eb9c:	b507      	push	{r0, r1, r2, lr}
 800eb9e:	4a19      	ldr	r2, [pc, #100]	; (800ec04 <sinf+0x68>)
 800eba0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800eba4:	4293      	cmp	r3, r2
 800eba6:	4601      	mov	r1, r0
 800eba8:	dc04      	bgt.n	800ebb4 <sinf+0x18>
 800ebaa:	2200      	movs	r2, #0
 800ebac:	2100      	movs	r1, #0
 800ebae:	f000 fca1 	bl	800f4f4 <__kernel_sinf>
 800ebb2:	e004      	b.n	800ebbe <sinf+0x22>
 800ebb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ebb8:	db04      	blt.n	800ebc4 <sinf+0x28>
 800ebba:	f7f2 f845 	bl	8000c48 <__aeabi_fsub>
 800ebbe:	b003      	add	sp, #12
 800ebc0:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebc4:	4669      	mov	r1, sp
 800ebc6:	f000 f81f 	bl	800ec08 <__ieee754_rem_pio2f>
 800ebca:	f000 0003 	and.w	r0, r0, #3
 800ebce:	2801      	cmp	r0, #1
 800ebd0:	d006      	beq.n	800ebe0 <sinf+0x44>
 800ebd2:	2802      	cmp	r0, #2
 800ebd4:	d009      	beq.n	800ebea <sinf+0x4e>
 800ebd6:	b980      	cbnz	r0, 800ebfa <sinf+0x5e>
 800ebd8:	2201      	movs	r2, #1
 800ebda:	9901      	ldr	r1, [sp, #4]
 800ebdc:	9800      	ldr	r0, [sp, #0]
 800ebde:	e7e6      	b.n	800ebae <sinf+0x12>
 800ebe0:	9901      	ldr	r1, [sp, #4]
 800ebe2:	9800      	ldr	r0, [sp, #0]
 800ebe4:	f000 f968 	bl	800eeb8 <__kernel_cosf>
 800ebe8:	e7e9      	b.n	800ebbe <sinf+0x22>
 800ebea:	2201      	movs	r2, #1
 800ebec:	9901      	ldr	r1, [sp, #4]
 800ebee:	9800      	ldr	r0, [sp, #0]
 800ebf0:	f000 fc80 	bl	800f4f4 <__kernel_sinf>
 800ebf4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ebf8:	e7e1      	b.n	800ebbe <sinf+0x22>
 800ebfa:	9901      	ldr	r1, [sp, #4]
 800ebfc:	9800      	ldr	r0, [sp, #0]
 800ebfe:	f000 f95b 	bl	800eeb8 <__kernel_cosf>
 800ec02:	e7f7      	b.n	800ebf4 <sinf+0x58>
 800ec04:	3f490fd8 	.word	0x3f490fd8

0800ec08 <__ieee754_rem_pio2f>:
 800ec08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0c:	4a9d      	ldr	r2, [pc, #628]	; (800ee84 <__ieee754_rem_pio2f+0x27c>)
 800ec0e:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800ec12:	4295      	cmp	r5, r2
 800ec14:	b087      	sub	sp, #28
 800ec16:	460c      	mov	r4, r1
 800ec18:	4607      	mov	r7, r0
 800ec1a:	dc04      	bgt.n	800ec26 <__ieee754_rem_pio2f+0x1e>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	6020      	str	r0, [r4, #0]
 800ec20:	604b      	str	r3, [r1, #4]
 800ec22:	2600      	movs	r6, #0
 800ec24:	e01a      	b.n	800ec5c <__ieee754_rem_pio2f+0x54>
 800ec26:	4a98      	ldr	r2, [pc, #608]	; (800ee88 <__ieee754_rem_pio2f+0x280>)
 800ec28:	4295      	cmp	r5, r2
 800ec2a:	dc4b      	bgt.n	800ecc4 <__ieee754_rem_pio2f+0xbc>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	f025 050f 	bic.w	r5, r5, #15
 800ec32:	4996      	ldr	r1, [pc, #600]	; (800ee8c <__ieee754_rem_pio2f+0x284>)
 800ec34:	4e96      	ldr	r6, [pc, #600]	; (800ee90 <__ieee754_rem_pio2f+0x288>)
 800ec36:	dd23      	ble.n	800ec80 <__ieee754_rem_pio2f+0x78>
 800ec38:	f7f2 f806 	bl	8000c48 <__aeabi_fsub>
 800ec3c:	42b5      	cmp	r5, r6
 800ec3e:	4607      	mov	r7, r0
 800ec40:	d010      	beq.n	800ec64 <__ieee754_rem_pio2f+0x5c>
 800ec42:	4994      	ldr	r1, [pc, #592]	; (800ee94 <__ieee754_rem_pio2f+0x28c>)
 800ec44:	f7f2 f800 	bl	8000c48 <__aeabi_fsub>
 800ec48:	4601      	mov	r1, r0
 800ec4a:	6020      	str	r0, [r4, #0]
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	f7f1 fffb 	bl	8000c48 <__aeabi_fsub>
 800ec52:	4990      	ldr	r1, [pc, #576]	; (800ee94 <__ieee754_rem_pio2f+0x28c>)
 800ec54:	f7f1 fff8 	bl	8000c48 <__aeabi_fsub>
 800ec58:	2601      	movs	r6, #1
 800ec5a:	6060      	str	r0, [r4, #4]
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	b007      	add	sp, #28
 800ec60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec64:	498c      	ldr	r1, [pc, #560]	; (800ee98 <__ieee754_rem_pio2f+0x290>)
 800ec66:	f7f1 ffef 	bl	8000c48 <__aeabi_fsub>
 800ec6a:	498c      	ldr	r1, [pc, #560]	; (800ee9c <__ieee754_rem_pio2f+0x294>)
 800ec6c:	4605      	mov	r5, r0
 800ec6e:	f7f1 ffeb 	bl	8000c48 <__aeabi_fsub>
 800ec72:	4601      	mov	r1, r0
 800ec74:	6020      	str	r0, [r4, #0]
 800ec76:	4628      	mov	r0, r5
 800ec78:	f7f1 ffe6 	bl	8000c48 <__aeabi_fsub>
 800ec7c:	4987      	ldr	r1, [pc, #540]	; (800ee9c <__ieee754_rem_pio2f+0x294>)
 800ec7e:	e7e9      	b.n	800ec54 <__ieee754_rem_pio2f+0x4c>
 800ec80:	f7f1 ffe4 	bl	8000c4c <__addsf3>
 800ec84:	42b5      	cmp	r5, r6
 800ec86:	4607      	mov	r7, r0
 800ec88:	d00e      	beq.n	800eca8 <__ieee754_rem_pio2f+0xa0>
 800ec8a:	4982      	ldr	r1, [pc, #520]	; (800ee94 <__ieee754_rem_pio2f+0x28c>)
 800ec8c:	f7f1 ffde 	bl	8000c4c <__addsf3>
 800ec90:	4601      	mov	r1, r0
 800ec92:	6020      	str	r0, [r4, #0]
 800ec94:	4638      	mov	r0, r7
 800ec96:	f7f1 ffd7 	bl	8000c48 <__aeabi_fsub>
 800ec9a:	497e      	ldr	r1, [pc, #504]	; (800ee94 <__ieee754_rem_pio2f+0x28c>)
 800ec9c:	f7f1 ffd6 	bl	8000c4c <__addsf3>
 800eca0:	f04f 36ff 	mov.w	r6, #4294967295
 800eca4:	6060      	str	r0, [r4, #4]
 800eca6:	e7d9      	b.n	800ec5c <__ieee754_rem_pio2f+0x54>
 800eca8:	497b      	ldr	r1, [pc, #492]	; (800ee98 <__ieee754_rem_pio2f+0x290>)
 800ecaa:	f7f1 ffcf 	bl	8000c4c <__addsf3>
 800ecae:	497b      	ldr	r1, [pc, #492]	; (800ee9c <__ieee754_rem_pio2f+0x294>)
 800ecb0:	4605      	mov	r5, r0
 800ecb2:	f7f1 ffcb 	bl	8000c4c <__addsf3>
 800ecb6:	4601      	mov	r1, r0
 800ecb8:	6020      	str	r0, [r4, #0]
 800ecba:	4628      	mov	r0, r5
 800ecbc:	f7f1 ffc4 	bl	8000c48 <__aeabi_fsub>
 800ecc0:	4976      	ldr	r1, [pc, #472]	; (800ee9c <__ieee754_rem_pio2f+0x294>)
 800ecc2:	e7eb      	b.n	800ec9c <__ieee754_rem_pio2f+0x94>
 800ecc4:	4a76      	ldr	r2, [pc, #472]	; (800eea0 <__ieee754_rem_pio2f+0x298>)
 800ecc6:	4295      	cmp	r5, r2
 800ecc8:	f300 808c 	bgt.w	800ede4 <__ieee754_rem_pio2f+0x1dc>
 800eccc:	f000 fc88 	bl	800f5e0 <fabsf>
 800ecd0:	4974      	ldr	r1, [pc, #464]	; (800eea4 <__ieee754_rem_pio2f+0x29c>)
 800ecd2:	4680      	mov	r8, r0
 800ecd4:	f7f2 f8c2 	bl	8000e5c <__aeabi_fmul>
 800ecd8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ecdc:	f7f1 ffb6 	bl	8000c4c <__addsf3>
 800ece0:	f7f2 fa82 	bl	80011e8 <__aeabi_f2iz>
 800ece4:	4606      	mov	r6, r0
 800ece6:	f7f2 f865 	bl	8000db4 <__aeabi_i2f>
 800ecea:	4968      	ldr	r1, [pc, #416]	; (800ee8c <__ieee754_rem_pio2f+0x284>)
 800ecec:	4682      	mov	sl, r0
 800ecee:	f7f2 f8b5 	bl	8000e5c <__aeabi_fmul>
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	4640      	mov	r0, r8
 800ecf6:	f7f1 ffa7 	bl	8000c48 <__aeabi_fsub>
 800ecfa:	4966      	ldr	r1, [pc, #408]	; (800ee94 <__ieee754_rem_pio2f+0x28c>)
 800ecfc:	4680      	mov	r8, r0
 800ecfe:	4650      	mov	r0, sl
 800ed00:	f7f2 f8ac 	bl	8000e5c <__aeabi_fmul>
 800ed04:	2e1f      	cmp	r6, #31
 800ed06:	4681      	mov	r9, r0
 800ed08:	dc0c      	bgt.n	800ed24 <__ieee754_rem_pio2f+0x11c>
 800ed0a:	4a67      	ldr	r2, [pc, #412]	; (800eea8 <__ieee754_rem_pio2f+0x2a0>)
 800ed0c:	1e71      	subs	r1, r6, #1
 800ed0e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ed12:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d004      	beq.n	800ed24 <__ieee754_rem_pio2f+0x11c>
 800ed1a:	4649      	mov	r1, r9
 800ed1c:	4640      	mov	r0, r8
 800ed1e:	f7f1 ff93 	bl	8000c48 <__aeabi_fsub>
 800ed22:	e009      	b.n	800ed38 <__ieee754_rem_pio2f+0x130>
 800ed24:	4649      	mov	r1, r9
 800ed26:	4640      	mov	r0, r8
 800ed28:	f7f1 ff8e 	bl	8000c48 <__aeabi_fsub>
 800ed2c:	15ed      	asrs	r5, r5, #23
 800ed2e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ed32:	1aeb      	subs	r3, r5, r3
 800ed34:	2b08      	cmp	r3, #8
 800ed36:	dc01      	bgt.n	800ed3c <__ieee754_rem_pio2f+0x134>
 800ed38:	6020      	str	r0, [r4, #0]
 800ed3a:	e024      	b.n	800ed86 <__ieee754_rem_pio2f+0x17e>
 800ed3c:	4956      	ldr	r1, [pc, #344]	; (800ee98 <__ieee754_rem_pio2f+0x290>)
 800ed3e:	4650      	mov	r0, sl
 800ed40:	f7f2 f88c 	bl	8000e5c <__aeabi_fmul>
 800ed44:	4681      	mov	r9, r0
 800ed46:	4601      	mov	r1, r0
 800ed48:	4640      	mov	r0, r8
 800ed4a:	f7f1 ff7d 	bl	8000c48 <__aeabi_fsub>
 800ed4e:	4601      	mov	r1, r0
 800ed50:	4683      	mov	fp, r0
 800ed52:	4640      	mov	r0, r8
 800ed54:	f7f1 ff78 	bl	8000c48 <__aeabi_fsub>
 800ed58:	4649      	mov	r1, r9
 800ed5a:	f7f1 ff75 	bl	8000c48 <__aeabi_fsub>
 800ed5e:	4680      	mov	r8, r0
 800ed60:	494e      	ldr	r1, [pc, #312]	; (800ee9c <__ieee754_rem_pio2f+0x294>)
 800ed62:	4650      	mov	r0, sl
 800ed64:	f7f2 f87a 	bl	8000e5c <__aeabi_fmul>
 800ed68:	4641      	mov	r1, r8
 800ed6a:	f7f1 ff6d 	bl	8000c48 <__aeabi_fsub>
 800ed6e:	4601      	mov	r1, r0
 800ed70:	4681      	mov	r9, r0
 800ed72:	4658      	mov	r0, fp
 800ed74:	f7f1 ff68 	bl	8000c48 <__aeabi_fsub>
 800ed78:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ed7c:	1aed      	subs	r5, r5, r3
 800ed7e:	2d19      	cmp	r5, #25
 800ed80:	dc15      	bgt.n	800edae <__ieee754_rem_pio2f+0x1a6>
 800ed82:	46d8      	mov	r8, fp
 800ed84:	6020      	str	r0, [r4, #0]
 800ed86:	6825      	ldr	r5, [r4, #0]
 800ed88:	4640      	mov	r0, r8
 800ed8a:	4629      	mov	r1, r5
 800ed8c:	f7f1 ff5c 	bl	8000c48 <__aeabi_fsub>
 800ed90:	4649      	mov	r1, r9
 800ed92:	f7f1 ff59 	bl	8000c48 <__aeabi_fsub>
 800ed96:	2f00      	cmp	r7, #0
 800ed98:	6060      	str	r0, [r4, #4]
 800ed9a:	f6bf af5f 	bge.w	800ec5c <__ieee754_rem_pio2f+0x54>
 800ed9e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800eda2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800eda6:	6025      	str	r5, [r4, #0]
 800eda8:	6060      	str	r0, [r4, #4]
 800edaa:	4276      	negs	r6, r6
 800edac:	e756      	b.n	800ec5c <__ieee754_rem_pio2f+0x54>
 800edae:	493f      	ldr	r1, [pc, #252]	; (800eeac <__ieee754_rem_pio2f+0x2a4>)
 800edb0:	4650      	mov	r0, sl
 800edb2:	f7f2 f853 	bl	8000e5c <__aeabi_fmul>
 800edb6:	4605      	mov	r5, r0
 800edb8:	4601      	mov	r1, r0
 800edba:	4658      	mov	r0, fp
 800edbc:	f7f1 ff44 	bl	8000c48 <__aeabi_fsub>
 800edc0:	4601      	mov	r1, r0
 800edc2:	4680      	mov	r8, r0
 800edc4:	4658      	mov	r0, fp
 800edc6:	f7f1 ff3f 	bl	8000c48 <__aeabi_fsub>
 800edca:	4629      	mov	r1, r5
 800edcc:	f7f1 ff3c 	bl	8000c48 <__aeabi_fsub>
 800edd0:	4605      	mov	r5, r0
 800edd2:	4937      	ldr	r1, [pc, #220]	; (800eeb0 <__ieee754_rem_pio2f+0x2a8>)
 800edd4:	4650      	mov	r0, sl
 800edd6:	f7f2 f841 	bl	8000e5c <__aeabi_fmul>
 800edda:	4629      	mov	r1, r5
 800eddc:	f7f1 ff34 	bl	8000c48 <__aeabi_fsub>
 800ede0:	4681      	mov	r9, r0
 800ede2:	e79a      	b.n	800ed1a <__ieee754_rem_pio2f+0x112>
 800ede4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ede8:	db05      	blt.n	800edf6 <__ieee754_rem_pio2f+0x1ee>
 800edea:	4601      	mov	r1, r0
 800edec:	f7f1 ff2c 	bl	8000c48 <__aeabi_fsub>
 800edf0:	6060      	str	r0, [r4, #4]
 800edf2:	6020      	str	r0, [r4, #0]
 800edf4:	e715      	b.n	800ec22 <__ieee754_rem_pio2f+0x1a>
 800edf6:	15ee      	asrs	r6, r5, #23
 800edf8:	3e86      	subs	r6, #134	; 0x86
 800edfa:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800edfe:	4628      	mov	r0, r5
 800ee00:	f7f2 f9f2 	bl	80011e8 <__aeabi_f2iz>
 800ee04:	f7f1 ffd6 	bl	8000db4 <__aeabi_i2f>
 800ee08:	4601      	mov	r1, r0
 800ee0a:	9003      	str	r0, [sp, #12]
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	f7f1 ff1b 	bl	8000c48 <__aeabi_fsub>
 800ee12:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ee16:	f7f2 f821 	bl	8000e5c <__aeabi_fmul>
 800ee1a:	4680      	mov	r8, r0
 800ee1c:	f7f2 f9e4 	bl	80011e8 <__aeabi_f2iz>
 800ee20:	f7f1 ffc8 	bl	8000db4 <__aeabi_i2f>
 800ee24:	4601      	mov	r1, r0
 800ee26:	9004      	str	r0, [sp, #16]
 800ee28:	4605      	mov	r5, r0
 800ee2a:	4640      	mov	r0, r8
 800ee2c:	f7f1 ff0c 	bl	8000c48 <__aeabi_fsub>
 800ee30:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ee34:	f7f2 f812 	bl	8000e5c <__aeabi_fmul>
 800ee38:	2100      	movs	r1, #0
 800ee3a:	9005      	str	r0, [sp, #20]
 800ee3c:	f7f2 f9a2 	bl	8001184 <__aeabi_fcmpeq>
 800ee40:	b1e8      	cbz	r0, 800ee7e <__ieee754_rem_pio2f+0x276>
 800ee42:	2100      	movs	r1, #0
 800ee44:	4628      	mov	r0, r5
 800ee46:	f7f2 f99d 	bl	8001184 <__aeabi_fcmpeq>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	bf14      	ite	ne
 800ee4e:	2301      	movne	r3, #1
 800ee50:	2302      	moveq	r3, #2
 800ee52:	4a18      	ldr	r2, [pc, #96]	; (800eeb4 <__ieee754_rem_pio2f+0x2ac>)
 800ee54:	4621      	mov	r1, r4
 800ee56:	9201      	str	r2, [sp, #4]
 800ee58:	2202      	movs	r2, #2
 800ee5a:	a803      	add	r0, sp, #12
 800ee5c:	9200      	str	r2, [sp, #0]
 800ee5e:	4632      	mov	r2, r6
 800ee60:	f000 f8aa 	bl	800efb8 <__kernel_rem_pio2f>
 800ee64:	2f00      	cmp	r7, #0
 800ee66:	4606      	mov	r6, r0
 800ee68:	f6bf aef8 	bge.w	800ec5c <__ieee754_rem_pio2f+0x54>
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee72:	6023      	str	r3, [r4, #0]
 800ee74:	6863      	ldr	r3, [r4, #4]
 800ee76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee7a:	6063      	str	r3, [r4, #4]
 800ee7c:	e795      	b.n	800edaa <__ieee754_rem_pio2f+0x1a2>
 800ee7e:	2303      	movs	r3, #3
 800ee80:	e7e7      	b.n	800ee52 <__ieee754_rem_pio2f+0x24a>
 800ee82:	bf00      	nop
 800ee84:	3f490fd8 	.word	0x3f490fd8
 800ee88:	4016cbe3 	.word	0x4016cbe3
 800ee8c:	3fc90f80 	.word	0x3fc90f80
 800ee90:	3fc90fd0 	.word	0x3fc90fd0
 800ee94:	37354443 	.word	0x37354443
 800ee98:	37354400 	.word	0x37354400
 800ee9c:	2e85a308 	.word	0x2e85a308
 800eea0:	43490f80 	.word	0x43490f80
 800eea4:	3f22f984 	.word	0x3f22f984
 800eea8:	08010240 	.word	0x08010240
 800eeac:	2e85a300 	.word	0x2e85a300
 800eeb0:	248d3132 	.word	0x248d3132
 800eeb4:	080102c0 	.word	0x080102c0

0800eeb8 <__kernel_cosf>:
 800eeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eebc:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800eec0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800eec4:	4606      	mov	r6, r0
 800eec6:	4688      	mov	r8, r1
 800eec8:	da03      	bge.n	800eed2 <__kernel_cosf+0x1a>
 800eeca:	f7f2 f98d 	bl	80011e8 <__aeabi_f2iz>
 800eece:	2800      	cmp	r0, #0
 800eed0:	d05c      	beq.n	800ef8c <__kernel_cosf+0xd4>
 800eed2:	4631      	mov	r1, r6
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7f1 ffc1 	bl	8000e5c <__aeabi_fmul>
 800eeda:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800eede:	4605      	mov	r5, r0
 800eee0:	f7f1 ffbc 	bl	8000e5c <__aeabi_fmul>
 800eee4:	492b      	ldr	r1, [pc, #172]	; (800ef94 <__kernel_cosf+0xdc>)
 800eee6:	4607      	mov	r7, r0
 800eee8:	4628      	mov	r0, r5
 800eeea:	f7f1 ffb7 	bl	8000e5c <__aeabi_fmul>
 800eeee:	492a      	ldr	r1, [pc, #168]	; (800ef98 <__kernel_cosf+0xe0>)
 800eef0:	f7f1 feac 	bl	8000c4c <__addsf3>
 800eef4:	4629      	mov	r1, r5
 800eef6:	f7f1 ffb1 	bl	8000e5c <__aeabi_fmul>
 800eefa:	4928      	ldr	r1, [pc, #160]	; (800ef9c <__kernel_cosf+0xe4>)
 800eefc:	f7f1 fea4 	bl	8000c48 <__aeabi_fsub>
 800ef00:	4629      	mov	r1, r5
 800ef02:	f7f1 ffab 	bl	8000e5c <__aeabi_fmul>
 800ef06:	4926      	ldr	r1, [pc, #152]	; (800efa0 <__kernel_cosf+0xe8>)
 800ef08:	f7f1 fea0 	bl	8000c4c <__addsf3>
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	f7f1 ffa5 	bl	8000e5c <__aeabi_fmul>
 800ef12:	4924      	ldr	r1, [pc, #144]	; (800efa4 <__kernel_cosf+0xec>)
 800ef14:	f7f1 fe98 	bl	8000c48 <__aeabi_fsub>
 800ef18:	4629      	mov	r1, r5
 800ef1a:	f7f1 ff9f 	bl	8000e5c <__aeabi_fmul>
 800ef1e:	4922      	ldr	r1, [pc, #136]	; (800efa8 <__kernel_cosf+0xf0>)
 800ef20:	f7f1 fe94 	bl	8000c4c <__addsf3>
 800ef24:	4629      	mov	r1, r5
 800ef26:	f7f1 ff99 	bl	8000e5c <__aeabi_fmul>
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	f7f1 ff96 	bl	8000e5c <__aeabi_fmul>
 800ef30:	4641      	mov	r1, r8
 800ef32:	4605      	mov	r5, r0
 800ef34:	4630      	mov	r0, r6
 800ef36:	f7f1 ff91 	bl	8000e5c <__aeabi_fmul>
 800ef3a:	4601      	mov	r1, r0
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	f7f1 fe83 	bl	8000c48 <__aeabi_fsub>
 800ef42:	4b1a      	ldr	r3, [pc, #104]	; (800efac <__kernel_cosf+0xf4>)
 800ef44:	4605      	mov	r5, r0
 800ef46:	429c      	cmp	r4, r3
 800ef48:	dc0a      	bgt.n	800ef60 <__kernel_cosf+0xa8>
 800ef4a:	4601      	mov	r1, r0
 800ef4c:	4638      	mov	r0, r7
 800ef4e:	f7f1 fe7b 	bl	8000c48 <__aeabi_fsub>
 800ef52:	4601      	mov	r1, r0
 800ef54:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef58:	f7f1 fe76 	bl	8000c48 <__aeabi_fsub>
 800ef5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef60:	4b13      	ldr	r3, [pc, #76]	; (800efb0 <__kernel_cosf+0xf8>)
 800ef62:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef66:	429c      	cmp	r4, r3
 800ef68:	bfcc      	ite	gt
 800ef6a:	4c12      	ldrgt	r4, [pc, #72]	; (800efb4 <__kernel_cosf+0xfc>)
 800ef6c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ef70:	4621      	mov	r1, r4
 800ef72:	f7f1 fe69 	bl	8000c48 <__aeabi_fsub>
 800ef76:	4621      	mov	r1, r4
 800ef78:	4606      	mov	r6, r0
 800ef7a:	4638      	mov	r0, r7
 800ef7c:	f7f1 fe64 	bl	8000c48 <__aeabi_fsub>
 800ef80:	4629      	mov	r1, r5
 800ef82:	f7f1 fe61 	bl	8000c48 <__aeabi_fsub>
 800ef86:	4601      	mov	r1, r0
 800ef88:	4630      	mov	r0, r6
 800ef8a:	e7e5      	b.n	800ef58 <__kernel_cosf+0xa0>
 800ef8c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ef90:	e7e4      	b.n	800ef5c <__kernel_cosf+0xa4>
 800ef92:	bf00      	nop
 800ef94:	ad47d74e 	.word	0xad47d74e
 800ef98:	310f74f6 	.word	0x310f74f6
 800ef9c:	3493f27c 	.word	0x3493f27c
 800efa0:	37d00d01 	.word	0x37d00d01
 800efa4:	3ab60b61 	.word	0x3ab60b61
 800efa8:	3d2aaaab 	.word	0x3d2aaaab
 800efac:	3e999999 	.word	0x3e999999
 800efb0:	3f480000 	.word	0x3f480000
 800efb4:	3e900000 	.word	0x3e900000

0800efb8 <__kernel_rem_pio2f>:
 800efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efbc:	b0d9      	sub	sp, #356	; 0x164
 800efbe:	9304      	str	r3, [sp, #16]
 800efc0:	9101      	str	r1, [sp, #4]
 800efc2:	4bc3      	ldr	r3, [pc, #780]	; (800f2d0 <__kernel_rem_pio2f+0x318>)
 800efc4:	9962      	ldr	r1, [sp, #392]	; 0x188
 800efc6:	1ed4      	subs	r4, r2, #3
 800efc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efcc:	2500      	movs	r5, #0
 800efce:	9302      	str	r3, [sp, #8]
 800efd0:	9b04      	ldr	r3, [sp, #16]
 800efd2:	f04f 0a00 	mov.w	sl, #0
 800efd6:	3b01      	subs	r3, #1
 800efd8:	9303      	str	r3, [sp, #12]
 800efda:	2308      	movs	r3, #8
 800efdc:	fb94 f4f3 	sdiv	r4, r4, r3
 800efe0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800efe4:	1c66      	adds	r6, r4, #1
 800efe6:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800efea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800efee:	eb03 0802 	add.w	r8, r3, r2
 800eff2:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800eff4:	1aa7      	subs	r7, r4, r2
 800eff6:	9005      	str	r0, [sp, #20]
 800eff8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800effc:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800f000:	4545      	cmp	r5, r8
 800f002:	dd7f      	ble.n	800f104 <__kernel_rem_pio2f+0x14c>
 800f004:	f04f 0800 	mov.w	r8, #0
 800f008:	f04f 0a00 	mov.w	sl, #0
 800f00c:	f06f 0b03 	mvn.w	fp, #3
 800f010:	9b04      	ldr	r3, [sp, #16]
 800f012:	aa1c      	add	r2, sp, #112	; 0x70
 800f014:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f018:	ab44      	add	r3, sp, #272	; 0x110
 800f01a:	9a02      	ldr	r2, [sp, #8]
 800f01c:	4590      	cmp	r8, r2
 800f01e:	f340 8097 	ble.w	800f150 <__kernel_rem_pio2f+0x198>
 800f022:	4613      	mov	r3, r2
 800f024:	aa08      	add	r2, sp, #32
 800f026:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f02a:	9307      	str	r3, [sp, #28]
 800f02c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800f02e:	9f02      	ldr	r7, [sp, #8]
 800f030:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f034:	9306      	str	r3, [sp, #24]
 800f036:	46ba      	mov	sl, r7
 800f038:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800f03c:	ab58      	add	r3, sp, #352	; 0x160
 800f03e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800f042:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800f046:	ad07      	add	r5, sp, #28
 800f048:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800f04c:	f1ba 0f00 	cmp.w	sl, #0
 800f050:	f300 8081 	bgt.w	800f156 <__kernel_rem_pio2f+0x19e>
 800f054:	4631      	mov	r1, r6
 800f056:	4620      	mov	r0, r4
 800f058:	f000 fb06 	bl	800f668 <scalbnf>
 800f05c:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800f060:	4604      	mov	r4, r0
 800f062:	f7f1 fefb 	bl	8000e5c <__aeabi_fmul>
 800f066:	f000 fabf 	bl	800f5e8 <floorf>
 800f06a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800f06e:	f7f1 fef5 	bl	8000e5c <__aeabi_fmul>
 800f072:	4601      	mov	r1, r0
 800f074:	4620      	mov	r0, r4
 800f076:	f7f1 fde7 	bl	8000c48 <__aeabi_fsub>
 800f07a:	4604      	mov	r4, r0
 800f07c:	f7f2 f8b4 	bl	80011e8 <__aeabi_f2iz>
 800f080:	4681      	mov	r9, r0
 800f082:	f7f1 fe97 	bl	8000db4 <__aeabi_i2f>
 800f086:	4601      	mov	r1, r0
 800f088:	4620      	mov	r0, r4
 800f08a:	f7f1 fddd 	bl	8000c48 <__aeabi_fsub>
 800f08e:	2e00      	cmp	r6, #0
 800f090:	4604      	mov	r4, r0
 800f092:	dd7e      	ble.n	800f192 <__kernel_rem_pio2f+0x1da>
 800f094:	1e7b      	subs	r3, r7, #1
 800f096:	aa08      	add	r2, sp, #32
 800f098:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800f09c:	f1c6 0208 	rsb	r2, r6, #8
 800f0a0:	fa45 f002 	asr.w	r0, r5, r2
 800f0a4:	4481      	add	r9, r0
 800f0a6:	4090      	lsls	r0, r2
 800f0a8:	1a2d      	subs	r5, r5, r0
 800f0aa:	aa08      	add	r2, sp, #32
 800f0ac:	f1c6 0007 	rsb	r0, r6, #7
 800f0b0:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800f0b4:	4105      	asrs	r5, r0
 800f0b6:	2d00      	cmp	r5, #0
 800f0b8:	dd79      	ble.n	800f1ae <__kernel_rem_pio2f+0x1f6>
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	4690      	mov	r8, r2
 800f0be:	f109 0901 	add.w	r9, r9, #1
 800f0c2:	4297      	cmp	r7, r2
 800f0c4:	f300 80ae 	bgt.w	800f224 <__kernel_rem_pio2f+0x26c>
 800f0c8:	2e00      	cmp	r6, #0
 800f0ca:	dd05      	ble.n	800f0d8 <__kernel_rem_pio2f+0x120>
 800f0cc:	2e01      	cmp	r6, #1
 800f0ce:	f000 80c0 	beq.w	800f252 <__kernel_rem_pio2f+0x29a>
 800f0d2:	2e02      	cmp	r6, #2
 800f0d4:	f000 80c7 	beq.w	800f266 <__kernel_rem_pio2f+0x2ae>
 800f0d8:	2d02      	cmp	r5, #2
 800f0da:	d168      	bne.n	800f1ae <__kernel_rem_pio2f+0x1f6>
 800f0dc:	4621      	mov	r1, r4
 800f0de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f0e2:	f7f1 fdb1 	bl	8000c48 <__aeabi_fsub>
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	f1b8 0f00 	cmp.w	r8, #0
 800f0ec:	d05f      	beq.n	800f1ae <__kernel_rem_pio2f+0x1f6>
 800f0ee:	4631      	mov	r1, r6
 800f0f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f0f4:	f000 fab8 	bl	800f668 <scalbnf>
 800f0f8:	4601      	mov	r1, r0
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	f7f1 fda4 	bl	8000c48 <__aeabi_fsub>
 800f100:	4604      	mov	r4, r0
 800f102:	e054      	b.n	800f1ae <__kernel_rem_pio2f+0x1f6>
 800f104:	42ef      	cmn	r7, r5
 800f106:	d407      	bmi.n	800f118 <__kernel_rem_pio2f+0x160>
 800f108:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f10c:	f7f1 fe52 	bl	8000db4 <__aeabi_i2f>
 800f110:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800f114:	3501      	adds	r5, #1
 800f116:	e773      	b.n	800f000 <__kernel_rem_pio2f+0x48>
 800f118:	4650      	mov	r0, sl
 800f11a:	e7f9      	b.n	800f110 <__kernel_rem_pio2f+0x158>
 800f11c:	fb0b 5207 	mla	r2, fp, r7, r5
 800f120:	9306      	str	r3, [sp, #24]
 800f122:	9b05      	ldr	r3, [sp, #20]
 800f124:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f128:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800f12c:	f7f1 fe96 	bl	8000e5c <__aeabi_fmul>
 800f130:	4601      	mov	r1, r0
 800f132:	4648      	mov	r0, r9
 800f134:	f7f1 fd8a 	bl	8000c4c <__addsf3>
 800f138:	4681      	mov	r9, r0
 800f13a:	9b06      	ldr	r3, [sp, #24]
 800f13c:	3701      	adds	r7, #1
 800f13e:	9a03      	ldr	r2, [sp, #12]
 800f140:	4297      	cmp	r7, r2
 800f142:	ddeb      	ble.n	800f11c <__kernel_rem_pio2f+0x164>
 800f144:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800f148:	3504      	adds	r5, #4
 800f14a:	f108 0801 	add.w	r8, r8, #1
 800f14e:	e764      	b.n	800f01a <__kernel_rem_pio2f+0x62>
 800f150:	46d1      	mov	r9, sl
 800f152:	2700      	movs	r7, #0
 800f154:	e7f3      	b.n	800f13e <__kernel_rem_pio2f+0x186>
 800f156:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f15a:	4620      	mov	r0, r4
 800f15c:	f7f1 fe7e 	bl	8000e5c <__aeabi_fmul>
 800f160:	f7f2 f842 	bl	80011e8 <__aeabi_f2iz>
 800f164:	f7f1 fe26 	bl	8000db4 <__aeabi_i2f>
 800f168:	4641      	mov	r1, r8
 800f16a:	4683      	mov	fp, r0
 800f16c:	f7f1 fe76 	bl	8000e5c <__aeabi_fmul>
 800f170:	4601      	mov	r1, r0
 800f172:	4620      	mov	r0, r4
 800f174:	f7f1 fd68 	bl	8000c48 <__aeabi_fsub>
 800f178:	f7f2 f836 	bl	80011e8 <__aeabi_f2iz>
 800f17c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f180:	f845 0f04 	str.w	r0, [r5, #4]!
 800f184:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800f188:	4658      	mov	r0, fp
 800f18a:	f7f1 fd5f 	bl	8000c4c <__addsf3>
 800f18e:	4604      	mov	r4, r0
 800f190:	e75c      	b.n	800f04c <__kernel_rem_pio2f+0x94>
 800f192:	d105      	bne.n	800f1a0 <__kernel_rem_pio2f+0x1e8>
 800f194:	1e7b      	subs	r3, r7, #1
 800f196:	aa08      	add	r2, sp, #32
 800f198:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800f19c:	122d      	asrs	r5, r5, #8
 800f19e:	e78a      	b.n	800f0b6 <__kernel_rem_pio2f+0xfe>
 800f1a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f1a4:	f7f2 f80c 	bl	80011c0 <__aeabi_fcmpge>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d139      	bne.n	800f220 <__kernel_rem_pio2f+0x268>
 800f1ac:	4605      	mov	r5, r0
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f7f1 ffe7 	bl	8001184 <__aeabi_fcmpeq>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	f000 80a0 	beq.w	800f2fc <__kernel_rem_pio2f+0x344>
 800f1bc:	1e7c      	subs	r4, r7, #1
 800f1be:	4623      	mov	r3, r4
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	9902      	ldr	r1, [sp, #8]
 800f1c4:	428b      	cmp	r3, r1
 800f1c6:	da55      	bge.n	800f274 <__kernel_rem_pio2f+0x2bc>
 800f1c8:	2a00      	cmp	r2, #0
 800f1ca:	d07e      	beq.n	800f2ca <__kernel_rem_pio2f+0x312>
 800f1cc:	ab08      	add	r3, sp, #32
 800f1ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f1d2:	3e08      	subs	r6, #8
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f000 808f 	beq.w	800f2f8 <__kernel_rem_pio2f+0x340>
 800f1da:	4631      	mov	r1, r6
 800f1dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800f1e0:	f000 fa42 	bl	800f668 <scalbnf>
 800f1e4:	46a0      	mov	r8, r4
 800f1e6:	4682      	mov	sl, r0
 800f1e8:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 800f1ec:	af44      	add	r7, sp, #272	; 0x110
 800f1ee:	f1b8 0f00 	cmp.w	r8, #0
 800f1f2:	f280 80b5 	bge.w	800f360 <__kernel_rem_pio2f+0x3a8>
 800f1f6:	f04f 0a00 	mov.w	sl, #0
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	00a6      	lsls	r6, r4, #2
 800f1fe:	4a35      	ldr	r2, [pc, #212]	; (800f2d4 <__kernel_rem_pio2f+0x31c>)
 800f200:	4437      	add	r7, r6
 800f202:	eba4 010a 	sub.w	r1, r4, sl
 800f206:	2900      	cmp	r1, #0
 800f208:	f280 80db 	bge.w	800f3c2 <__kernel_rem_pio2f+0x40a>
 800f20c:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800f20e:	2b03      	cmp	r3, #3
 800f210:	f200 80ff 	bhi.w	800f412 <__kernel_rem_pio2f+0x45a>
 800f214:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f218:	01200102 	.word	0x01200102
 800f21c:	00d90120 	.word	0x00d90120
 800f220:	2502      	movs	r5, #2
 800f222:	e74a      	b.n	800f0ba <__kernel_rem_pio2f+0x102>
 800f224:	ab08      	add	r3, sp, #32
 800f226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f22a:	f1b8 0f00 	cmp.w	r8, #0
 800f22e:	d109      	bne.n	800f244 <__kernel_rem_pio2f+0x28c>
 800f230:	b12b      	cbz	r3, 800f23e <__kernel_rem_pio2f+0x286>
 800f232:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f236:	a908      	add	r1, sp, #32
 800f238:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f23c:	2301      	movs	r3, #1
 800f23e:	3201      	adds	r2, #1
 800f240:	4698      	mov	r8, r3
 800f242:	e73e      	b.n	800f0c2 <__kernel_rem_pio2f+0x10a>
 800f244:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f248:	a908      	add	r1, sp, #32
 800f24a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f24e:	4643      	mov	r3, r8
 800f250:	e7f5      	b.n	800f23e <__kernel_rem_pio2f+0x286>
 800f252:	1e7a      	subs	r2, r7, #1
 800f254:	ab08      	add	r3, sp, #32
 800f256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f25e:	a908      	add	r1, sp, #32
 800f260:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f264:	e738      	b.n	800f0d8 <__kernel_rem_pio2f+0x120>
 800f266:	1e7a      	subs	r2, r7, #1
 800f268:	ab08      	add	r3, sp, #32
 800f26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f26e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f272:	e7f4      	b.n	800f25e <__kernel_rem_pio2f+0x2a6>
 800f274:	a908      	add	r1, sp, #32
 800f276:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	430a      	orrs	r2, r1
 800f27e:	e7a0      	b.n	800f1c2 <__kernel_rem_pio2f+0x20a>
 800f280:	3301      	adds	r3, #1
 800f282:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f286:	2900      	cmp	r1, #0
 800f288:	d0fa      	beq.n	800f280 <__kernel_rem_pio2f+0x2c8>
 800f28a:	f06f 0803 	mvn.w	r8, #3
 800f28e:	9a04      	ldr	r2, [sp, #16]
 800f290:	1c7d      	adds	r5, r7, #1
 800f292:	18bc      	adds	r4, r7, r2
 800f294:	aa1c      	add	r2, sp, #112	; 0x70
 800f296:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f29a:	441f      	add	r7, r3
 800f29c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800f2a0:	42af      	cmp	r7, r5
 800f2a2:	f6ff aec8 	blt.w	800f036 <__kernel_rem_pio2f+0x7e>
 800f2a6:	9b06      	ldr	r3, [sp, #24]
 800f2a8:	f04f 0a00 	mov.w	sl, #0
 800f2ac:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2b0:	f7f1 fd80 	bl	8000db4 <__aeabi_i2f>
 800f2b4:	f04f 0b00 	mov.w	fp, #0
 800f2b8:	6020      	str	r0, [r4, #0]
 800f2ba:	9b03      	ldr	r3, [sp, #12]
 800f2bc:	459a      	cmp	sl, r3
 800f2be:	dd0b      	ble.n	800f2d8 <__kernel_rem_pio2f+0x320>
 800f2c0:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800f2c4:	3404      	adds	r4, #4
 800f2c6:	3501      	adds	r5, #1
 800f2c8:	e7ea      	b.n	800f2a0 <__kernel_rem_pio2f+0x2e8>
 800f2ca:	9a07      	ldr	r2, [sp, #28]
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e7d8      	b.n	800f282 <__kernel_rem_pio2f+0x2ca>
 800f2d0:	08010604 	.word	0x08010604
 800f2d4:	080105d8 	.word	0x080105d8
 800f2d8:	fb08 f30a 	mul.w	r3, r8, sl
 800f2dc:	9a05      	ldr	r2, [sp, #20]
 800f2de:	58e0      	ldr	r0, [r4, r3]
 800f2e0:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800f2e4:	f7f1 fdba 	bl	8000e5c <__aeabi_fmul>
 800f2e8:	4601      	mov	r1, r0
 800f2ea:	4658      	mov	r0, fp
 800f2ec:	f7f1 fcae 	bl	8000c4c <__addsf3>
 800f2f0:	f10a 0a01 	add.w	sl, sl, #1
 800f2f4:	4683      	mov	fp, r0
 800f2f6:	e7e0      	b.n	800f2ba <__kernel_rem_pio2f+0x302>
 800f2f8:	3c01      	subs	r4, #1
 800f2fa:	e767      	b.n	800f1cc <__kernel_rem_pio2f+0x214>
 800f2fc:	4271      	negs	r1, r6
 800f2fe:	4620      	mov	r0, r4
 800f300:	f000 f9b2 	bl	800f668 <scalbnf>
 800f304:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f308:	4604      	mov	r4, r0
 800f30a:	f7f1 ff59 	bl	80011c0 <__aeabi_fcmpge>
 800f30e:	b1f8      	cbz	r0, 800f350 <__kernel_rem_pio2f+0x398>
 800f310:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800f314:	4620      	mov	r0, r4
 800f316:	f7f1 fda1 	bl	8000e5c <__aeabi_fmul>
 800f31a:	f7f1 ff65 	bl	80011e8 <__aeabi_f2iz>
 800f31e:	f7f1 fd49 	bl	8000db4 <__aeabi_i2f>
 800f322:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800f326:	4680      	mov	r8, r0
 800f328:	f7f1 fd98 	bl	8000e5c <__aeabi_fmul>
 800f32c:	4601      	mov	r1, r0
 800f32e:	4620      	mov	r0, r4
 800f330:	f7f1 fc8a 	bl	8000c48 <__aeabi_fsub>
 800f334:	f7f1 ff58 	bl	80011e8 <__aeabi_f2iz>
 800f338:	ab08      	add	r3, sp, #32
 800f33a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800f33e:	4640      	mov	r0, r8
 800f340:	f7f1 ff52 	bl	80011e8 <__aeabi_f2iz>
 800f344:	1c7c      	adds	r4, r7, #1
 800f346:	ab08      	add	r3, sp, #32
 800f348:	3608      	adds	r6, #8
 800f34a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f34e:	e744      	b.n	800f1da <__kernel_rem_pio2f+0x222>
 800f350:	4620      	mov	r0, r4
 800f352:	f7f1 ff49 	bl	80011e8 <__aeabi_f2iz>
 800f356:	ab08      	add	r3, sp, #32
 800f358:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800f35c:	463c      	mov	r4, r7
 800f35e:	e73c      	b.n	800f1da <__kernel_rem_pio2f+0x222>
 800f360:	ab08      	add	r3, sp, #32
 800f362:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f366:	f7f1 fd25 	bl	8000db4 <__aeabi_i2f>
 800f36a:	4651      	mov	r1, sl
 800f36c:	f7f1 fd76 	bl	8000e5c <__aeabi_fmul>
 800f370:	4631      	mov	r1, r6
 800f372:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800f376:	4650      	mov	r0, sl
 800f378:	f7f1 fd70 	bl	8000e5c <__aeabi_fmul>
 800f37c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f380:	4682      	mov	sl, r0
 800f382:	e734      	b.n	800f1ee <__kernel_rem_pio2f+0x236>
 800f384:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800f388:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800f38c:	9304      	str	r3, [sp, #16]
 800f38e:	9203      	str	r2, [sp, #12]
 800f390:	f7f1 fd64 	bl	8000e5c <__aeabi_fmul>
 800f394:	4601      	mov	r1, r0
 800f396:	4658      	mov	r0, fp
 800f398:	f7f1 fc58 	bl	8000c4c <__addsf3>
 800f39c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800f3a0:	4683      	mov	fp, r0
 800f3a2:	f108 0801 	add.w	r8, r8, #1
 800f3a6:	9902      	ldr	r1, [sp, #8]
 800f3a8:	4588      	cmp	r8, r1
 800f3aa:	dc01      	bgt.n	800f3b0 <__kernel_rem_pio2f+0x3f8>
 800f3ac:	45c2      	cmp	sl, r8
 800f3ae:	dae9      	bge.n	800f384 <__kernel_rem_pio2f+0x3cc>
 800f3b0:	a958      	add	r1, sp, #352	; 0x160
 800f3b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f3b6:	f841 bca0 	str.w	fp, [r1, #-160]
 800f3ba:	f10a 0a01 	add.w	sl, sl, #1
 800f3be:	3f04      	subs	r7, #4
 800f3c0:	e71f      	b.n	800f202 <__kernel_rem_pio2f+0x24a>
 800f3c2:	469b      	mov	fp, r3
 800f3c4:	f04f 0800 	mov.w	r8, #0
 800f3c8:	e7ed      	b.n	800f3a6 <__kernel_rem_pio2f+0x3ee>
 800f3ca:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800f3ce:	4456      	add	r6, sl
 800f3d0:	4637      	mov	r7, r6
 800f3d2:	46a0      	mov	r8, r4
 800f3d4:	f1b8 0f00 	cmp.w	r8, #0
 800f3d8:	dc4a      	bgt.n	800f470 <__kernel_rem_pio2f+0x4b8>
 800f3da:	4627      	mov	r7, r4
 800f3dc:	2f01      	cmp	r7, #1
 800f3de:	dc60      	bgt.n	800f4a2 <__kernel_rem_pio2f+0x4ea>
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	2c01      	cmp	r4, #1
 800f3e4:	dc74      	bgt.n	800f4d0 <__kernel_rem_pio2f+0x518>
 800f3e6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800f3e8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800f3ea:	2d00      	cmp	r5, #0
 800f3ec:	d176      	bne.n	800f4dc <__kernel_rem_pio2f+0x524>
 800f3ee:	9901      	ldr	r1, [sp, #4]
 800f3f0:	600a      	str	r2, [r1, #0]
 800f3f2:	460a      	mov	r2, r1
 800f3f4:	604b      	str	r3, [r1, #4]
 800f3f6:	6090      	str	r0, [r2, #8]
 800f3f8:	e00b      	b.n	800f412 <__kernel_rem_pio2f+0x45a>
 800f3fa:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800f3fe:	f7f1 fc25 	bl	8000c4c <__addsf3>
 800f402:	3c01      	subs	r4, #1
 800f404:	2c00      	cmp	r4, #0
 800f406:	daf8      	bge.n	800f3fa <__kernel_rem_pio2f+0x442>
 800f408:	b10d      	cbz	r5, 800f40e <__kernel_rem_pio2f+0x456>
 800f40a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f40e:	9b01      	ldr	r3, [sp, #4]
 800f410:	6018      	str	r0, [r3, #0]
 800f412:	f009 0007 	and.w	r0, r9, #7
 800f416:	b059      	add	sp, #356	; 0x164
 800f418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f41c:	2000      	movs	r0, #0
 800f41e:	ae30      	add	r6, sp, #192	; 0xc0
 800f420:	e7f0      	b.n	800f404 <__kernel_rem_pio2f+0x44c>
 800f422:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800f426:	f7f1 fc11 	bl	8000c4c <__addsf3>
 800f42a:	3e01      	subs	r6, #1
 800f42c:	2e00      	cmp	r6, #0
 800f42e:	daf8      	bge.n	800f422 <__kernel_rem_pio2f+0x46a>
 800f430:	b1b5      	cbz	r5, 800f460 <__kernel_rem_pio2f+0x4a8>
 800f432:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800f436:	9a01      	ldr	r2, [sp, #4]
 800f438:	af58      	add	r7, sp, #352	; 0x160
 800f43a:	4601      	mov	r1, r0
 800f43c:	6013      	str	r3, [r2, #0]
 800f43e:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800f442:	f7f1 fc01 	bl	8000c48 <__aeabi_fsub>
 800f446:	2601      	movs	r6, #1
 800f448:	42b4      	cmp	r4, r6
 800f44a:	da0b      	bge.n	800f464 <__kernel_rem_pio2f+0x4ac>
 800f44c:	b10d      	cbz	r5, 800f452 <__kernel_rem_pio2f+0x49a>
 800f44e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f452:	9b01      	ldr	r3, [sp, #4]
 800f454:	6058      	str	r0, [r3, #4]
 800f456:	e7dc      	b.n	800f412 <__kernel_rem_pio2f+0x45a>
 800f458:	4626      	mov	r6, r4
 800f45a:	2000      	movs	r0, #0
 800f45c:	af30      	add	r7, sp, #192	; 0xc0
 800f45e:	e7e5      	b.n	800f42c <__kernel_rem_pio2f+0x474>
 800f460:	4603      	mov	r3, r0
 800f462:	e7e8      	b.n	800f436 <__kernel_rem_pio2f+0x47e>
 800f464:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800f468:	f7f1 fbf0 	bl	8000c4c <__addsf3>
 800f46c:	3601      	adds	r6, #1
 800f46e:	e7eb      	b.n	800f448 <__kernel_rem_pio2f+0x490>
 800f470:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 800f474:	f108 38ff 	add.w	r8, r8, #4294967295
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4610      	mov	r0, r2
 800f47c:	4619      	mov	r1, r3
 800f47e:	9303      	str	r3, [sp, #12]
 800f480:	9202      	str	r2, [sp, #8]
 800f482:	f7f1 fbe3 	bl	8000c4c <__addsf3>
 800f486:	9a02      	ldr	r2, [sp, #8]
 800f488:	4601      	mov	r1, r0
 800f48a:	4683      	mov	fp, r0
 800f48c:	4610      	mov	r0, r2
 800f48e:	f7f1 fbdb 	bl	8000c48 <__aeabi_fsub>
 800f492:	9b03      	ldr	r3, [sp, #12]
 800f494:	4619      	mov	r1, r3
 800f496:	f7f1 fbd9 	bl	8000c4c <__addsf3>
 800f49a:	f8c7 b000 	str.w	fp, [r7]
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	e798      	b.n	800f3d4 <__kernel_rem_pio2f+0x41c>
 800f4a2:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800f4a6:	3f01      	subs	r7, #1
 800f4a8:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	4659      	mov	r1, fp
 800f4b0:	9302      	str	r3, [sp, #8]
 800f4b2:	f7f1 fbcb 	bl	8000c4c <__addsf3>
 800f4b6:	9b02      	ldr	r3, [sp, #8]
 800f4b8:	4601      	mov	r1, r0
 800f4ba:	4680      	mov	r8, r0
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7f1 fbc3 	bl	8000c48 <__aeabi_fsub>
 800f4c2:	4659      	mov	r1, fp
 800f4c4:	f7f1 fbc2 	bl	8000c4c <__addsf3>
 800f4c8:	f8c6 8000 	str.w	r8, [r6]
 800f4cc:	6070      	str	r0, [r6, #4]
 800f4ce:	e785      	b.n	800f3dc <__kernel_rem_pio2f+0x424>
 800f4d0:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800f4d4:	f7f1 fbba 	bl	8000c4c <__addsf3>
 800f4d8:	3c01      	subs	r4, #1
 800f4da:	e782      	b.n	800f3e2 <__kernel_rem_pio2f+0x42a>
 800f4dc:	9901      	ldr	r1, [sp, #4]
 800f4de:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800f4e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f4e6:	600a      	str	r2, [r1, #0]
 800f4e8:	604b      	str	r3, [r1, #4]
 800f4ea:	460a      	mov	r2, r1
 800f4ec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f4f0:	e781      	b.n	800f3f6 <__kernel_rem_pio2f+0x43e>
 800f4f2:	bf00      	nop

0800f4f4 <__kernel_sinf>:
 800f4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f4fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f500:	4604      	mov	r4, r0
 800f502:	460f      	mov	r7, r1
 800f504:	4691      	mov	r9, r2
 800f506:	da03      	bge.n	800f510 <__kernel_sinf+0x1c>
 800f508:	f7f1 fe6e 	bl	80011e8 <__aeabi_f2iz>
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d035      	beq.n	800f57c <__kernel_sinf+0x88>
 800f510:	4621      	mov	r1, r4
 800f512:	4620      	mov	r0, r4
 800f514:	f7f1 fca2 	bl	8000e5c <__aeabi_fmul>
 800f518:	4605      	mov	r5, r0
 800f51a:	4601      	mov	r1, r0
 800f51c:	4620      	mov	r0, r4
 800f51e:	f7f1 fc9d 	bl	8000e5c <__aeabi_fmul>
 800f522:	4929      	ldr	r1, [pc, #164]	; (800f5c8 <__kernel_sinf+0xd4>)
 800f524:	4606      	mov	r6, r0
 800f526:	4628      	mov	r0, r5
 800f528:	f7f1 fc98 	bl	8000e5c <__aeabi_fmul>
 800f52c:	4927      	ldr	r1, [pc, #156]	; (800f5cc <__kernel_sinf+0xd8>)
 800f52e:	f7f1 fb8b 	bl	8000c48 <__aeabi_fsub>
 800f532:	4629      	mov	r1, r5
 800f534:	f7f1 fc92 	bl	8000e5c <__aeabi_fmul>
 800f538:	4925      	ldr	r1, [pc, #148]	; (800f5d0 <__kernel_sinf+0xdc>)
 800f53a:	f7f1 fb87 	bl	8000c4c <__addsf3>
 800f53e:	4629      	mov	r1, r5
 800f540:	f7f1 fc8c 	bl	8000e5c <__aeabi_fmul>
 800f544:	4923      	ldr	r1, [pc, #140]	; (800f5d4 <__kernel_sinf+0xe0>)
 800f546:	f7f1 fb7f 	bl	8000c48 <__aeabi_fsub>
 800f54a:	4629      	mov	r1, r5
 800f54c:	f7f1 fc86 	bl	8000e5c <__aeabi_fmul>
 800f550:	4921      	ldr	r1, [pc, #132]	; (800f5d8 <__kernel_sinf+0xe4>)
 800f552:	f7f1 fb7b 	bl	8000c4c <__addsf3>
 800f556:	4680      	mov	r8, r0
 800f558:	f1b9 0f00 	cmp.w	r9, #0
 800f55c:	d111      	bne.n	800f582 <__kernel_sinf+0x8e>
 800f55e:	4601      	mov	r1, r0
 800f560:	4628      	mov	r0, r5
 800f562:	f7f1 fc7b 	bl	8000e5c <__aeabi_fmul>
 800f566:	491d      	ldr	r1, [pc, #116]	; (800f5dc <__kernel_sinf+0xe8>)
 800f568:	f7f1 fb6e 	bl	8000c48 <__aeabi_fsub>
 800f56c:	4631      	mov	r1, r6
 800f56e:	f7f1 fc75 	bl	8000e5c <__aeabi_fmul>
 800f572:	4601      	mov	r1, r0
 800f574:	4620      	mov	r0, r4
 800f576:	f7f1 fb69 	bl	8000c4c <__addsf3>
 800f57a:	4604      	mov	r4, r0
 800f57c:	4620      	mov	r0, r4
 800f57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f582:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800f586:	4638      	mov	r0, r7
 800f588:	f7f1 fc68 	bl	8000e5c <__aeabi_fmul>
 800f58c:	4641      	mov	r1, r8
 800f58e:	4681      	mov	r9, r0
 800f590:	4630      	mov	r0, r6
 800f592:	f7f1 fc63 	bl	8000e5c <__aeabi_fmul>
 800f596:	4601      	mov	r1, r0
 800f598:	4648      	mov	r0, r9
 800f59a:	f7f1 fb55 	bl	8000c48 <__aeabi_fsub>
 800f59e:	4629      	mov	r1, r5
 800f5a0:	f7f1 fc5c 	bl	8000e5c <__aeabi_fmul>
 800f5a4:	4639      	mov	r1, r7
 800f5a6:	f7f1 fb4f 	bl	8000c48 <__aeabi_fsub>
 800f5aa:	490c      	ldr	r1, [pc, #48]	; (800f5dc <__kernel_sinf+0xe8>)
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	f7f1 fc54 	bl	8000e5c <__aeabi_fmul>
 800f5b4:	4601      	mov	r1, r0
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	f7f1 fb48 	bl	8000c4c <__addsf3>
 800f5bc:	4601      	mov	r1, r0
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f7f1 fb42 	bl	8000c48 <__aeabi_fsub>
 800f5c4:	e7d9      	b.n	800f57a <__kernel_sinf+0x86>
 800f5c6:	bf00      	nop
 800f5c8:	2f2ec9d3 	.word	0x2f2ec9d3
 800f5cc:	32d72f34 	.word	0x32d72f34
 800f5d0:	3638ef1b 	.word	0x3638ef1b
 800f5d4:	39500d01 	.word	0x39500d01
 800f5d8:	3c088889 	.word	0x3c088889
 800f5dc:	3e2aaaab 	.word	0x3e2aaaab

0800f5e0 <fabsf>:
 800f5e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f5e4:	4770      	bx	lr
	...

0800f5e8 <floorf>:
 800f5e8:	b570      	push	{r4, r5, r6, lr}
 800f5ea:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f5ee:	0df5      	lsrs	r5, r6, #23
 800f5f0:	3d7f      	subs	r5, #127	; 0x7f
 800f5f2:	2d16      	cmp	r5, #22
 800f5f4:	4601      	mov	r1, r0
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	dc26      	bgt.n	800f648 <floorf+0x60>
 800f5fa:	2d00      	cmp	r5, #0
 800f5fc:	da0e      	bge.n	800f61c <floorf+0x34>
 800f5fe:	4917      	ldr	r1, [pc, #92]	; (800f65c <floorf+0x74>)
 800f600:	f7f1 fb24 	bl	8000c4c <__addsf3>
 800f604:	2100      	movs	r1, #0
 800f606:	f7f1 fde5 	bl	80011d4 <__aeabi_fcmpgt>
 800f60a:	b128      	cbz	r0, 800f618 <floorf+0x30>
 800f60c:	2c00      	cmp	r4, #0
 800f60e:	da23      	bge.n	800f658 <floorf+0x70>
 800f610:	4b13      	ldr	r3, [pc, #76]	; (800f660 <floorf+0x78>)
 800f612:	2e00      	cmp	r6, #0
 800f614:	bf18      	it	ne
 800f616:	461c      	movne	r4, r3
 800f618:	4621      	mov	r1, r4
 800f61a:	e01b      	b.n	800f654 <floorf+0x6c>
 800f61c:	4e11      	ldr	r6, [pc, #68]	; (800f664 <floorf+0x7c>)
 800f61e:	412e      	asrs	r6, r5
 800f620:	4230      	tst	r0, r6
 800f622:	d017      	beq.n	800f654 <floorf+0x6c>
 800f624:	490d      	ldr	r1, [pc, #52]	; (800f65c <floorf+0x74>)
 800f626:	f7f1 fb11 	bl	8000c4c <__addsf3>
 800f62a:	2100      	movs	r1, #0
 800f62c:	f7f1 fdd2 	bl	80011d4 <__aeabi_fcmpgt>
 800f630:	2800      	cmp	r0, #0
 800f632:	d0f1      	beq.n	800f618 <floorf+0x30>
 800f634:	2c00      	cmp	r4, #0
 800f636:	bfbe      	ittt	lt
 800f638:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800f63c:	fa43 f505 	asrlt.w	r5, r3, r5
 800f640:	1964      	addlt	r4, r4, r5
 800f642:	ea24 0406 	bic.w	r4, r4, r6
 800f646:	e7e7      	b.n	800f618 <floorf+0x30>
 800f648:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f64c:	d302      	bcc.n	800f654 <floorf+0x6c>
 800f64e:	f7f1 fafd 	bl	8000c4c <__addsf3>
 800f652:	4601      	mov	r1, r0
 800f654:	4608      	mov	r0, r1
 800f656:	bd70      	pop	{r4, r5, r6, pc}
 800f658:	2400      	movs	r4, #0
 800f65a:	e7dd      	b.n	800f618 <floorf+0x30>
 800f65c:	7149f2ca 	.word	0x7149f2ca
 800f660:	bf800000 	.word	0xbf800000
 800f664:	007fffff 	.word	0x007fffff

0800f668 <scalbnf>:
 800f668:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800f66c:	b510      	push	{r4, lr}
 800f66e:	4602      	mov	r2, r0
 800f670:	460c      	mov	r4, r1
 800f672:	4601      	mov	r1, r0
 800f674:	d027      	beq.n	800f6c6 <scalbnf+0x5e>
 800f676:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f67a:	d303      	bcc.n	800f684 <scalbnf+0x1c>
 800f67c:	f7f1 fae6 	bl	8000c4c <__addsf3>
 800f680:	4602      	mov	r2, r0
 800f682:	e020      	b.n	800f6c6 <scalbnf+0x5e>
 800f684:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f688:	d215      	bcs.n	800f6b6 <scalbnf+0x4e>
 800f68a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800f68e:	f7f1 fbe5 	bl	8000e5c <__aeabi_fmul>
 800f692:	4b18      	ldr	r3, [pc, #96]	; (800f6f4 <scalbnf+0x8c>)
 800f694:	4602      	mov	r2, r0
 800f696:	429c      	cmp	r4, r3
 800f698:	db22      	blt.n	800f6e0 <scalbnf+0x78>
 800f69a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f69e:	3b19      	subs	r3, #25
 800f6a0:	4423      	add	r3, r4
 800f6a2:	2bfe      	cmp	r3, #254	; 0xfe
 800f6a4:	dd09      	ble.n	800f6ba <scalbnf+0x52>
 800f6a6:	4611      	mov	r1, r2
 800f6a8:	4813      	ldr	r0, [pc, #76]	; (800f6f8 <scalbnf+0x90>)
 800f6aa:	f000 f829 	bl	800f700 <copysignf>
 800f6ae:	4912      	ldr	r1, [pc, #72]	; (800f6f8 <scalbnf+0x90>)
 800f6b0:	f7f1 fbd4 	bl	8000e5c <__aeabi_fmul>
 800f6b4:	e7e4      	b.n	800f680 <scalbnf+0x18>
 800f6b6:	0ddb      	lsrs	r3, r3, #23
 800f6b8:	e7f2      	b.n	800f6a0 <scalbnf+0x38>
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	dd05      	ble.n	800f6ca <scalbnf+0x62>
 800f6be:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800f6c2:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800f6c6:	4610      	mov	r0, r2
 800f6c8:	bd10      	pop	{r4, pc}
 800f6ca:	f113 0f16 	cmn.w	r3, #22
 800f6ce:	da09      	bge.n	800f6e4 <scalbnf+0x7c>
 800f6d0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f6d4:	429c      	cmp	r4, r3
 800f6d6:	4611      	mov	r1, r2
 800f6d8:	dce6      	bgt.n	800f6a8 <scalbnf+0x40>
 800f6da:	4808      	ldr	r0, [pc, #32]	; (800f6fc <scalbnf+0x94>)
 800f6dc:	f000 f810 	bl	800f700 <copysignf>
 800f6e0:	4906      	ldr	r1, [pc, #24]	; (800f6fc <scalbnf+0x94>)
 800f6e2:	e7e5      	b.n	800f6b0 <scalbnf+0x48>
 800f6e4:	3319      	adds	r3, #25
 800f6e6:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800f6ea:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800f6ee:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800f6f2:	e7dd      	b.n	800f6b0 <scalbnf+0x48>
 800f6f4:	ffff3cb0 	.word	0xffff3cb0
 800f6f8:	7149f2ca 	.word	0x7149f2ca
 800f6fc:	0da24260 	.word	0x0da24260

0800f700 <copysignf>:
 800f700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800f704:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f708:	4308      	orrs	r0, r1
 800f70a:	4770      	bx	lr

0800f70c <_init>:
 800f70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70e:	bf00      	nop
 800f710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f712:	bc08      	pop	{r3}
 800f714:	469e      	mov	lr, r3
 800f716:	4770      	bx	lr

0800f718 <_fini>:
 800f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71a:	bf00      	nop
 800f71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f71e:	bc08      	pop	{r3}
 800f720:	469e      	mov	lr, r3
 800f722:	4770      	bx	lr
